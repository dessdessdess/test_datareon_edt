    // ПодразделениеРаботаетСМП = ОбменДаннымиFranchise.ПолучитьСостояниеПодразделенияПоРаботеСМП(ОбъектОбработки.Ссылка);
	// Если ПодразделениеРаботаетСМП Или ОбъектОбработки.ПризнакШиномонтаж Или ОбъектОбработки.ПризнакПВЗ Тогда
				
	// Иначе
		
	// 	СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОбработкаОтменена;
	//     ТекстОшибки = СтрШаблон("(%1) Подразделение не подлежит выгрузке в Ниппель", СокрЛП(ОбъектОбработки.Ссылка));
	    		
	// КонецЕсли;  

    Если ТипЗнч(ОбъектОбработки) = Тип("Структура") Тогда
	
	    СсылкаПодразделение = ОбъектОбработки.Ссылка;
	    УстановитьСвойствоСообщения("ИДСообщенияВХранилище", ОбъектОбработки.ИДСообщенияВХранилище);
	
    Иначе
	
	    СсылкаПодразделение = ОбъектОбработки;
	
    КонецЕсли;
	
	Данные = Новый Структура;

    updated = Формат(ДатаРегистрации, "ДФ=ddMMyyyyHHmmss");
	
    Если Не СсылкаПодразделение.ПометкаУдаления Тогда

        //КлючевыеСвойстваСервисныйЦентр = ОбменДаннымиFranchise.ПолучитьДанныеСервисногоЦентра(ОбъектОбработки.Ссылка);
        МассивСтруктур = ОбменДаннымиFranchise.ПолучитьДанныеВСтруктуре(СсылкаПодразделение);
        ОбщиеДанныеПоСервисномуЦентру = ОбменДаннымиFranchise.МассивСтруктурВТаблицуЗначений(МассивСтруктур);
        Отбор = Новый Структура();

        Отбор.Вставить("AdditionalInfo", "КлючевыеСвойстваСервисныйЦентр");
        мсвКлючевыеСвойстваСервисныйЦентр = ОбщиеДанныеПоСервисномуЦентру.НайтиСтроки(Отбор);

        Если мсвКлючевыеСвойстваСервисныйЦентр.Количество() > 0 Тогда

            КлючевыеСвойстваСервисныйЦентр = мсвКлючевыеСвойстваСервисныйЦентр[0];

            мсвИтемс = Новый Массив;

	        сткОбъект = Новый Структура();
	        сткОбъект.Вставить("link", 				 КлючевыеСвойстваСервисныйЦентр.Ссылка);
	        сткОбъект.Вставить("name", 				 КлючевыеСвойстваСервисныйЦентр.Наименование);
	        сткОбъект.Вставить("location", 			 КлючевыеСвойстваСервисныйЦентр.Местоположение);
	        сткОбъект.Вставить("recording_interval", КлючевыеСвойстваСервисныйЦентр.ИнтервалДляЗаписи);
	        //сткОбъект.Вставить("number_recordings_per_interval", КлючевыеСвойстваСервисныйЦентр.КоличествоЗаписейНаИнтервал);
	        сткОбъект.Вставить("latitude", 			 СтрЗаменить(СокрЛП(КлючевыеСвойстваСервисныйЦентр.Широта), ",", "."));
	        сткОбъект.Вставить("longitude", 		 СтрЗаменить(СокрЛП(КлючевыеСвойстваСервисныйЦентр.Долгота), ",", "."));
	        сткОбъект.Вставить("code_site", 		 КлючевыеСвойстваСервисныйЦентр.КодНаСайте);
	        сткОбъект.Вставить("is_active", 		 КлючевыеСвойстваСервисныйЦентр.Активна);
	        сткОбъект.Вставить("is_only_pvz", 		 КлючевыеСвойстваСервисныйЦентр.ТолькоПВЗ);
	        сткОбъект.Вставить("is_leasing", 		 КлючевыеСвойстваСервисныйЦентр.РаботаСЛизингом);
	        сткОбъект.Вставить("utc", 				 КлючевыеСвойстваСервисныйЦентр.UTC);
	        сткОбъект.Вставить("warehouse_code", 	 Неопределено);
	        сткОбъект.Вставить("calendar_id", 		 КлючевыеСвойстваСервисныйЦентр.ПроизводственныйКалендарь.Ссылка);
	
	        сткИтем = Новый Структура();
	        сткИтем.Вставить("object", сткОбъект);
	        сткИтем.Вставить("updated", updated);
	    
	        мсвИтемс.Добавить(сткИтем);
	
	        Данные.Вставить("items", мсвИтемс);

        Иначе

            СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОбработкаОтменена;
	        ТекстОшибки = СтрШаблон("(%1) Не найдены ключевые свойства сервисного центра", СокрЛП(СсылкаПодразделение));
	        ВызватьИсключение ТекстОшибки;

        КонецЕсли;
        
        //Посты        
        Отбор.Вставить("AdditionalInfo", "КлючевыеСвойстваПоста");
        КлючевыеСвойстваПоста = ОбщиеДанныеПоСервисномуЦентру.НайтиСтроки(Отбор);        
        Если КлючевыеСвойстваПоста.Количество() > 0 Тогда
            Результат = ВыполнитьФункцию("nipПолучитьПостыПоСервисномуЦентру", КлючевыеСвойстваПоста);
            УстановитьСвойствоСообщения("terminals", Результат);
        КонецЕсли;

        //Время работы СЦ
        Отбор.Вставить("AdditionalInfo", "ВремяРаботыСервисногоЦентра");
        ВремяРаботыСервисногоЦентра = ОбщиеДанныеПоСервисномуЦентру.НайтиСтроки(Отбор);
        Если ВремяРаботыСервисногоЦентра.Количество() > 0 Тогда
            Результат = ВыполнитьФункцию("nipПолучитьВремяРаботыПоСервисномуЦентру", ВремяРаботыСервисногоЦентра);
            УстановитьСвойствоСообщения("working_hours", Результат);
        КонецЕсли;

        //Время работы СЦ (отклонения)
        Отбор.Вставить("AdditionalInfo", "ВремяРаботыСервисногоЦентраОтклонения");
        ВремяРаботыСервисногоЦентраОтклонения = ОбщиеДанныеПоСервисномуЦентру.НайтиСтроки(Отбор);        
        Если ВремяРаботыСервисногоЦентраОтклонения.Количество() > 0 Тогда
            Результат = ВыполнитьФункцию("nipПолучитьВремяРаботыПоСервисномуЦентруОтклонения", ВремяРаботыСервисногоЦентраОтклонения);
            УстановитьСвойствоСообщения("working_hours_exception", Результат);
        КонецЕсли;
	
        //Услуги сервисного центра    
        Отбор.Вставить("AdditionalInfo", "УслугиСервисногоЦентра");
        УслугиСервисногоЦентра = ОбщиеДанныеПоСервисномуЦентру.НайтиСтроки(Отбор);
        Если УслугиСервисногоЦентра.Количество() > 0 Тогда
            Результат = ВыполнитьФункцию("nipПолучитьУслугиПоСервисномуЦентру", УслугиСервисногоЦентра);
            Если Результат <> Неопределено Тогда
                УстановитьСвойствоСообщения("service_center_operations", Результат);
            КонецЕсли;
        КонецЕсли;

        //Цены услуг сервисного центра    
        Отбор.Вставить("AdditionalInfo", "ЦеныУслугСервисногоЦентра");
        ЦеныУслугСервисногоЦентра = ОбщиеДанныеПоСервисномуЦентру.НайтиСтроки(Отбор);
        Если ЦеныУслугСервисногоЦентра.Количество() > 0 Тогда
            Результат = ВыполнитьФункцию("nipПолучитьЦеныУслугПоСервисномуЦентру", ЦеныУслугСервисногоЦентра);
            УстановитьСвойствоСообщения("operation_prices", Результат);
        КонецЕсли;

        //Сотрудники сервисного центра    
        Отбор.Вставить("AdditionalInfo", "КлючевыеСвойстваСотрудник");
        СотрудникиСервисногоЦентра = ОбщиеДанныеПоСервисномуЦентру.НайтиСтроки(Отбор);
        Если СотрудникиСервисногоЦентра.Количество() > 0 Тогда
            Результат = ВыполнитьФункцию("nipПолучитьСотрудниковПоСервисномуЦентру", СотрудникиСервисногоЦентра);
            УстановитьСвойствоСообщения("users", Результат);
        КонецЕсли;

        //ФИАС
        Результат = ВыполнитьФункцию("nipПолучитьФИАС_ПоСервисномуЦентру", СсылкаПодразделение, КлючевыеСвойстваСервисныйЦентр.ТаблицаФИАС.СтрокаФИАС);
        УстановитьСвойствоСообщения("service_center_fias", Результат);

        //Цены материалов сервисного центра    
        Отбор.Вставить("AdditionalInfo", "ЦеныМатериаловСервисногоЦентра");
        ЦеныМатериаловСервисногоЦентра = ОбщиеДанныеПоСервисномуЦентру.НайтиСтроки(Отбор);
        Если ЦеныМатериаловСервисногоЦентра.Количество() > 0 Тогда
            Результат = ВыполнитьФункцию("nipПолучитьЦеныМатериаловПоСервисномуЦентру", ЦеныМатериаловСервисногоЦентра);
            УстановитьСвойствоСообщения("material_prices", Результат);
        КонецЕсли;
	
    Иначе

	    сткОбъект = Новый Структура();
	    сткОбъект.Вставить("link", СсылкаПодразделение);
	    сткИтем = Новый Структура();
	    сткИтем.Вставить("object", сткОбъект);
	    сткИтем.Вставить("updated", updated);
	
	    мсвИтемс = Новый Массив;
	    мсвИтемс.Добавить(сткИтем);
	
	    Данные.Вставить("deleted", мсвИтемс);

    КонецЕсли;
	
	РезультатОбработки.Body = сшпОбщегоНазначения.ПреобразоватьСтруктуруПоФормату(ФорматСообщения, Данные);

    
        