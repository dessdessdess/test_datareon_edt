ДокументОснование = dt_Параметр1;
Склад = dt_Параметр2;
СтруктураТаблицыДляДокументов = dt_Параметр3;

ТЗ_Товары = СтруктураТаблицыДляДокументов.ТЗФакт;
Если СтруктураТаблицыДляДокументов.ТЗ_ПринятыеКМ.Количество() > 0 Тогда 
	ТЗ_КМ = СтруктураТаблицыДляДокументов.ТЗ_ПринятыеКМ.Скопировать(Новый Структура("ЭтоПеремещение", Ложь));
КонецЕсли;
ТоварыПоПеремещению	= СтруктураТаблицыДляДокументов.ТоварыПоПеремещению;

///// Ищем Ранее созданную корректировку. Если ее нет, то создаем, иначе перезаполняем ТЧ "Товары"
ПроведенныйДокумент = Ложь;

Запрос = Новый Запрос;
Запрос.Текст =
"ВЫБРАТЬ
|	КорректировкаРеализации.Ссылка
|ИЗ
|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
|ГДЕ
|	КорректировкаРеализации.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ПриемкаТоваровНаСклад)
|	И КорректировкаРеализации.ДокументВозврата = &ДокОснование
|	И НЕ КорректировкаРеализации.ПометкаУдаления";

Запрос.УстановитьПараметр("ДокОснование", ДокументОснование);

РезультатЗапроса = Запрос.Выполнить();
Если РезультатЗапроса.Пустой() Тогда
    ДокОбъектКРТУ = Документы.КорректировкаРеализации.СоздатьДокумент();
    ДокОбъектКРТУ.Дата = ТекущаяДата();
    ДокОбъектКРТУ.Заполнить(ДокументОснование);
    ДокОбъектКРТУ.ДокументВозврата = ДокументОснование.Ссылка;
    ДокОбъектКРТУ.НомерВходящегоДокумента = ДокументОснование.Номер;
    ДокОбъектКРТУ.ДатаВходящегоДокумента = ДокументОснование.Дата;
    ДокОбъектКРТУ.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ПриемкаТоваровНаСклад;
    
    ДокОбъектПО = Неопределено;
    
Иначе
    Выборка = РезультатЗапроса.Выбрать();
    Выборка.Следующий();
    
    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ
    |	ПриходныйОрдерНаТовары.Ссылка
    |ИЗ
    |	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
    |ГДЕ
    |	ПриходныйОрдерНаТовары.Основание = &Основание
    |	И ПриходныйОрдерНаТовары.ПоступилИзWMS
    |	И НЕ ПриходныйОрдерНаТовары.ПометкаУдаления";
    
    Запрос.УстановитьПараметр("Основание", Выборка.Ссылка);
    Рез = Запрос.Выполнить();
    Если Рез.Пустой() Тогда
        ДокОбъектПО = Неопределено;
    Иначе
        ВыборкаПО = Рез.Выбрать();
        ВыборкаПО.Следующий();
        ДокОбъектПО = ВыборкаПО.Ссылка;
        
        Ответ = ДополнительныеФункции.ПолучитьНастройкуДействияСистемыПоНаименованию("Изменять проведенные ордера WMS", Ложь);
		Если Ответ = Ложь Тогда
			Если Выборка.Ссылка.Проведен Тогда
                ПроведенныйДокумент = Истина;
                РегистрыСведений.РезультатыЗагрузкиДокументовВМС_Акселот.ЗаписатьРезультатЗагрузки(Выборка.Ссылка, Ложь, 
			        СтрШаблон("%1:::%2:::%3:::%4", Выборка.Ссылка.Метаданные().ПолноеИмя(), "Обработчик СформироватьДокументыПоВозвратамОтФРТТ", "Проведение", "Нельзя изменять проведенные ордера WMS"));
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
    
    Если Не ПроведенныйДокумент Тогда
        ДокОбъектКРТУ = Выборка.Ссылка.ПолучитьОбъект();
        ДокОбъектКРТУ.Заполнить(ДокументОснование);
    КонецЕсли;
КонецЕсли;

Если Не ПроведенныйДокумент Тогда

    Если Не ТЗ_КМ = Неопределено Тогда
        Если ТЗ_КМ.Количество() > 0 Тогда
            ДокОбъектКРТУ.ШтрихкодыУпаковокПоВозврату.Загрузить(ТЗ_КМ);
        КонецЕсли;
    КонецЕсли;

    Для Каждого Стр Из ДокОбъектКРТУ.Товары Цикл
        Стр.Количество = Стр.КоличествоДоИзменения;
        Стр.Сумма = Стр.СуммаДоИзменения;
        Стр.СуммаНДС = Стр.СуммаНДСДоИзменения;
        Стр.ОтражатьТоварныйУчет = Ложь;
    КонецЦикла;

    ТЗ_ТоварыОснования = ТЗ_Товары.Скопировать();
    ТЗ_ТоварыОснования.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "КоличествоПринято, Сумма");

    ДокОбъектКРТУ.Товары.Сортировать("Номенклатура, ХарактеристикаНоменклатуры, КоличествоДоИзменения УБЫВ");

    Для Каждого СтрокаОснования Из ТЗ_ТоварыОснования Цикл
        Если СтрокаОснования.КоличествоПринято > 0 Тогда
            КоличествоДляКорректировки = СтрокаОснования.КоличествоПринято;
        
            НСтроки = ДокОбъектКРТУ.Товары.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаОснования.Номенклатура, СтрокаОснования.ХарактеристикаНоменклатуры));
            Для Каждого СтрокаТЧРеализации Из НСтроки Цикл
                Если СтрокаТЧРеализации.Количество >= КоличествоДляКорректировки Тогда
                    СтрокаТЧРеализации.ОтражатьТоварныйУчет = Истина;
                    СтрокаТЧРеализации.Количество = СтрокаТЧРеализации.Количество - КоличествоДляКорректировки;
                    СтрокаТЧРеализации.Сумма = СтрокаТЧРеализации.Сумма - (КоличествоДляКорректировки * СтрокаТЧРеализации.Цена);
                    ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧРеализации, ДокОбъектКРТУ);
                    Прервать;
                Иначе
                    КоличествоДляКорректировки = КоличествоДляКорректировки - СтрокаТЧРеализации.Количество;
                
                    СтрокаТЧРеализации.ОтражатьТоварныйУчет = Истина;
                    СтрокаТЧРеализации.Количество = СтрокаТЧРеализации.КоличествоДоИзменения - СтрокаТЧРеализации.Количество;
                    СтрокаТЧРеализации.Сумма = СтрокаТЧРеализации.СуммаДоИзменения - СтрокаТЧРеализации.Сумма;
                    ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧРеализации, ДокОбъектКРТУ);
                КонецЕсли;
            КонецЦикла;
        КонецЕсли;
    КонецЦикла;

    ТЗ_Номенклатура = ДокОбъектКРТУ.Товары.ВыгрузитьКолонки();
    Если ТЗ_Номенклатура.Колонки.Найти("Качество") = Неопределено Тогда
        ТЗ_Номенклатура.Колонки.Добавить("Качество");
    КонецЕсли;	
    Если ТЗ_Номенклатура.Колонки.Найти("Цена") = Неопределено Тогда
        ТЗ_Номенклатура.Колонки.Добавить("Цена");
    КонецЕсли;	
    Если ТЗ_Номенклатура.Колонки.Найти("ДокументРезерва") = Неопределено Тогда
        ТЗ_Номенклатура.Колонки.Добавить("ДокументРезерва");
    КонецЕсли;	

    ТоварыКРТУ = ДокОбъектКРТУ.Товары.Выгрузить(Новый Структура("ОтражатьТоварныйУчет", Истина));
    ТоварыКРТУ.Сортировать("Номенклатура, ХарактеристикаНоменклатуры, КоличествоДоИзменения УБЫВ");

    Для Каждого СтрокаТовара Из ТоварыКРТУ Цикл
        НоваяСтрока = ТЗ_Номенклатура.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
            
        НоваяСтрока.Количество = СтрокаТовара.КоличествоДоИзменения - СтрокаТовара.Количество;
        НоваяСтрока.Качество = Справочники.Качество.Новый;
        НоваяСтрока.ДокументРезерва = СтрокаТовара.ЗаказПокупателя;
    КонецЦикла;	

    /////// Заполним таблицу брака  
    Если СтруктураТаблицыДляДокументов.ТЗБрак.Количество() > 0 Тогда 
	    ТЗБрак = СтруктураТаблицыДляДокументов.ТЗБрак.Скопировать(Новый Структура("Брак", Истина));
	    Для Каждого Стр Из ТЗБрак Цикл
	        НСтроки = ТоварыКРТУ.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаОснования.Номенклатура, СтрокаОснования.ХарактеристикаНоменклатуры));
	        Если НСтроки.Количество() > 0 Тогда
	            Стр.СерияНоменклатуры = НСтроки[0].СерияНоменклатуры;
	        КонецЕсли;
	        Стр.Количество = Стр.КоличествоБрак;
	    КонецЦикла;
    КонецЕсли;

    /////// Конец

    ДокОбъектОрдер = Неопределено;
    Если ТЗ_Номенклатура.Количество() > 0 Тогда 
        ТЗ_Номенклатура.Свернуть("Номенклатура, КоличествоМест, ЕдиницаИзмерения, ЕдиницаИзмеренияМест, Коэффициент, СерияНоменклатуры, ХарактеристикаНоменклатуры, Качество, ДокументРезерва, Цена, УникальныйКодСтроки", "Количество");
        
        Если ДокОбъектПО = Неопределено Тогда
            ДокОбъектОрдер = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();	
        
            ДокОбъектОрдер.Дата = ТекущаяДата();
            ОбщегоНазначения_КД.ЗаполнитьШапкуДокументаПоОснованию(ДокОбъектОрдер, ДокОбъектКРТУ);			
            ДокОбъектОрдер.ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПокупателя;
        
            ДокОбъектОрдер.УстановитьНовыйНомер(ДокОбъектОрдер.Организация.Префикс);
        
            ДокОбъектОрдер.Склад = Склад;
        
            ДокОбъектОрдер.ПоступилИзWMS = Истина;
            ДокОбъектОрдер.БезПраваПродажи = Истина;
        Иначе
            Если НЕ ДокОбъектПО.Проведен Тогда
                ДокОбъектОрдер = ДокОбъектПО.ПолучитьОбъект();	
                ДокОбъектОрдер.Товары.Очистить();
            КонецЕсли;
        КонецЕсли;

        Попытка
            ДокОбъектКРТУ.Записать(РежимЗаписиДокумента.Запись);
        Исключение
            ЗаписьЖурналаРегистрации("СозданиеКорректировкиРеализации", УровеньЖурналаРегистрации.Ошибка,  ,  , "Не удалость провести корректировку реализации по основанию "+ДокументОснование+"! "+СокрЛП(ОписаниеОшибки()));
        КонецПопытки;
    
        ДокОбъектОрдер.Основание = ДокОбъектКРТУ.Ссылка;
        ДокОбъектОрдер.Товары.Загрузить(ТЗ_Номенклатура);
    
        Попытка
            //++REQ1C-5426
            Если ДокОбъектОрдер.Товары.Количество()=0 Тогда
                ДокОбъектОрдер.Записать(РежимЗаписиДокумента.Запись);
            Иначе
            //--REQ1C-5426
                ДокОбъектОрдер.Записать(РежимЗаписиДокумента.Проведение);
            КонецЕсли;  //++REQ1C-5426
        Исключение
            ЗаписьЖурналаРегистрации("СозданиеПриходногоОрдера", УровеньЖурналаРегистрации.Ошибка,  ,  , "Не удалость провести приходный ордер по основанию "+ДокументОснование+"! "+СокрЛП(ОписаниеОшибки()));
            ДокОбъектОрдер.Записать(РежимЗаписиДокумента.Запись);
        КонецПопытки;
    
        ДокОбъектПоступление = ДокОбъектКРТУ.Ссылка.ПолучитьОбъект();
        ТЧТоварыПоступления  = ДокОбъектПоступление.Товары;
        ДокОбъектПоступление.ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру;
        //+Зубрин В.Н. 25.08.2022 ИТ0005569
        ДокОбъектПоступление.Склад				= Склад;
        ДокОбъектПоступление.кдСкладПолучатель 	= Склад;
        //-Зубрин В.Н. 25.08.2022 ИТ0005569
    
        Для Каждого ТекСтрПриходногоОрдера Из ТЗ_Номенклатура Цикл
            ОтборДляСтрокТЧ = Новый Структура;
            ОтборДляСтрокТЧ.Вставить("Номенклатура",ТекСтрПриходногоОрдера.Номенклатура);
            ОтборДляСтрокТЧ.Вставить("ХарактеристикаНоменклатуры",ТекСтрПриходногоОрдера.ХарактеристикаНоменклатуры);
            ОтборДляСтрокТЧ.Вставить("СерияНоменклатуры",ТекСтрПриходногоОрдера.СерияНоменклатуры);
            СтрокиПоступления = ТЧТоварыПоступления.НайтиСтроки(ОтборДляСтрокТЧ);
            Если СтрокиПоступления.Количество() > 0 Тогда
                Для Каждого ТекСтрПоступления Из СтрокиПоступления Цикл
                    Если ТекСтрПоступления.ОтражатьТоварныйУчет Тогда
                        ТекСтрПоступления.ПриходныйОрдер = ДокОбъектОрдер.Ссылка;
                        ТекСтрПоступления.Склад = ДокОбъектОрдер.Склад;
                    КонецЕсли;
                КонецЦикла;					
            КонецЕсли;				
        КонецЦикла;
    
        Попытка
            ДокОбъектПоступление.Дата = Мин(ДокОбъектОрдер.Дата+2,КонецДня(ДокОбъектОрдер.Дата)); 
            ДокОбъектПоступление.Записать(РежимЗаписиДокумента.Проведение);
        Исключение
            ЗаписьЖурналаРегистрации("Проведение корректировки реализации", УровеньЖурналаРегистрации.Ошибка,  ,  , "Не удалость провести документ "+ДокОбъектКРТУ.Ссылка+"! "+СокрЛП(ОписаниеОшибки()));
            ДокОбъектПоступление.Записать(РежимЗаписиДокумента.Запись);
        КонецПопытки;
        Результат = ДокОбъектОрдер.Ссылка;
    Иначе
        Результат = ДокОбъектПО.Ссылка;
    КонецЕсли;
Иначе
    Результат = Неопределено;    
КонецЕсли;

