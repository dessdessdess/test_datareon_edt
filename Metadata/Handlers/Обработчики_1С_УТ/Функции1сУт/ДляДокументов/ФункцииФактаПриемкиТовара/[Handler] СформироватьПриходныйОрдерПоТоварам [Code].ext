
ДокументОснование = dt_Параметр1;
Склад = dt_Параметр2;
СтруктураТаблицыДляДокументов = dt_Параметр3;

ТЗ_Товары = СтруктураТаблицыДляДокументов.ТЗФакт;

Если СтруктураТаблицыДляДокументов.ТЗ_ПринятыеКМ.Количество() > 0 Тогда 
	ТЗ_КМ = СтруктураТаблицыДляДокументов.ТЗ_ПринятыеКМ.Скопировать(Новый Структура("ЭтоПеремещение", Ложь));
КонецЕсли;

ТоварыПоПеремещению	= СтруктураТаблицыДляДокументов.ТоварыПоПеремещению;

ПроведенныйДокумент = Ложь;

Запрос = Новый Запрос;
Запрос.Текст =
"ВЫБРАТЬ
|	ПриходныйОрдерНаТовары.Ссылка
|ИЗ
|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
|ГДЕ
|	ПриходныйОрдерНаТовары.Основание = &Основание
|	И ПриходныйОрдерНаТовары.ПоступилИзWMS
|	И ПриходныйОрдерНаТовары.Проведен";

Запрос.УстановитьПараметр("Основание", ДокументОснование);

Рез = Запрос.Выполнить();
Если Рез.Пустой() Тогда
    ДокОбъектПО = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();	
    
    ДокОбъектПО.Дата = ТекущаяДата();
    ОбщегоНазначения_КД.ЗаполнитьШапкуДокументаПоОснованию(ДокОбъектПО, ДокументОснование);			
    
    Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда 
        ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПоставщика;
    ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
        ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение;	
    ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
        ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПокупателя;
    КонецЕсли;
    
    ДокОбъектПО.ВидОперации = ВидОперации;
    ДокОбъектПО.УстановитьНовыйНомер(ДокОбъектПО.Организация.Префикс);
    ДокОбъектПО.Склад = Склад;
    ДокОбъектПО.Основание = ДокументОснование;
    ДокОбъектПО.ПоступилИзWMS = Истина;
    
    Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение Тогда
        ДокОбъектПО.БезПраваПродажи = Ложь;
        ДокОбъектПО.ДокументПеремещения = ДокументОснование;
    Иначе
        ДокОбъектПО.БезПраваПродажи = Истина;
    КонецЕсли;
Иначе
    Выборка = Рез.Выбрать();
    Выборка.Следующий();
    
    Ответ = ДополнительныеФункции.ПолучитьНастройкуДействияСистемыПоНаименованию("Изменять проведенные ордера WMS", Ложь);
	Если Ответ = Ложь Тогда
		Если Выборка.Ссылка.Проведен Тогда
            ПроведенныйДокумент = Истина;
            РегистрыСведений.РезультатыЗагрузкиДокументовВМС_Акселот.ЗаписатьРезультатЗагрузки(Выборка.Ссылка, Ложь, 
			    СтрШаблон("%1:::%2:::%3:::%4", Выборка.Ссылка.Метаданные().ПолноеИмя(), "Обработчик СформироватьПриходныйОрдерПоТоварам", "Проведение", "Нельзя изменять проведенные ордера WMS"));
        КонецЕсли;
    КонецЕсли;
    
    Если Не ПроведенныйДокумент Тогда
        ДокОбъектПО = Выборка.Ссылка.ПолучитьОбъект();	
        ДокОбъектПО.Товары.Очистить();
    КонецЕсли;
КонецЕсли;

Если Не ПроведенныйДокумент Тогда
    Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
        Если ТоварыПоПеремещению.Количество() > 0 Тогда
            ДокОбъектПО.Товары.Загрузить(ТоварыПоПеремещению);
        КонецЕсли;
    Иначе
        ДокОбъектПО.Товары.Загрузить(ТЗ_Товары);
    КонецЕсли;

    Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
        Если Не ТЗ_КМ = Неопределено Тогда 
	    	ДокОбъектПО.ШтрихкодыУпаковок.Загрузить(ТЗ_КМ);
	    КонецЕсли;
    КонецЕсли;

    ДокОбъектПО.ДополнительныеСвойства.Вставить("ЗагрузкаДанныхИзВМС_Акселот", Истина);

    //++НикифоркинСГ 12.05.2025 корректируем статус во время загрузки факта приемки
    ПоследнийСтатусДокумента = ОбменСWMSПривилегированный.ПолучитьСтатусДокументаWMS(ДокументОснование);		
	Если ПоследнийСтатусДокумента = Неопределено ИЛИ ПоследнийСтатусДокумента.Наименование = "Выгружен в WMS" ИЛИ ПоследнийСтатусДокумента.Наименование = "Размещен" Тогда
		Запись = РегистрыСведений.СтатусВыгруженногоДокументаВWMS.СоздатьМенеджерЗаписи();
		Запись.Период = ТекущаяДата();
		Запись.Документ = ДокументОснование;
		Запись.СтатусWMS = Справочники.СтатусыДокументовWMS.НайтиПоКоду("201");			
		Запись.Записать();
	КонецЕсли; //--НикифоркинСГ 12.05.2025

    Попытка
        //++REQ1C-5426
        Если ДокОбъектПО.Товары.Количество()=0 Тогда
            ДокОбъектПО.Записать(РежимЗаписиДокумента.Запись);
            РегистрыСведений.РезультатыЗагрузкиДокументовВМС_Акселот.ЗаписатьРезультатЗагрузки(ДокОбъектПО.Ссылка, Истина, 
    											СтрШаблон("%1:::%2:::%3:::%4", ДокОбъектПО.Метаданные().ПолноеИмя(), "Обработчик СформироватьПриходныйОрдерПоТоварам", "Запись", ""));
        Иначе
        //--REQ1C-5426
            ДокОбъектПО.Записать(РежимЗаписиДокумента.Проведение);
            РегистрыСведений.РезультатыЗагрузкиДокументовВМС_Акселот.ЗаписатьРезультатЗагрузки(ДокОбъектПО.Ссылка, Истина, 
	    										СтрШаблон("%1:::%2:::%3:::%4", ДокОбъектПО.Метаданные().ПолноеИмя(), "Обработчик СформироватьПриходныйОрдерПоТоварам", "Проведение", ""));
        КонецЕсли;  //++REQ1C-5426
    Исключение
    
        ЗаписьЖурналаРегистрации("СозданиеПриходногоОрдераDatareon", УровеньЖурналаРегистрации.Ошибка,  ,  , "Не удалость провести приходный ордер по основанию "+ДокументОснование+"! "+СокрЛП(ОписаниеОшибки()));
    
        ТекстОшибки = "";
        Если ДокОбъектПО.ДополнительныеСвойства.Свойство("ТекстОшибки") Тогда
            ТекстОшибки = ДокОбъектПО.ДополнительныеСвойства.ТекстОшибки;
        КонецЕсли;
        РегистрыСведений.РезультатыЗагрузкиДокументовВМС_Акселот.ЗаписатьРезультатЗагрузки(ДокументОснование, Ложь, 
    											СтрШаблон("%1:::%2:::%3:::%4", ДокОбъектПО.Метаданные().ПолноеИмя(), "Обработчик СформироватьПриходныйОрдерПоТоварам", "Проведение", "Не удалость провести приходный ордер! " +  СокрЛП(ОписаниеОшибки())+ТекстОшибки));
    
        ДокОбъектПО.Записать(РежимЗаписиДокумента.Запись);
        РегистрыСведений.РезультатыЗагрузкиДокументовВМС_Акселот.ЗаписатьРезультатЗагрузки(ДокОбъектПО.Ссылка, Истина, 
    											СтрШаблон("%1:::%2:::%3:::%4", ДокОбъектПО.Метаданные().ПолноеИмя(), "Обработчик СформироватьПриходныйОрдерПоТоварам", "Запись", ""));
    
    КонецПопытки; 

    Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
        ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда				
    
        ДокОбъектПоступление = ДокументОснование.ПолучитьОбъект();         
        //ТЧТоварыПоступления  = ДокОбъектПоступление.Товары;                               //++REQ1C-5072 закомментировал

        ДокОбъектПоступление.Дата = Мин(ДокОбъектПО.Дата+2,КонецДня(ДокОбъектПО.Дата)); 
        Если ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
            //Если ДокОбъектПоступление.ВидПоступления <> Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
                ДокОбъектПоступление.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру;
                ДокОбъектПоступление.СкладОрдер = Документы.ПриходныйОрдерНаТовары.ПустаяСсылка();
            //КонецЕсли;
        Иначе
            Если ДокОбъектПоступление.ВидПередачи <> Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
                ДокОбъектПоступление.ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру;
            КонецЕсли;
        КонецЕсли;
        
        //++REQ1C-5072
        //Было:
        //Для Каждого ТекСтрПриходногоОрдера Из ТЗ_Товары Цикл
        //    СтрокаТЧ = ТЧТоварыПоступления.Найти(ТекСтрПриходногоОрдера.УникальныйКодСтроки, "УникальныйКодСтроки");
        //    Если СтрокаТЧ <> Неопределено Тогда
        //        СтрокаТЧ.ПриходныйОрдер = ДокОбъектПО.Ссылка;
        //        СтрокаТЧ.Склад = ДокОбъектПО.Склад;
        //        Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
        //            СтрокаТЧ.Количество = СтрокаТЧ.КоличествоДоИзменения - ТекСтрПриходногоОрдера.Количество;
        //
        //            ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТЧ, ДокОбъектПоступление);
        //            ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТЧ, ДокОбъектПоступление);
        //            ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ДокОбъектПоступление);
        //        КонецЕсли;
        //        Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
        //            Если СтрокаТЧ.Количество <> ТекСтрПриходногоОрдера.Количество Тогда  
        //                СтрокаТЧ.Количество = ТекСтрПриходногоОрдера.Количество; 
        //            
        //                ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТЧ, ДокОбъектПоступление);
        //                ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТЧ, ДокОбъектПоступление);
        //                ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ДокОбъектПоступление);
        //            КонецЕсли;
        //        КонецЕсли;
        //    КонецЕсли;
        //КонецЦикла;
        //Стало:        
        Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
            ТЧТоварыПоступления = ДокОбъектПоступление.Товары.Выгрузить();
            ДокОбъектПоступление.Товары.Очистить();
            Для Каждого ТекСтрПриходногоОрдера Из ТЗ_Товары Цикл
                СтрокаТЧ = ТЧТоварыПоступления.Найти(ТекСтрПриходногоОрдера.УникальныйКодСтроки, "УникальныйКодСтроки");
                Если СтрокаТЧ <> Неопределено Тогда                                                
                    НоваяСтрокаТовары = ДокОбъектПоступление.Товары.Добавить();
                    ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТЧ);
                    ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, ТекСтрПриходногоОрдера);                    
                    НоваяСтрокаТовары.ПриходныйОрдер = ДокОбъектПО.Ссылка;
                    НоваяСтрокаТовары.Склад = ДокОбъектПО.Склад;                                                 
                    Если НоваяСтрокаТовары.Количество <> ТекСтрПриходногоОрдера.Количество Тогда  
                        НоваяСтрокаТовары.Количество = ТекСтрПриходногоОрдера.Количество;                     
                        ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрокаТовары, ДокОбъектПоступление);
                        ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрокаТовары, ДокОбъектПоступление);
                        ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаТовары, ДокОбъектПоступление);
                    КонецЕсли;                
                КонецЕсли;
            КонецЦикла;
        КонецЕсли;

        Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
            ТЧТоварыПоступления  = ДокОбъектПоступление.Товары;
            Для Каждого ТекСтрПриходногоОрдера Из ТЗ_Товары Цикл
                СтрокаТЧ = ТЧТоварыПоступления.Найти(ТекСтрПриходногоОрдера.УникальныйКодСтроки, "УникальныйКодСтроки");
                Если СтрокаТЧ <> Неопределено Тогда
                    СтрокаТЧ.ПриходныйОрдер = ДокОбъектПО.Ссылка;
                    СтрокаТЧ.Склад = ДокОбъектПО.Склад;                
                    СтрокаТЧ.Количество = СтрокаТЧ.КоличествоДоИзменения - ТекСтрПриходногоОрдера.Количество;
                    ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТЧ, ДокОбъектПоступление);
                    ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТЧ, ДокОбъектПоступление);
                    ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ДокОбъектПоступление);               
                КонецЕсли;            
            КонецЦикла;  
        КонецЕсли; //--REQ1C-5072  
    
        Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
            Запрос = Новый Запрос;
            Запрос.Текст = 
            "ВЫБРАТЬ
            |	КД_СоответствияЗначений.Наименование
            |ИЗ
            |	РегистрСведений.КД_СоответствияЗначений КАК КД_СоответствияЗначений
            |ГДЕ
            |	КД_СоответствияЗначений.Наименование = ""ДоработкаВладиславИТ0005567""";
        
            РезультатЗапроса = Запрос.Выполнить().Пустой();
        
            Если НЕ РезультатЗапроса Тогда
                пСуммаДокумента = Ценообразование.ПолучитьСуммуДокументаСНДС(ДокОбъектПоступление);
                пТабПлатежи = ДокОбъектПоступление.Платежи;
                пКолТабПлатежи = пТабПлатежи.Количество();
                пСумм = 0;
                стСумм = 0;
            
                Для Сч = 0 по пКолТабПлатежи - 1 Цикл
                   стСумм = стСумм + пТабПлатежи[Сч].СуммаПлатежа; 
                КонецЦикла;
            
                пКоэф = пСуммаДокумента/стСумм;
                Если пКолТабПлатежи > 1 Тогда
                
                    Для Сч = 1 по пКолТабПлатежи - 1 Цикл
                        пТабПлатежи[Сч].СуммаПлатежа =  пТабПлатежи[Сч].СуммаПлатежа * пКоэф;
                        пСумм = пСумм + пТабПлатежи[Сч].СуммаПлатежа; 
                    КонецЦикла;	
                    пТабПлатежи[0].СуммаПлатежа = пСуммаДокумента - пСумм;
                
                
                ИначеЕсли пКолТабПлатежи = 1 Тогда
                    пТабПлатежи[0].СуммаПлатежа = пСуммаДокумента;
                КонецЕсли;
            КонецЕсли; 
        КонецЕсли;

        Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
           Если СтруктураТаблицыДляДокументов.ТЗ_ПринятыеКМ.Количество() > 0 Тогда

    		    ДокОбъектПоступление.ШтрихкодыУпаковок.Очистить();
    		    ДокОбъектПоступление.ШтрихкодыУпаковокПоВозврату.Очистить();
		
    		    ИсходныйИсправляемыйДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументОснование, Истина);		
    		    ДокОбъектПоступление.ШтрихкодыУпаковок.Загрузить(ИсходныйИсправляемыйДокументРеализации.ШтрихкодыУпаковок.Выгрузить());
		
    		    ДокОбъектПоступление.ШтрихкодыУпаковокПоВозврату.Загрузить(СтруктураТаблицыДляДокументов.ТЗ_ПринятыеКМ.Скопировать(,"ШтрихкодУпаковки"));	
		
    		    Для каждого СтрокаКМ Из ДокОбъектПоступление.ШтрихкодыУпаковокПоВозврату Цикл
			
    			    СтрокаШтрихкодыУпаковок = ДокОбъектПоступление.ШтрихкодыУпаковок.Найти(СтрокаКМ.ШтрихкодУпаковки, "ШтрихкодУпаковки");
			
    			    Если СтрокаШтрихкодыУпаковок <> Неопределено Тогда
    				    ДокОбъектПоступление.ШтрихкодыУпаковок.Удалить(СтрокаШтрихкодыУпаковок);	
    			    Иначе
				
    				    ТекНоменклатураКМ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаКМ.ШтрихкодУпаковки, "Номенклатура");
				
    				    Для каждого СтрокаШтрихкодыУпаковок Из ДокОбъектПоступление.ШтрихкодыУпаковок Цикл
    					    НоменклатураСтрокаШтрихкодыУпаковок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаШтрихкодыУпаковок.ШтрихкодУпаковки, "Номенклатура");
    					    Если ТекНоменклатураКМ = НоменклатураСтрокаШтрихкодыУпаковок Тогда
    						    ДокОбъектПоступление.ШтрихкодыУпаковок.Удалить(СтрокаШтрихкодыУпаковок);
    						    Прервать;	
    					    КонецЕсли;
    				    КонецЦикла;
				
		    	    КонецЕсли;
			
		        КонецЦикла;

           КонецЕсли;
		
	    КонецЕсли;

        ДокОбъектПоступление.ДополнительныеСвойства.Вставить("ЗагрузкаДанныхИзВМС_Акселот", Истина);
    
        Попытка
            ДокОбъектПоступление.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
            РегистрыСведений.РезультатыЗагрузкиДокументовВМС_Акселот.ЗаписатьРезультатЗагрузки(ДокументОснование, Истина, 
	    										СтрШаблон("%1:::%2:::%3:::%4", ДокОбъектПоступление.Метаданные().ПолноеИмя(), "Обработчик СформироватьПриходныйОрдерПоТоварам", "Проведение", ""));
        Исключение
            ЗаписьЖурналаРегистрации("ИзменениеДокументаПоступления", УровеньЖурналаРегистрации.Ошибка,  ,  , "Не удалость провести документ "+ДокументОснование+"! "+СокрЛП(ОписаниеОшибки()));
            
            ТекстОшибки = "";
            Если ДокОбъектПоступление.ДополнительныеСвойства.Свойство("ТекстОшибки") Тогда
                ТекстОшибки = ДокОбъектПоступление.ДополнительныеСвойства.ТекстОшибки;
            КонецЕсли;

            РегистрыСведений.РезультатыЗагрузкиДокументовВМС_Акселот.ЗаписатьРезультатЗагрузки(ДокументОснование, Ложь, 
	    										СтрШаблон("%1:::%2:::%3:::%4", ДокОбъектПоступление.Метаданные().ПолноеИмя(), "Обработчик СформироватьПриходныйОрдерПоТоварам", "Проведение", "Не удалость провести документ! " +  СокрЛП(ОписаниеОшибки())+ТекстОшибки));
        
            ДокОбъектПоступление.Записать(РежимЗаписиДокумента.Запись);
            РегистрыСведений.РезультатыЗагрузкиДокументовВМС_Акселот.ЗаписатьРезультатЗагрузки(ДокументОснование, Истина, 
	    										СтрШаблон("%1:::%2:::%3:::%4", ДокОбъектПоступление.Метаданные().ПолноеИмя(), "Обработчик СформироватьПриходныйОрдерПоТоварам", "Запись", ""));
        КонецПопытки;
    КонецЕсли;

    //Начало: Маркировка принятого товара по перемещению
    Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
        Если СтруктураТаблицыДляДокументов.ТЗ_ПринятыеКМ.Количество() > 0 Тогда 
            КМ_ПоПеремещению = СтруктураТаблицыДляДокументов.ТЗ_ПринятыеКМ.Скопировать(Новый Структура("ЭтоПеремещение", ИСТИНА));

            ДокОбъектПеремещение = ДокументОснование.ПолучитьОбъект();
            ДокОбъектПеремещение.ШтрихкодыУпаковок.Загрузить(КМ_ПоПеремещению);
            ДокОбъектПеремещение.Записать();

            РегистрыСведений.РезультатыЗагрузкиДокументовВМС_Акселот.ЗаписатьРезультатЗагрузки(ДокументОснование, Истина, 
    											СтрШаблон("%1:::%2:::%3:::%4", ДокОбъектПеремещение.Метаданные().ПолноеИмя(), "Обработчик СформироватьПриходныйОрдерПоТоварам", "Запись", ""));

        КонецЕсли;
    КонецЕсли;
    //Конец: Маркировка принятого товара по перемещению

    //REQ1C-5189
    //Результат = ДокОбъектПО.Ссылка;
    Результат = Новый Структура("ПОСсылка", ДокОбъектПО.Ссылка);
    Если ЗначениеЗаполнено(ПоследнийСтатусДокумента) Тогда
        Результат.Вставить("СтатусДокумента", ПоследнийСтатусДокумента.Наименование);
    Иначе
        Результат.Вставить("СтатусДокумента", "");
    КонецЕсли;

Иначе
    //REQ1C-5189    
    //Результат = Неопределено; 
    Результат = Новый Структура("ПОСсылка, СтатусДокумента", Документы.ПриходныйОрдерНаТовары.ПустаяСсылка(), "");
КонецЕсли;