//Получение тела сообщения
	xdtoОбъект = сшпОбщегоНазначения.ПолучитьОбъектXDTO(Перечисления.сшпФорматыСообщений.JSON, ТелоСообщения());
	
	ВидыДокументов = Новый Массив;
	ВидыДокументов.Добавить("ПеремещениеТоваров");
	ВидыДокументов.Добавить("РеализацияТоваровУслуг");
	
	Свойства = xdtoОбъект.Свойства();
	Если Свойства.Получить("Данные") <> Неопределено Тогда
		ДанныеXDTO = xdtoОбъект.Получить("Данные");
		Если ДанныеXDTO <> Неопределено Тогда
			ДокументXDTO = ДанныеXDTO.Получить("Ссылка");
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументXDTO <> Неопределено Тогда
		Для Каждого ВидДокумента Из ВидыДокументов Цикл
			Документ = Документы[ВидДокумента].ПолучитьСсылку(Новый УникальныйИдентификатор(ДокументXDTO));   
			Если ОбщегоНазначения.СсылкаСуществует(Документ) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОбработкаОтменена;
		ТекстОшибки = "В пакете отсутствует ссылка на документ-основание!";
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если Свойства.Получить("Товары") <> Неопределено Тогда
		
		ТоварыXDTO = xdtoОбъект["Товары"].Последовательность();
		
		Для Инд = 0 По ТоварыXDTO.Количество()-1 Цикл
			
            НачатьТранзакцию();

			Попытка
				
				xdtoСтрока = ТоварыXDTO.ПолучитьЗначение(Инд);  
				
				Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
				НоменклатураУИД = xdtoСтрока.Получить("Номенклатура").Получить("Ссылка");
				Если ЗначениеЗаполнено(НоменклатураУИД) Тогда
					Номенклатура    = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(НоменклатураУИД));	
				КонецЕсли;
				
				ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				ХарактеристикаУИД = xdtoСтрока.Получить("Характеристика").Получить("Ссылка");
				Если ЗначениеЗаполнено(ХарактеристикаУИД) Тогда
					ХарактеристикаНоменклатуры    = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ХарактеристикаУИД));	
				КонецЕсли;
				
				СерияНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				СерияУИД = xdtoСтрока.Получить("Партия").Получить("Партия").Получить("Ссылка");
				Если ЗначениеЗаполнено(ХарактеристикаУИД) Тогда
					СерияНоменклатуры    = Справочники.СерииНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СерияУИД));	
				КонецЕсли;
				
				УникальныйКодСтроки = xdtoСтрока.Получить("КодСтроки");
				Количество = xdtoСтрока.Получить("Количество");
				ПричинаВычерка = xdtoСтрока.Получить("ПричинаКорректировки");//Справочники.КД_ПричиныНеотправкиТовараСоСклада.НайтиПоНаименованию(xdtoСтрока.Получить("ПричинаКорректировки")); 
				
				НаборЗаписей = РегистрыСведений.ПричиныВычерковWMS.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Документ.Установить(Документ);
				НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
				НаборЗаписей.Отбор.ХаратеристикаНоменклатуры.Установить(ХарактеристикаНоменклатуры);
				НаборЗаписей.Отбор.СерияНоменклатуры.Установить(СерияНоменклатуры);
				НаборЗаписей.Отбор.УникальныйКодСтроки.Установить(УникальныйКодСтроки);
				//НаборЗаписей.Отбор.ДокументРезерва.Установить(ДокРезерва);
                НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();

				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Документ                    = Документ;
				НоваяЗапись.Номенклатура                = Номенклатура;
				НоваяЗапись.ХаратеристикаНоменклатуры  = ХарактеристикаНоменклатуры;
				НоваяЗапись.СерияНоменклатуры           = СерияНоменклатуры;
				НоваяЗапись.УникальныйКодСтроки         = УникальныйКодСтроки;
				//НоваяЗапись.ДокументРезерва             = ДокРезерва;
				НоваяЗапись.Количество                  = Количество;
				НоваяЗапись.ПричинаВычерка              = ПричинаВычерка;
				НоваяЗапись.ДатаВыполнения              = ТекущаяДата();
				
				НаборЗаписей.ДополнительныеСвойства.Вставить("сшпНеОбрабатывать", Истина); // Пометка записей для пропуска обработки
				НаборЗаписей.Записать(); // Запись набора записей в регистр сведений
				
				ЗафиксироватьТранзакцию();
				
			Исключение // Обработка исключений
				
				ОтменитьТранзакцию();
				
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); // Получение текста ошибки
				
				Сообщения = ПолучитьСообщенияПользователю(); // Получение сообщений для пользователя
				Для Каждого Сообщение Из Сообщения Цикл // Формирование текста ошибки из сообщений
					ТекстОшибки = ТекстОшибки + Символы.ПС + Сообщение.Текст;
				КонецЦикла;
				
				Если Найти(ТекстОшибки, "Конфликт блокировок") > 0 Тогда // Если обнаружен конфликт блокировок
					Задержка = 30; // Установка задержки
					СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки; // Установка состояния сообщения
				Иначе
					ВызватьИсключение ТекстОшибки; // Иначе вызываем исключение с текстом ошибки
				КонецЕсли; 
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;