МассивРазрешенныхТипов = РегистрацияИзмененийБД.РазрешенныеТипыКВыгрузкеВДатареон_Nipple();

Если МассивРазрешенныхТипов.Найти(ТипЗнч(ОбъектОбработки)) = Неопределено Тогда
	
	СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОбработкаОтменена;
	ТекстОшибки = "Не разрешено выгружать в Ниппель по новой схеме!";
	
Иначе
	
	updated = Формат(ДатаРегистрации, "ДФ=ddMMyyyyHHmmss");
	мсвЗаказПокупателя = Новый Массив;
	мсвСтатусЗаказаПокупателя = Новый Массив;
	мсвКонтрольныеМаркиЗаказаНаВыдачуПВЗ = Новый Массив;
	мсвКупоны = Новый Массив;
	мсвКупоныОперации = Новый Массив;
	мсвТТНв1С = Новый Массив;
	мсвЗаявкаНаВыдачуСХ = Новый Массив;
	мсвЗаявкаНаПеремещение = Новый Массив;
	
	ДанныеПоЗаказу = ОбменДаннымиFranchise.ПолучитьДанныеВСтруктуре(ОбъектОбработки);
	
	Для Каждого Запись Из ДанныеПоЗаказу Цикл
		
		Если Запись.AdditionalInfo = "СтрокаСтатусаЗаказаНаВыдачуПВЗ" Тогда 
			
			ЗаявкаНаВыдачуПВЗ = Запись.ЗаявкаНаВыдачуПВЗ;
			
			сткОбъект = Новый Структура();
			сткОбъект.Вставить("link", 				 ЗаявкаНаВыдачуПВЗ.Ссылка);
			сткОбъект.Вставить("service_center_link",ЗаявкаНаВыдачуПВЗ.СервисныйЦентр);
			сткОбъект.Вставить("client_link",        ЗаявкаНаВыдачуПВЗ.Клиент.Ссылка);
			сткОбъект.Вставить("date",               Формат(ЗаявкаНаВыдачуПВЗ.ДатаВремя, "ДФ='yyyy-MM-dd HH:mm:ss'"));
			сткОбъект.Вставить("amount",             ЗаявкаНаВыдачуПВЗ.Сумма);
			сткОбъект.Вставить("weight_total",       ЗаявкаНаВыдачуПВЗ.ОбщийВес);
			сткОбъект.Вставить("volume_total",       ЗаявкаНаВыдачуПВЗ.ОбщийОбъем);
			сткОбъект.Вставить("volume_transport",   ЗаявкаНаВыдачуПВЗ.ТранспортныйОбъем);
			сткОбъект.Вставить("is_paid",            ЗаявкаНаВыдачуПВЗ.Оплачен);
			сткОбъект.Вставить("order_number",       ЗаявкаНаВыдачуПВЗ.НомерЗаказаНаСайте); 
			сткОбъект.Вставить("appointment_id",     ЗаявкаНаВыдачуПВЗ.ЗаявкаНаСервис); 
			сткОбъект.Вставить("code",               ЗаявкаНаВыдачуПВЗ.КодДляВыдачи);
			сткОбъект.Вставить("number_tth",         "");
			
			мсвТовары = Новый Массив;
			
			Для каждого СтрокаТовары Из ЗаявкаНаВыдачуПВЗ.Товары.СтрокаТовара Цикл
				
				сткТовар = Новый Структура();
				сткТовар.Вставить("row_number",                 СтрокаТовары.НомерСтроки);
				сткТовар.Вставить("order_id",                   ЗаявкаНаВыдачуПВЗ.Ссылка);
				сткТовар.Вставить("nomenclature_link",          СтрокаТовары.Номенклатура);
				Если Не СтрокаТовары.Характеристика = "00000000-0000-0000-0000-000000000000" Тогда
					сткТовар.Вставить("nomenclature_feature_link",  СтрокаТовары.Характеристика);
				КонецЕсли;
				сткТовар.Вставить("measure",                    СтрокаТовары.ЕдиницаИзмерения);
				сткТовар.Вставить("quantity",                   СтрокаТовары.Количество);
				сткТовар.Вставить("promo",                      СтрокаТовары.МаркетинговаяАкция);
				
				мсвТовары.Добавить(Новый Структура("object, updated", сткТовар, updated));
				
			КонецЦикла;
			
			сткОбъект.Вставить("order_items",        мсвТовары);
			
			сткИтем = Новый Структура();
			сткИтем.Вставить("object", сткОбъект);
			сткИтем.Вставить("updated", updated);
			
			мсвЗаказПокупателя.Добавить(сткИтем);
			
			сткОбъектСтатус = Новый Структура();
			сткОбъектСтатус.Вставить("link", 		ЗаявкаНаВыдачуПВЗ.Ссылка);
			сткОбъектСтатус.Вставить("user_link",   Запись.Сотрудник);
			сткОбъектСтатус.Вставить("status",      Запись.Статус);
			сткОбъектСтатус.Вставить("period", 		Формат(Запись.Период, "ДФ='yyyy-MM-dd HH:mm:ss'"));
			сткОбъектСтатус.Вставить("reason",      Запись.ПричинаСменыСтатуса);
			сткОбъектСтатус.Вставить("is_paid",     ЗаявкаНаВыдачуПВЗ.Оплачен);
			
			сткИтемСтатус = Новый Структура();
			сткИтемСтатус.Вставить("object",  сткОбъектСтатус);
			сткИтемСтатус.Вставить("updated", updated);
			
			мсвСтатусЗаказаПокупателя.Добавить(сткИтемСтатус);
			
		ИначеЕсли Запись.AdditionalInfo = "СтрокаСтатусаЗаявкаНаВыдачуСХ" Тогда 
			
			ЗаявкаНаВыдачуСХ = Запись.ЗаявкаНаВыдачуСХ;
			
			сткОбъект = Новый Структура();
			сткОбъект.Вставить("period", 				 Формат(Запись.Период, "ДФ='yyyy-MM-dd'"));
			сткОбъект.Вставить("status",                 Запись.Статус);
			сткОбъект.Вставить("link",                   ЗаявкаНаВыдачуСХ.Ссылка);
			сткОбъект.Вставить("storage_number",         ЗаявкаНаВыдачуСХ.НомерЗаявкиНаВыдачу);
			сткОбъект.Вставить("service_center_link",    ЗаявкаНаВыдачуСХ.СервисныйЦентр);
			
			// operation_link = "";
			// Если ЗаявкаНаВыдачуСХ.КолесаСХ.СтрокаКолеса.Количество() > 0 Тогда
			//     operation_link = ЗаявкаНаВыдачуСХ.КолесаСХ.СтрокаКолеса[0].НоменклатураУслугСХ;
			// КонецЕсли;
			// сткОбъект.Вставить("operation_link",        operation_link); 
			
			wheels = Новый Массив;
			
			Для Каждого Стр Из ЗаявкаНаВыдачуСХ.КолесаСХ.СтрокаКолеса Цикл
				
				ОбъектКолесаСХ = Стр.ОбъектКолесаСХ;
				
				wheel_item = Новый Структура;
				wheel_item.Вставить("operation_link",           Стр.НоменклатураУслугСХ); 
				wheel_item.Вставить("link",                     ОбъектКолесаСХ.Ссылка);
				wheel_item.Вставить("name",                     ОбъектКолесаСХ.Наименование);
				Если ЗначениеЗаполнено(ОбъектКолесаСХ.НоменклатураСХ_Наименование) Тогда
				    wheel_item.Вставить("tire_nomenclature_link",   "");
				    wheel_item.Вставить("tire_nomenclature_label",  ОбъектКолесаСХ.НоменклатураСХ_Наименование);
                Иначе
                    wheel_item.Вставить("tire_nomenclature_link",   ОбъектКолесаСХ.НоменклатураСХ);
				    wheel_item.Вставить("tire_nomenclature_label",  "");
                КонецЕсли;
				wheel_item.Вставить("date_stock",               Формат(ОбъектКолесаСХ.ДатаСдачи,"ДФ=yyyy-MM-dd"));
				wheel_item.Вставить("status",                   ОбъектКолесаСХ.Статус);
				wheel_item.Вставить("store_before",             Формат(ОбъектКолесаСХ.СрокХранения,"ДФ=yyyy-MM-dd"));
				wheel_item.Вставить("client_link",              ОбъектКолесаСХ.Клиент.Ссылка);
				wheel_item.Вставить("vehicle_link",             ОбъектКолесаСХ.Автомобиль.Ссылка);
				wheel_item.Вставить("barcode",                  ОбъектКолесаСХ.ШтрихкодПломбы);
				wheel_item.Вставить("protector_margin",         ОбъектКолесаСХ.ГлубинаПротектора);
				wheel_item.Вставить("spike_percentage",         СокрЛП(ОбъектКолесаСХ.ПроцентОшиповки));
				wheel_item.Вставить("storage_link",             ?(ЗначениеЗаполнено(ОбъектКолесаСХ.ТекущееМестоХраненияID), ОбъектКолесаСХ.ТекущееМестоХраненияID, ЗаявкаНаВыдачуСХ.СервисныйЦентр));
				
				wheel_item.Вставить("defects",                  ОбъектКолесаСХ.Дефекты);
				
				wheels.Добавить(Новый Структура("object, updated", wheel_item, updated));
				
			КонецЦикла;
			
			сткОбъект.Вставить("wheels", wheels);
			
			сткИтем = Новый Структура();
			сткИтем.Вставить("object", сткОбъект);
			сткИтем.Вставить("updated", updated);
			
			мсвЗаявкаНаВыдачуСХ.Добавить(сткИтем);
			
		ИначеЕсли Запись.AdditionalInfo = "СтрокаСтатусаЗаявкаНаПеремещение" Тогда 
			
			СоответствиеСтатусов = Новый Соответствие;
			СоответствиеСтатусов.Вставить("Не определен", 0);
			СоответствиеСтатусов.Вставить("Оформлен", 10);
			СоответствиеСтатусов.Вставить("Отменен", 70);
			
			ЗаявкаНаПеремещение = Запись.ЗаявкаНаПеремещение;
			
			сткОбъект = Новый Структура();
			сткОбъект.Вставить("link", 				            ЗаявкаНаПеремещение.Ссылка);
			сткОбъект.Вставить("number",                        ЗаявкаНаПеремещение.Номер);
			сткОбъект.Вставить("sender_service_center_link",    ЗаявкаНаПеремещение.Отправитель.СервисныйЦентрСсылка);
			сткОбъект.Вставить("receiver_service_center_link",  ЗаявкаНаПеремещение.Получатель.СервисныйЦентрСсылка);
			сткОбъект.Вставить("date",                          ЗаписатьДатуJSON(ЗаявкаНаПеремещение.ДатаВремя, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
			сткОбъект.Вставить("status",                        СоответствиеСтатусов.Получить(Запись.Статус));
			сткОбъект.Вставить("reason",                        Запись.ПричинаСменыСтатуса);
			сткОбъект.Вставить("user_link",                     Запись.Сотрудник);
			сткОбъект.Вставить("period",                        ЗаписатьДатуJSON(Запись.Период, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
			
			мсвТовары = Новый Массив;
			
			Для каждого СтрокаТовары Из ЗаявкаНаПеремещение.Товары.СтрокаТовара Цикл
				
				сткТовар = Новый Структура();
				сткТовар.Вставить("row_number",                 СтрокаТовары.НомерСтроки);
				сткТовар.Вставить("nomenclature_link",          СтрокаТовары.Номенклатура);
				Если Не СтрокаТовары.Характеристика = "00000000-0000-0000-0000-000000000000" Тогда
					сткТовар.Вставить("nomenclature_feature_link",  СтрокаТовары.Характеристика);
				КонецЕсли;
				сткТовар.Вставить("measure",                    СтрокаТовары.ЕдиницаИзмерения);
				сткТовар.Вставить("quantity",                   СтрокаТовары.Количество);
				
				//мсвТовары.Добавить(Новый Структура("object, updated", сткТовар, updated));
				мсвТовары.Добавить(сткТовар);
				
			КонецЦикла;
			
			сткОбъект.Вставить("order_items",        мсвТовары);
			
			сткИтем = Новый Структура();
			сткИтем.Вставить("object", сткОбъект);
			сткИтем.Вставить("updated", updated);
			
			мсвЗаявкаНаПеремещение.Добавить(сткИтем);
			
		ИначеЕсли Запись.AdditionalInfo = "КонтрольныеМаркиЗаказаНаВыдачуПВЗ" Тогда 
			
			ЗаявкаНаВыдачуПВЗ = Запись.ЗаявкаНаВыдачуПВЗ;
			
			сткОбъект = Новый Структура();
			сткОбъект.Вставить("order_link",   ЗаявкаНаВыдачуПВЗ);
			сткОбъект.Вставить("row_number",   Запись.НомерСтроки);
			
			мсвКодыМаркировки = Новый Массив;
			
			Для каждого СтрокаКМ Из Запись.КонтрольнаяМарка Цикл
				
				сткТовар = Новый Структура();
				сткТовар.Вставить("value", СтрокаКМ);
				
				мсвКодыМаркировки.Добавить(Новый Структура("object, updated", сткТовар, updated));
				
			КонецЦикла;
			
			сткОбъект.Вставить("control_mark_values", мсвКодыМаркировки);
			
			сткИтем = Новый Структура();
			сткИтем.Вставить("object", сткОбъект);
			сткИтем.Вставить("updated", updated);
			
			мсвКонтрольныеМаркиЗаказаНаВыдачуПВЗ.Добавить(сткИтем);
			
		ИначеЕсли Запись.AdditionalInfo = "КупоныЗаказаНаВыдачуПВЗ" Тогда 
			
			сткОбъект = Новый Структура();
			сткОбъект.Вставить("order_link",   Запись.ЗаявкаНаВыдачуПВЗ);
			сткОбъект.Вставить("row_number",   Запись.НомерСтроки);
			сткОбъект.Вставить("coupon",       Запись.Купон);
			сткОбъект.Вставить("description",  Запись.ОписаниеКупона);
			
			сткИтем = Новый Структура();
			сткИтем.Вставить("object", сткОбъект);
			сткИтем.Вставить("updated", updated);
			
			мсвКупоны.Добавить(сткИтем);
			
			сткОбъект = Новый Структура();
			сткОбъект.Вставить("order_link",   Запись.ЗаявкаНаВыдачуПВЗ);
			сткОбъект.Вставить("row_number",   Запись.НомерСтроки);
			сткОбъект.Вставить("coupon",       Запись.Купон);
			
			мсвУслуги = Новый Массив;
			
			Для каждого СтрокаУслуга Из Запись.Услуга Цикл
				
				мсвУслуги.Добавить(Новый Структура("link", СтрокаУслуга));
				
			КонецЦикла;
			
			сткОбъект.Вставить("operations", мсвУслуги);
			
			сткИтем = Новый Структура();
			сткИтем.Вставить("object", сткОбъект);
			сткИтем.Вставить("updated", updated);
			
			мсвКупоныОперации.Добавить(сткИтем);
			
		ИначеЕсли Запись.AdditionalInfo = "ТТНВ1С" Тогда 
			
			сткОбъект = Новый Структура();
			сткОбъект.Вставить("link", Запись.Ссылка);
			
			сткИтем = Новый Структура();
			сткИтем.Вставить("object", сткОбъект);
			сткИтем.Вставить("updated", updated);
			
			мсвТТНв1С.Добавить(сткИтем);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если мсвЗаказПокупателя.Количество() > 0 Тогда
		Данные = Новый Структура;
		Данные.Вставить("order", мсвЗаказПокупателя);
		Если мсвСтатусЗаказаПокупателя.Количество() > 0 Тогда
			Данные.Вставить("orderStatus", мсвСтатусЗаказаПокупателя);
		КонецЕсли;
		сшпПользовательскиеМетоды.ПоместитьВОчередьИсходящих("nipЗаказПокупателя", Данные);
	КонецЕсли;
	
	// Если мсвСтатусЗаказаПокупателя.Количество() > 0 Тогда
	//     Данные = Новый Структура;
	//     Данные.Вставить("items", мсвСтатусЗаказаПокупателя);
	//     сшпПользовательскиеМетоды.ПоместитьВОчередьИсходящих("nipСтатусЗаказаПокупателя", Данные);
	// КонецЕсли;
	
	Если мсвКонтрольныеМаркиЗаказаНаВыдачуПВЗ.Количество() > 0 Тогда
		Данные = Новый Структура;
		Данные.Вставить("items", мсвКонтрольныеМаркиЗаказаНаВыдачуПВЗ);
		сшпПользовательскиеМетоды.ПоместитьВОчередьИсходящих("nipКодыМаркировки", Данные);
	КонецЕсли;
	
	Если мсвКупоны.Количество() > 0 Тогда
		
		ДанныеОбщие = Новый Структура;
		
		Данные = Новый Структура;
		Данные.Вставить("items", мсвКупоны);
		ДанныеОбщие.Вставить("Купоны", Данные);
		
		Данные = Новый Структура;
		Данные.Вставить("items", мсвКупоныОперации);
		ДанныеОбщие.Вставить("КупоныОперации", Данные);
		
		сшпПользовательскиеМетоды.ПоместитьВОчередьИсходящих("nipКупоны", ДанныеОбщие);
		
	КонецЕсли;
	
	Если мсвТТНв1С.Количество() > 0 Тогда
		Данные = Новый Структура;
		Данные.Вставить("items", мсвТТНв1С);
		сшпПользовательскиеМетоды.ПоместитьВОчередьИсходящих("nipТТНв1С", Данные);
	КонецЕсли;
	
	Если мсвЗаявкаНаВыдачуСХ.Количество() > 0 Тогда
		Данные = Новый Структура;
		Данные.Вставить("items", мсвЗаявкаНаВыдачуСХ);
		сшпПользовательскиеМетоды.ПоместитьВОчередьИсходящих("nipЗаявкаНаВыдачуСХ", Данные);
	КонецЕсли;
	
	Если мсвЗаявкаНаПеремещение.Количество() > 0 Тогда
		Данные = Новый Структура;
		Данные.Вставить("items", мсвЗаявкаНаПеремещение);
		сшпПользовательскиеМетоды.ПоместитьВОчередьИсходящих("nipЗаявкаНаПеремещение", Данные);
	КонецЕсли;
	
	
	Если мсвЗаказПокупателя.Количество() = 0 
		И мсвСтатусЗаказаПокупателя.Количество() = 0
		И мсвЗаявкаНаВыдачуСХ.Количество() = 0
		И мсвЗаявкаНаПеремещение.Количество() = 0 
		И мсвКонтрольныеМаркиЗаказаНаВыдачуПВЗ.Количество() = 0 
		И мсвКупоны.Количество() = 0
		И мсвТТНв1С.Количество() = 0 Тогда
		СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОбработкаОтменена;
		ТекстОшибки = "Заказ не подлежит выгрузке в Ниппель";
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецЕсли;
