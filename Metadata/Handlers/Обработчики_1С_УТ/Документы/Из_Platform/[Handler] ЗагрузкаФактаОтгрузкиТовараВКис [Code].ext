ПараметрыСеанса.ГруппыТекущегоПользователя = Новый ФиксированныйМассив(Новый Массив);

//Определение переменных
ПустойИдентификатор = "00000000-0000-0000-0000-000000000000";

ВидыДокументов = Новый Массив;
ВидыДокументов.Добавить("ВозвратТоваровПоставщику");
ВидыДокументов.Добавить("ПеремещениеТоваров");
ВидыДокументов.Добавить("РеализацияТоваровУслуг");

ВидыПартий = Новый Массив;
ВидыПартий.Добавить("СерииНоменклатуры");
ВидыПартий.Добавить("ХарактеристикиНоменклатуры");

 ЧтениеJSON = Новый ЧтениеJSON;
 ЧтениеJSON.УстановитьСтроку(ТелоСообщения());
 СтруктураЗапроса = ПрочитатьJSON(ЧтениеJSON, Ложь); 

//Получение тела сообщения
xdtoОбъект = сшпОбщегоНазначения.ПолучитьОбъектXDTO(Перечисления.сшпФорматыСообщений.JSON, ТелоСообщения());
	
	////ИдентификаторЗапроса
	Данные = xdtoОбъект.Получить("Данные"); 
	ДокументОснованиеXDTO = Данные.Ссылка;
	//НомерДокументаЗаказ = Данные.Номер;

	Если ДокументОснованиеXDTO <> Неопределено Тогда
		Для Каждого ВидДокумента Из ВидыДокументов Цикл
			ДокОснование = Документы[ВидДокумента].ПолучитьСсылку(Новый УникальныйИдентификатор(ДокументОснованиеXDTO));   
			Если ОбщегоНазначения.СсылкаСуществует(ДокОснование) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОбработкаОтменена;
		ТекстОшибки = "В пакете отсутствует ссылка на документ-основание!";
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
// /////////////////////////////////////////////////////////////////


	ТаблицаТоваровXDTO = Данные.Получить("Товары");
	
	текТаблица = ТаблицаТоваровXDTO.Последовательность(); 
	
	ТЗ_Товары = Новый ТаблицаЗначений;
	ТЗ_Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ_Товары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТЗ_Товары.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТЗ_Товары.Колонки.Добавить("СерияНоменклатуры"); 
	ТЗ_Товары.Колонки.Добавить("ДатаПроизводства");
	ТЗ_Товары.Колонки.Добавить("Состояние",  Новый ОписаниеТипов("Строка"));
	ТЗ_Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТЗ_Товары.Колонки.Добавить("УникальныйКодСтроки",  Новый ОписаниеТипов("Строка"));
	
	ТабКМ = Новый ТаблицаЗначений;
	ТабКМ.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	
	Для Инд = 0 По текТаблица.Количество() - 1 Цикл
		
		НоменклатураXDTO = "";
		ХарактеристикаXDTO = "";
		УпаковкаXDTO = "";
		ПартияXDTO = "";
		СостояниеXDTO = "";
		КоличествоXDTO = "";
		УникальныйКодСтрокиXDTO = "";
		
		xdtoСтрока= текТаблица.ПолучитьЗначение(Инд);
		Свойства = xdtoСтрока.Свойства();
		
		Если Свойства.Получить("Номенклатура") <> Неопределено Тогда
			НоменклатураXDTO = xdtoСтрока.Получить("Номенклатура"); 
			Если НоменклатураXDTO <> Неопределено Тогда
				НоменклатураСсылкаXDTO = НоменклатураXDTO.Получить("Ссылка");
			КонецЕсли;
			
			//Номенклатура
			Если НоменклатураСсылкаXDTO <> ПустойИдентификатор И ЗначениеЗаполнено(НоменклатураСсылкаXDTO) Тогда
				Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(НоменклатураСсылкаXDTO));
				Если Не ОбщегоНазначения.СсылкаСуществует(Номенклатура) Тогда
					СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОбработкаОтменена;
					ТекстОшибки = "В КИС отсутствует номенклатура с УИД: "+НоменклатураСсылкаXDTO;
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
			КонецЕсли; 
			
		КонецЕсли;
		Если Свойства.Получить("Характеристика") <> Неопределено Тогда
			ХарактеристикаXDTO = xdtoСтрока.Получить("Характеристика"); 
			Если ХарактеристикаXDTO <> Неопределено Тогда
				ХарактеристикаСсылкаXDTO = ХарактеристикаXDTO.Получить("Ссылка");
			КонецЕсли;
			
			//Характеристика	
			Если ХарактеристикаСсылкаXDTO <> ПустойИдентификатор И ЗначениеЗаполнено(ХарактеристикаСсылкаXDTO) Тогда
				ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ХарактеристикаСсылкаXDTO));
				Если Не ОбщегоНазначения.СсылкаСуществует(ХарактеристикаНоменклатуры) Тогда
					ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				КонецЕсли;
			Иначе                                                                          
				ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;
		Если Свойства.Получить("Упаковка") <> Неопределено Тогда
			УпаковкаXDTO = xdtoСтрока.Получить("Упаковка");  
			Если УпаковкаXDTO <> Неопределено Тогда
				ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(УпаковкаXDTO.Ссылка)); 
			КонецЕсли;
		КонецЕсли;
		Если Свойства.Получить("Партия") <> Неопределено Тогда
			ДанныеПартииXDTO = xdtoСтрока.Получить("Партия");
            Если ДанныеПартииXDTO <> Неопределено Тогда
                ПартияXDTO = ДанныеПартииXDTO.Получить("Ссылка"); 
                ДатаПроизводстваXDTO = ДанныеПартииXDTO.Получить("ДатаПроизводства");
            КонецЕсли; 
			
			//Партия
			Если ПартияXDTO <> ПустойИдентификатор И ЗначениеЗаполнено(ПартияXDTO) Тогда
				Для Каждого ВидПартии Из ВидыПартий Цикл
					текСсылка = Справочники[ВидПартии].ПолучитьСсылку(Новый УникальныйИдентификатор(ПартияXDTO));  
					//Если Не ОбщегоНазначения.СсылкаСуществует(текСсылка) Тогда
                    Если ОбщегоНазначения.СсылкаСуществует(текСсылка) Тогда
						СерияНоменклатуры = текСсылка;	
						Прервать; 
					Иначе
						Партия = Неопределено;
					КонецЕсли;
				КонецЦикла; 
				ДатаПроизводства = ПрочитатьДатуJSON(ДатаПроизводстваXDTO, ФорматДатыJSON.ISO);
			КонецЕсли;   
						
		КонецЕсли;
		Если Свойства.Получить("Состояние") <> Неопределено Тогда
			СостояниеXDTO = xdtoСтрока.Получить("Состояние");
			
			//Состояние	
			Если СостояниеXDTO <> ПустойИдентификатор И ЗначениеЗаполнено(СостояниеXDTO) Тогда
				Состояние = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СостояниеXDTO));
				Если Не ОбщегоНазначения.СсылкаСуществует(Состояние) Тогда
					Состояние = Справочники.Склады.ПустаяСсылка();
				КонецЕсли;
			Иначе                                                                          
				Состояние = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		Если Свойства.Получить("Количество") <> Неопределено Тогда
			КоличествоXDTO = xdtoСтрока.Получить("Количество"); 
			Количество = Число(КоличествоXDTO);
		КонецЕсли;
		Если Свойства.Получить("КодСтроки") <> Неопределено Тогда
			УникальныйКодСтрокиXDTO = xdtoСтрока.Получить("КодСтроки");
		КонецЕсли;
		
		НоваяСтрокаТовары = ТЗ_Товары.Добавить();
		НоваяСтрокаТовары.Номенклатура = Номенклатура;
		НоваяСтрокаТовары.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
		НоваяСтрокаТовары.ЕдиницаИзмерения = ЕдиницаИзмерения;
		НоваяСтрокаТовары.СерияНоменклатуры = СерияНоменклатуры;
		НоваяСтрокаТовары.ДатаПроизводства = ДатаПроизводства;
		НоваяСтрокаТовары.Состояние = Состояние;
		НоваяСтрокаТовары.Количество = Количество;
		НоваяСтрокаТовары.УникальныйКодСтроки = УникальныйКодСтрокиXDTO;
		
		Если Свойства.Получить("ДанныеСерийногоУчета") <> Неопределено Тогда
			ДанныеСерийногоУчетаXDTO = xdtoСтрока.Получить("ДанныеСерийногоУчета");
			Если ДанныеСерийногоУчетаXDTO <> Неопределено Тогда
				текТаблицаКМ = ДанныеСерийногоУчетаXDTO.Последовательность();
				
				Для ИндКМ = 0 По текТаблицаКМ.Количество()-1 Цикл
					КодМаркировкиXDTO = Неопределено; 
					
					СтрокаТаблицыКМ = текТаблицаКМ.ПолучитьЗначение(ИндКМ); 
					СвойстваТаблицыКМ = СтрокаТаблицыКМ.Свойства();
			        Если СвойстваТаблицыКМ.Получить("СН") <> Неопределено Тогда
			            КодМаркировкиXDTO = СтрокаТаблицыКМ.Получить("СН");
			        КонецЕсли;
					
					GTIN = СокрЛП(Сред(КодМаркировкиXDTO, 1, 14));
					SN = СокрЛП(Сред(КодМаркировкиXDTO, 15, 13));
						
					КодМаркировки = "(01)"+GTIN+"(21)"+SN;

					ШК = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьПоЗначениюШтрихкода(КодМаркировки);
					
					//Начало: Тронин А.А., Заявка №ХХХ, 20.04.2021, Изменение характеристики у КМ, если по основанию стоит другая
					Если НоваяСтрокаТовары.Номенклатура.НоменклатурнаяГруппа.КонвертацияОбъектовВВМС = Перечисления.ВариантыКонвертацииТоваровВWMS.НоменклатураХарактеристикапартия Тогда
						Если ШК <> Неопределено Тогда
							//Если ШК.Характеристика <> НоваяСтрокаТовары.ХарактеристикаНоменклатуры Тогда 
                            Если ТипЗнч(НоваяСтрокаТовары.СерияНоменклатуры) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") 
								И ШК.Характеристика <> НоваяСтрокаТовары.СерияНоменклатуры Тогда
								    ОбъектШК = ШК.ПолучитьОбъект();
								    ОбъектШК.Характеристика = НоваяСтрокаТовары.СерияНоменклатуры;
								    ОбъектШК.Записать();
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					//Конец: Тронин А.А., Заявка №ХХХ, 20.04.2021, Изменение характеристики у КМ, если по основанию стоит другая
					
					Если ШК <> Неопределено Тогда
						Если ЗначениеЗаполнено(НоваяСтрокаТовары.ДатаПроизводства) Тогда
							ГодПроизводства = Строка(Формат(НоваяСтрокаТовары.ДатаПроизводства, "ДФ=yyyy"));
							ДатаГодаПроизводстваШины = Дата(ГодПроизводства, 1, 1);
							
							Если НЕ ЗначениеЗаполнено(ШК.ГодВыпускаШины) ИЛИ ШК.ГодВыпускаШины <> ДатаГодаПроизводстваШины Тогда 
								ОбъектШК = ШК.ПолучитьОбъект();
								ОбъектШК.ГодВыпускаШины = ДатаГодаПроизводстваШины;
								ОбъектШК.Записать();
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					НоваяСТрока = ТабКМ.Добавить();
					НоваяСТрока.ШтрихкодУпаковки = ШК;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		Склад = ДокОснование.СкладОтправитель;
	Иначе
		Склад = ДокОснование.Склад;
	КонецЕсли;
	
    // ///////////////////////// Запись логирования //////////////////
    ПараметрыЗаписи = ЛогированиеРаботыAPI.ПараметрыЗаписи();
    ПараметрыЗаписи.ОбъектДанных = ДокОснование;
    ПараметрыЗаписи.ТипСобытия = Перечисления.ТипыСобытийЛогаРаботыAPI.ЗаписьРезультатаОбработкиДокументов;
    ПараметрыЗаписи.Длительность = 0;
    ПараметрыЗаписи.Операция = Перечисления.СкладскиеОперации.Отгрузка;
    ПараметрыЗаписи.Склад = Склад;
    ПараметрыЗаписи.Запрос = Строка(ТелоСообщения());
    ПараметрыЗаписи.Ответ = "";
    ЛогированиеРаботыAPI.Записать(ПараметрыЗаписи);

	УказыватьСерииПриПроведении = ДополнительныеФункции.ПолучитьНастройкуДействияСистемыПоНаименованию("Указывать серии при проведении расходного ордера из WMS", Ложь);	
	ОбрабатыватьКМ = ДополнительныеФункции.ПолучитьНастройкуДействияСистемыПоНаименованию("Загружать коды маркировок по шинам в расходные ордера", Ложь); 
	
	//ТЗ_ПакетКМ = Новый ТаблицаЗначений;
	
	ТЗ_Номенклатура = ДокОснование.Товары.ВыгрузитьКолонки();
	Если ТЗ_Номенклатура.Колонки.Найти("Качество") = Неопределено Тогда
		ТЗ_Номенклатура.Колонки.Добавить("Качество");
	КонецЕсли;	
	Если ТЗ_Номенклатура.Колонки.Найти("ДокументРезерва") = Неопределено Тогда
		ТЗ_Номенклатура.Колонки.Добавить("ДокументРезерва");
	КонецЕсли;	
	Если ТЗ_Номенклатура.Колонки.Найти("Цена") = Неопределено Тогда
		ТЗ_Номенклатура.Колонки.Добавить("Цена");
	КонецЕсли;	
	ТЗ_Номенклатура.Колонки.Добавить("КоличествоОснования");
	ТЗ_Номенклатура.Колонки.Добавить("СерияУказываетсяПриОтпускеСоСклада");
	
	ТоварыОснования = ДокОснование.Товары.Выгрузить();
	
	ОСХ 		= ПараметрыСеанса.НаборКонстант.ОСХ;
	БУШина 		= ПараметрыСеанса.НаборКонстант.БУШина;
	СписокНГиск = ПараметрыСеанса.НаборКонстант.СписокНоменклатурныхГруппМатериалов;
	
	СтрокаГруппировки = "";
	СтрокаСуммирования = "";
	Для Каждого Колонка Из ТоварыОснования.Колонки Цикл
		Если Колонка.Имя = "Количество" Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаСуммирования) Тогда
				СтрокаСуммирования = СтрокаСуммирования + Колонка.Имя;
			Иначе
				СтрокаСуммирования = СтрокаСуммирования+", "+ Колонка.Имя;
			КонецЕсли;
		Иначе	
			Если НЕ ЗначениеЗаполнено(СтрокаГруппировки) Тогда
				СтрокаГруппировки = СтрокаГруппировки + Колонка.Имя;
			Иначе
				СтрокаГруппировки = СтрокаГруппировки+", "+ Колонка.Имя;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	ТоварыОснования.Свернуть(СтрокаГруппировки, СтрокаСуммирования);
	
	ТоварыОснования.Колонки.Добавить("Обработано");
	ТоварыОснования.ЗаполнитьЗначения(Ложь, "Обработано");
	
	Для Каждого СтрокаТовара Из ТЗ_Товары Цикл 
		СтрокаТЧОснования = ТоварыОснования.Найти(СокрЛП(СтрокаТовара.УникальныйКодСтроки), "УникальныйКодСтроки");
		
		Если СтрокаТЧОснования <> Неопределено Тогда 
			НоваяСтрока = ТЗ_Номенклатура.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧОснования);
			
			НоваяСтрока.Количество = СтрокаТовара.Количество;
			//НоваяСтрока.Качество = Справочники.Качество.Новый;
			
			Если УказыватьСерииПриПроведении Тогда
				НоваяСтрока.СерияУказываетсяПриОтпускеСоСклада = Истина;
			Иначе
				НоваяСтрока.СерияУказываетсяПриОтпускеСоСклада = Ложь;
			КонецЕсли;
			
			Если СтрокаТЧОснования <> Неопределено Тогда
				
				Если ТипЗнч(ДокОснование) <> Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
					НоваяСтрока.ДокументРезерва = СтрокаТЧОснования.ЗаказПокупателя;
				КонецЕсли;
				
				НоваяСтрока.КоличествоОснования = СтрокаТЧОснования.Количество;
				СтрокаТЧОснования.Обработано = Истина;
			Иначе
				НоваяСтрока.КоличествоОснования = 0;
				СтрокаТЧОснования.Обработано = Ложь;
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла;	
	
	Если ТЗ_Номенклатура.Количество() > 0 Тогда
		ЕстьРасхождение = Ложь;
		
		ТЗ_Номенклатура.Свернуть("Номенклатура, КоличествоМест, ЕдиницаИзмерения, ЕдиницаИзмеренияМест, Коэффициент, СерияНоменклатуры, ХарактеристикаНоменклатуры, Качество, КоличествоОснования, ДокументРезерва, Цена, УникальныйКодСтроки", "Количество");
		ТЗ_Расхождения = ТЗ_Номенклатура.СкопироватьКолонки();
		Для Каждого СтрокаТЗ ИЗ ТЗ_Номенклатура Цикл
			Если Не СтрокаТЗ.Количество = СтрокаТЗ.КоличествоОснования Тогда
				НСтр = ТЗ_Расхождения.Добавить();
				ЗаполнитьЗначенияСвойств(НСтр, СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасходныйОрдерНаТовары.Ссылка
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|ГДЕ
		|	(РасходныйОрдерНаТовары.ДокументПередачи = &Основание
		|			ИЛИ РасходныйОрдерНаТовары.Основание = &Основание)
		|	И РасходныйОрдерНаТовары.ПоступилИзWMS
        //|	И РасходныйОрдерНаТовары.УникальныйИдентификаторЗаказаWMS = &НомерДокументаЗаказ
		|	И НЕ РасходныйОрдерНаТовары.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Основание", ДокОснование);
		//Запрос.УстановитьПараметр("НомерДокументаЗаказ", НомерДокументаЗаказ);

		ПроведенныйДокумент = Ложь;
		
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() Тогда
			ДокОбъект = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();	
			
			ДокОбъект.Дата = ТекущаяДата();
			
			ДокОбъект.Организация = ДокОснование.Организация;
			Если ТипЗнч(ДокОснование) <> Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
				ДокОбъект.Контрагент = ДокОснование.Контрагент;
			КонецЕсли;   
			
			Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
				ДокОбъект.ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение; 
			ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				ДокОбъект.ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.РасходПоНакладной;
            ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				ДокОбъект.ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоставщику;	
			КонецЕсли;
			
			ДокОбъект.УстановитьНовыйНомер(ДокОбъект.Организация.Префикс);
			
			ДокОбъект.Склад = Склад;
			ДокОбъект.ПоступилИзWMS = Истина;
			
			ДокОбъект.Подразделение = ДокОснование.Подразделение;
			ДокОбъект.Ответственный = ДокОснование.Ответственный;
		Иначе
			Выборка = Рез.Выбрать();
			Выборка.Следующий();
			
			Ответ = ДополнительныеФункции.ПолучитьНастройкуДействияСистемыПоНаименованию("Изменять проведенные ордера WMS", Ложь);
			Если Ответ = Ложь Тогда
				Если Выборка.Ссылка.Проведен Тогда
					ПроведенныйДокумент = Истина;
					//Возврат;
                    РегистрыСведений.РезультатыЗагрузкиДокументовВМС_Акселот.ЗаписатьРезультатЗагрузки(Выборка.Ссылка, Ложь, 
											СтрШаблон("%1:::%2:::%3:::%4", Выборка.Ссылка.Метаданные().ПолноеИмя(), "Обработчик Загрузка факта отгрузки товара в КИС", "Проведение", "Нельзя изменять проведенные ордера WMS"));

				КонецЕсли;
			КонецЕсли;
			Если Не ПроведенныйДокумент Тогда	
				ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();	
				ДокОбъект.Товары.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПроведенныйДокумент Тогда

            ДокОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаДанныхИзВМС_Акселот", Истина);

			//ДокОбъект.УникальныйИдентификаторЗаказаWMS = НомерДокументаЗаказ;
			ДокОбъект.ДокументПередачи = ДокОснование;
			ДокОбъект.Основание = ДокОснование;
			
			ДокОбъект.Товары.Загрузить(ТЗ_Номенклатура); 
			
			НачатьТранзакцию();  
			Попытка              
				
				//Удаление движений документа
				ДокОбъектОснов = ДокОснование.ПолучитьОбъект();	
				Для Каждого Движение ИЗ ДокОбъектОснов.Движения Цикл
					
					Если Движение.Количество() > 0 Тогда
						Точка = Найти(Строка(Движение), ".");
						ВидРегистра = Лев(Строка(Движение), Точка - 13);
						РегистрИмя = СокрП(Сред(Строка(Движение), Точка + 1));
						
						Если ВидРегистра = "РегистрНакопления" Тогда
							НаборЗаписей = РегистрыНакопления[РегистрИмя].СоздатьНаборЗаписей();            
						ИначеЕсли ВидРегистра = "РегистрСведений" Тогда
							НаборЗаписей = РегистрыСведений[РегистрИмя].СоздатьНаборЗаписей();    
						ИначеЕсли ВидРегистра = "РегистрРасчета" Тогда
							НаборЗаписей = РегистрыРасчета[РегистрИмя].СоздатьНаборЗаписей();    
						КонецЕсли;
						
						НаборЗаписей.Отбор.Регистратор.Установить(ДокОбъектОснов.Ссылка);            
						
					Иначе
						НаборЗаписей = Движение;
					КонецЕсли;
					
					Попытка
						НаборЗаписей.Записать();
					Исключение
						ЗаписьЖурналаРегистрации("Удаление движений документа (Загрузка факта отгрузки товара из Datareon)", УровеньЖурналаРегистрации.Ошибка,  ,  , "Не удалость удалить движение по документу "+ДокОбъектОснов.Ссылка+"! "+СокрЛП(ОписаниеОшибки()));
					КонецПопытки;
				КонецЦикла;
				////////	
				
				ДокОбъект.ЗаполнитьПоСериям();
				
				//Начало: Тронин А.А., Заявка №ХХХ, 07.08.2020, Маркировка
				Если ОбрабатыватьКМ И ТипЗнч(ДокОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					Если ТабКМ.Количество() > 0 Тогда
						ДокОбъект.ШтрихкодыУпаковок.Загрузить(ТабКМ);
					КонецЕсли;
				КонецЕсли;
				//Конец: Тронин А.А., Заявка №ХХХ, 07.08.2020, Маркировка
				
				//[->]: Зиборов Александр Сергеевич, 27.12.2021,  Заявка № ИНТЕРКАМПАНИ_4. Нужно загружить КМ в Расходные ордер для Перемещений товаров.
				
				Если ДополнительныеФункции.ПолучитьНастройкуДействияСистемыПоНаименованию("Загружать контрольные марки в Расходные ордера для документа Перемещение товаров", Ложь) Тогда
					Если ОбрабатыватьКМ И ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
						Если ТабКМ.Количество() > 0 Тогда
							ДокОбъект.ШтрихкодыУпаковок.Загрузить(ТабКМ);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;			
				//[<-]: Зиборов Александр Сергеевич, 27.12.2021
				
				ДокОбъект.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина);
                				
                ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
                				
				ДокОбъектРеализации = ДокОснование.ПолучитьОбъект();
				Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					ДокОбъектРеализации.ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру;
				КонецЕсли;
				Если ТЗ_Расхождения.Количество() > 0 Тогда
					Для Каждого СтрокаТЗ ИЗ ТЗ_Расхождения Цикл 
						СтрокаТЧОснования = ДокОбъектРеализации.Товары.Найти(СтрокаТЗ.УникальныйКодСтроки, "УникальныйКодСтроки");
						
						Если СтрокаТЧОснования <> Неопределено Тогда
							//Начало: Тронин А.А., Заявка №ИТ0002241, 26.12.2019, Описание
							НоваяСтрока = ДокОбъектРеализации.Расхождения.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧОснования);
							НоваяСтрока.КоличествоПлан = СтрокаТЧОснования.Количество;
							НоваяСтрока.КоличествоФакт = СтрокаТЗ.Количество;
							НоваяСтрока.Расхождение = НоваяСтрока.КоличествоФакт - НоваяСтрока.КоличествоПлан;
							//Конец: Тронин А.А., Заявка №ИТ0002241, 26.12.2019, Описание
							
							СтрокаТЧОснования.Количество = СтрокаТЗ.Количество;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				ТЗ = ТоварыОснования.Скопировать(Новый Структура("Обработано", Ложь));
				Если ТЗ.Количество() > 0 Тогда
					Для Каждого Стр Из ТЗ Цикл
						СтрокаТЧОснования = ДокОбъектРеализации.Товары.Найти(Стр.УникальныйКодСтроки, "УникальныйКодСтроки");
						//Начало: Тронин А.А., Заявка №ИТ0002241, 26.12.2019, Описание
						НоваяСтрока = ДокОбъектРеализации.Расхождения.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧОснования);
						Если СтрокаТЧОснования <> Неопределено Тогда
							НоваяСтрока.КоличествоПлан = СтрокаТЧОснования.Количество;
							НоваяСтрока.КоличествоФакт = 0;
							НоваяСтрока.Расхождение = НоваяСтрока.КоличествоФакт - НоваяСтрока.КоличествоПлан;
						Иначе
							НоваяСтрока.КоличествоПлан = 0;
							НоваяСтрока.КоличествоФакт = СтрокаТЗ.Количество;
							НоваяСтрока.Расхождение = НоваяСтрока.КоличествоФакт - НоваяСтрока.КоличествоПлан;
						КонецЕсли;
						//Конец: Тронин А.А., Заявка №ИТ0002241, 26.12.2019, Описание
						
						Если ДополнительныеФункции.ПолучитьНастройкуДействияСистемыПоНаименованию("Корректировать (удалять строки) документ отгрузки по данным из WMS", Ложь) Тогда 
							ДокОбъектРеализации.Товары.Удалить(СтрокаТЧОснования);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				//Начало: Тронин А.А., Заявка №ХХХ, 07.08.2020, Маркировка
				Если ОбрабатыватьКМ Тогда
					Если ТабКМ.Количество() > 0 Тогда
						Запрос.Текст =
						"ВЫБРАТЬ ДокОснования.* ИЗ Документ."+ДокОбъектРеализации.Метаданные().Имя+".ШтрихкодыУпаковок КАК ДокОснования ГДЕ ДокОснования.Ссылка = &ДокументСсылка И НЕ ДокОснования.ШтрихкодУпаковки В (&СписокКМ)";
						
						Запрос.УстановитьПараметр("ДокументСсылка", ДокОбъектРеализации.Ссылка);
						Запрос.УстановитьПараметр("СписокКМ", ТабКМ.ВыгрузитьКолонку("ШтрихкодУпаковки"));
						РезультатЗапроса = Запрос.Выполнить();
						
						ШКНеРедактированные = РезультатЗапроса.Выгрузить();
						Если ШКНеРедактированные.Количество() > 0 Тогда
							ШКНеРедактированные.Колонки.Удалить("Ссылка");
							ШКНеРедактированные.Колонки.Удалить("НомерСтроки");
						КонецЕсли;
						
						ДокОбъектРеализации.ШтрихкодыУпаковок.Очистить();
						ДокОбъектРеализации.ШтрихкодыУпаковок.Загрузить(ШКНеРедактированные);
						Для Каждого Стр Из ТабКМ Цикл
							НоваяСтрока = ДокОбъектРеализации.ШтрихкодыУпаковок.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
							Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
								НоваяСтрока.ЗначениеШтрихкода = Стр.ШтрихкодУпаковки.ЗначениеШтрихкода;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				//Конец: Тронин А.А., Заявка №ХХХ, 07.08.2020, Маркировка
				
				//Начало: Тронин А.А., Заявка №ХХХ, 27.02.2020, Описание
				ДокОбъектРеализации.ДополнительныеСвойства.Вставить("ЗагрузкаИзВМС", Истина);
				//Конец: Тронин А.А., Заявка №ХХХ, 27.02.2020, Описание
				//Начало: Хафизов Ф.Ф., Костыль, для записи расхождений при загрузке РО 14.01.2020
				ДокОбъектРеализации.Записать(РежимЗаписиДокумента.Запись);
				//Конец: Хафизов Ф.Ф., Костыль, для записи расхождений при загрузке РО 14.01.2020
                				
				////// БЛОК СИНХРОНИЗАЦИИ С ОСНОВАНИЕМ /////////////////////////
				ДокОбъект.СинхронизироватьСерииСОснованием(ДокОбъектРеализации);
				////////////////////////////////////////////////////////////////
				
				//Начало: Хафизов Ф.Ф., Костыль, для записи расхождений при загрузке РО 14.01.2020
				ДокОбъектРеализации.Записать(РежимЗаписиДокумента.Запись);
				//Конец: Хафизов Ф.Ф., Костыль, для записи расхождений при загрузке РО 14.01.2020
                				
				ДокОбъектРеализации.ДополнительныеСвойства.Вставить("сшпНеОбрабатывать", Истина); // Пометка записей для пропуска обработки
				ДокОбъектРеализации.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
                РегистрыСведений.РезультатыЗагрузкиДокументовВМС_Акселот.ЗаписатьРезультатЗагрузки(ДокОбъектРеализации.Ссылка, Истина, 
											СтрШаблон("%1:::%2:::%3:::%4", ДокОбъектРеализации.Метаданные().ПолноеИмя(), "Обработчик Загрузка факта отгрузки товара в КИС", "Проведение", ""));

				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Оперативный); //+Зубрин В.Н. 01.03.2021   Добавил РежимПроведенияДокумента.Оперативный
                РегистрыСведений.РезультатыЗагрузкиДокументовВМС_Акселот.ЗаписатьРезультатЗагрузки(ДокОбъект.Ссылка, Истина, 
											СтрШаблон("%1:::%2:::%3:::%4", ДокОбъект.Метаданные().ПолноеИмя(), "Обработчик Загрузка факта отгрузки товара в КИС", "Проведение", ""));

				ЗафиксироватьТранзакцию();
				
			Исключение

                ТекстОшибки = "";

                Если ДокОбъект.ДополнительныеСвойства.Свойство("ТекстОшибки") Тогда
                    ТекстОшибки = ДокОбъект.ДополнительныеСвойства.ТекстОшибки;
                КонецЕсли;

				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;

                СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОшибкаОбработки;
                ТекстОшибки = ТекстОшибки + СокрЛП(ОписаниеОшибки());
				
				ЗаписьЖурналаРегистрации("ИзменениеДокументаРеализацииДатареоне", УровеньЖурналаРегистрации.Ошибка,  ,  , "Не удалость провести документ "+ДокОснование+"! "+СокрЛП(ОписаниеОшибки()));
				ЗаписьЖурналаРегистрации("СозданиеРасходногоОрдераДатареон", УровеньЖурналаРегистрации.Ошибка,  ,  , "Не удалость провести расходный ордер по основанию "+ДокОснование+"! "+СокрЛП(ОписаниеОшибки()));

                РегистрыСведений.РезультатыЗагрузкиДокументовВМС_Акселот.ЗаписатьРезультатЗагрузки(ДокОснование, Ложь, 
											СтрШаблон("%1:::%2:::%3:::%4", ДокОснование.Метаданные().ПолноеИмя(), "Обработчик Загрузка факта отгрузки товара в КИС", "Проведение", СокрЛП(ОписаниеОшибки())+ТекстОшибки));
				
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
