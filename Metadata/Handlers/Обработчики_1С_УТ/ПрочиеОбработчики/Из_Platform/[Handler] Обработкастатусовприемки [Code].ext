//Определение переменных
ПустойИдентификатор = "00000000-0000-0000-0000-000000000000";

//Получение тела сообщения
xdtoОбъект = сшпОбщегоНазначения.ПолучитьОбъектXDTO(Перечисления.сшпФорматыСообщений.JSON, ТелоСообщения());

ВидыДокументов = Новый Массив;
ВидыДокументов.Добавить("ВозвратТоваровПоставщику");
ВидыДокументов.Добавить("КорректировкаРеализации");
ВидыДокументов.Добавить("ПеремещениеТоваров");
ВидыДокументов.Добавить("ПоступлениеТоваровУслуг");   
	 
ТаблицаСтатусовXDTO = Неопределено;

Свойства = xdtoОбъект.Свойства();
Если Свойства.Получить("СтатусПоступления") <> Неопределено Тогда
    ТаблицаСтатусовXDTO = xdtoОбъект.Получить("СтатусПоступления");
	Если ТаблицаСтатусовXDTO <> Неопределено Тогда 
		текТаблица = ТаблицаСтатусовXDTO.Последовательность();
		Для Инд = 0 По текТаблица.Количество()-1 Цикл
			ДокументОснованиеXDTO = Неопределено;
	        КодСтатусаXDTO = Неопределено; 
			
			ДокументОснование = Неопределено;
			СсылкаНаМЛ = Неопределено;
			
			xdtoСтрока = текТаблица.ПолучитьЗначение(Инд); 
			
			Свойства = xdtoСтрока.Свойства();
	        Если Свойства.Получить("ПланПоступления") <> Неопределено Тогда
	            ДанныеДокументаXDTO = xdtoСтрока.Получить("ПланПоступления");
	            Если ДанныеДокументаXDTO <> Неопределено Тогда
	                ДокументОснованиеXDTO = ДанныеДокументаXDTO.Получить("Ссылка");
					Если ДокументОснованиеXDTO <> Неопределено Тогда
						Для Каждого ВидДокумента Из ВидыДокументов Цикл
							ДокументОснование = Документы[ВидДокумента].ПолучитьСсылку(Новый УникальныйИдентификатор(ДокументОснованиеXDTO));   
							Если ОбщегоНазначения.СсылкаСуществует(ДокументОснование) Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
					Иначе
						СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОбработкаОтменена;
						ТекстОшибки = "В пакете отсутствует ссылка на документ-основание!";
					    ВызватьИсключение ТекстОшибки;
					КонецЕсли;
				КонецЕсли;
			Иначе
				СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОбработкаОтменена;
				ТекстОшибки = "Отсутствует информация по поступлениям";
			    ВызватьИсключение ТекстОшибки;
	        КонецЕсли;
	        Если Свойства.Получить("Рейс") <> Неопределено Тогда
	            ДанныеРейсаXDTO = xdtoСтрока.Получить("Рейс");
	            Если ДанныеРейсаXDTO <> Неопределено Тогда
	                ДокументРейсXDTO = ДанныеРейсаXDTO.Получить("Ссылка");
					СсылкаНаМЛ = Документы.МаршрутныйЛист.ПолучитьСсылку(Новый УникальныйИдентификатор(ДокументРейсXDTO));
	            КонецЕсли;
			КонецЕсли; 
	        Если Свойства.Получить("СтатусДокумента") <> Неопределено Тогда
	            ДанныеСтатусаXDTO = xdtoСтрока.Получить("СтатусДокумента");
	            Если ДанныеСтатусаXDTO <> Неопределено Тогда
	                КодСтатусаXDTO = ДанныеСтатусаXDTO.Получить("Код");
                    ДатаИзмененияСтатусаДокументаXDTO = ДанныеСтатусаXDTO.Получить("ДатаИзмененияСтатусаДокумента"); 
	            КонецЕсли;
			КонецЕсли; 
			
			Статус = Справочники.СтатусыДокументовWMS.НайтиПоРеквизиту("КодWMS", Число(КодСтатусаXDTO));
            ДатаСтатуса = ПрочитатьДатуJSON(ДатаИзмененияСтатусаДокументаXDTO, ФорматДатыJSON.ISO);
			
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				Запись = РегистрыСведений.СтатусВыгруженногоДокументаВWMS.СоздатьМенеджерЗаписи();
				Запись.Период = ДатаСтатуса;
				Запись.Документ = ДокументОснование;
				Запись.СтатусWMS = Статус;
				
				Запись.Записать(); 
				
                //REQ1C-5135, некорректный код, т.к. может быть прямой рейс и нужно заполнять время НЕ для обратного рейса, время в МЛ будем заполнять в одном обработчике "Обработка статуса МЛ" 
				///// Когда в УТ заполнять коды статусов для акселот, необходимо будет в условиях указать правильные для "В работе" и "Принят"
				//Если ОбщегоНазначения.СсылкаСуществует(СсылкаНаМЛ) Тогда 
				//	Если КодСтатусаXDTO = "102" Тогда
				//		ОбъектМЛ = СсылкаНаМЛ.ПолучитьОбъект();
				//		ОбъектМЛ.ВремяНачалаПогрузкиДляОбратногоРейса = ДатаСтатуса;
                //        ОбъектМЛ.ОбменДанными.Загрузка = Истина;
		        //        ОбъектМЛ.Записать();
				//	ИначеЕсли КодСтатусаXDTO = "101" Тогда
				//		ОбъектМЛ = СсылкаНаМЛ.ПолучитьОбъект();
				//		ОбъектМЛ.ВремяОкончаниеПогрузкиДляОбратногоРейса = ДатаСтатуса;
                //       ОбъектМЛ.ОбменДанными.Загрузка = Истина;
		        //        ОбъектМЛ.Записать();
				//	КонецЕсли;
                //     
				//КонецЕсли;      
			   /////////////////////////////////////////////////////////////
               //REQ1C-5135, 

                //++Разморозка товара когда статус завершен
                Если КодСтатусаXDTO = "124" Тогда
                    Разморозка = ВыполнитьФункцию("ПроизвестиРазморозку", ДокументОснование);
                КонецЕсли;
                //--Разморозка товара когда статус завершен

			Иначе
				ЗаписьЖурналаРегистрации("ЗагрузкаСтатусаДокумента", УровеньЖурналаРегистрации.Ошибка,  ,  , "Не удалость записать статус для документа: "+ДокументОснование+". Документ в системе не найден! "+СокрЛП(ОписаниеОшибки()));
			КонецЕсли;
			
		КонецЦикла;
    КонецЕсли;
КонецЕсли;
