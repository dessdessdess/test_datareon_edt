        УстановитьПривилегированныйРежим(Истина);
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТелоСообщения());
		СтруктураЗапроса = ПрочитатьJSON(ЧтениеJSON, Ложь); 
		
		ТаблицаСМаркировками = Новый ТаблицаЗначений;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
		МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
		
		ТаблицаСМаркировками.Колонки.Добавить("ВладелецМарки",          Новый ОписаниеТипов(МассивТипов));
		ТаблицаСМаркировками.Колонки.Добавить("Тип",                    Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50,  ДопустимаяДлина.Переменная)));
		ТаблицаСМаркировками.Колонки.Добавить("Номенклатура",           Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаСМаркировками.Колонки.Добавить("ИдентификаторПлощадки",  Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
		ТаблицаСМаркировками.Колонки.Добавить("КодМаркировки",          Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(40,  ДопустимаяДлина.Переменная)));
		ТаблицаСМаркировками.Колонки.Добавить("ИННВладельца",           Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20,  ДопустимаяДлина.Переменная)));
		ТаблицаСМаркировками.Колонки.Добавить("Статус",                 Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50,  ДопустимаяДлина.Переменная)));
		
        ТаблицаОтсутсвующихКМ = Новый ТаблицаЗначений;
        ТаблицаОтсутсвующихКМ.Колонки.Добавить("Номенклатура",           Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
        ТаблицаОтсутсвующихКМ.Колонки.Добавить("КодМаркировки",          Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(40,  ДопустимаяДлина.Переменная)));

		Для Каждого Элемент Из СтруктураЗапроса.Datamatrix Цикл
			НоваяСтрока = ТаблицаСМаркировками.Добавить();
			НоваяСтрока.Тип = СтруктураЗапроса.Тип;
			НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураЗапроса.Номенклатура));
			НоваяСтрока.ИдентификаторПлощадки = СтруктураЗапроса.ИдентификаторПлощадки;
			НоваяСтрока.КодМаркировки = Элемент.КМ;
           
            СсылкаНаКМ = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьКодМаркировки(Элемент.КМ);
            Если СсылкаНаКМ = Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка() Тогда
                НоваяСтрокаКМ = ТаблицаОтсутсвующихКМ.Добавить();
                НоваяСтрокаКМ.Номенклатура = НоваяСтрока.Номенклатура;
                
                СтруктураКМ = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(Элемент.КМ);
                ЭлементКМ = "(01)"+СтруктураКМ.GTIN+"(21)"+СтруктураКМ.СерийныйНомер;
                НоваяСтрокаКМ.КодМаркировки = ЭлементКМ;
            КонецЕсли;
		КонецЦикла;  
        
        Если ТаблицаОтсутсвующихКМ.Количество() > 0 Тогда
            Для Каждого СтрокаТЗ ИЗ ТаблицаОтсутсвующихКМ Цикл
                СтруктураДанныхШК = Новый Структура;
                СтруктураДанныхШК.Вставить("ДатаУпаковки", 		ТекущаяДатаСеанса());
                СтруктураДанныхШК.Вставить("Количество", 		1);
                СтруктураДанныхШК.Вставить("Серия", 			Справочники.СерииНоменклатуры.ПустаяСсылка());
                СтруктураДанныхШК.Вставить("Характеристика", 	Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
                СтруктураДанныхШК.Вставить("Номенклатура", 		СтрокаТЗ.Номенклатура);
                СтруктураДанныхШК.Вставить("ХешСумма", 			"");
                
                СтруктураДанныхШК.Вставить("Штрихкод", 		СтрокаТЗ.КодМаркировки);
                СтруктураДанныхШК.Вставить("ТипШтрихкода", 	Перечисления.ТипыШтрихкодов.GS1_DataMatrix);
                СтруктураДанныхШК.Вставить("ТипУпаковки", 	Перечисления.ТипыУпаковок.МаркированныйТовар);
                СтруктураДанныхШК.Вставить("ВидПродукции", 	Перечисления.ВидыПродукцииИС.Шины);
                
                ПараметрыСоздания = Новый Структура();
                ПараметрыСоздания.Вставить("ОтключитьПоискСуществующего", Истина);
                
                КМ = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(СтруктураДанныхШК,,,,ПараметрыСоздания);
            КонецЦикла;
        КонецЕсли;
		
		МаксимумВГруппировке = 1000;
		СлужебныйМодуль.РаспределитьПоГруппамВ_N_Позиций(ТаблицаСМаркировками, МаксимумВГруппировке);
		
		Альфа = Новый СравнениеЗначений;
		ТаблицаСМаркировками.Сортировать("Группировка Убыв", Альфа);
		МаксимальнаяГруппировка = ТаблицаСМаркировками[0].Группировка;
		
		Счетчик = 1;  
		Организация = Неопределено;
		
        ОшибкаРаботыС_ЧЗ = Ложь;

		Пока Счетчик <= МаксимальнаяГруппировка Цикл 
			
            МассивМарок = СлужебныйМодуль.ПолучитьСтроки_N_Позиций(ТаблицаСМаркировками, Счетчик);
			СтатусКодовМарикировки = СлужебныйМодуль.ПолучитьСтатусМарки(МассивМарок, Организация);
			
            Если ТипЗнч(СтатусКодовМарикировки) <> Тип("Соответствие") Тогда
				ОшибкаРаботыС_ЧЗ = Истина;
                СобытиеОшибка(СтрШаблон("%1%2%3", "Ошибка работы с Честным знаком.", Символы.ПС, СокрЛП(СтатусКодовМарикировки)));
                Прервать;	
			КонецЕсли;

			Для Каждого ЭлементСтруктуры Из СтатусКодовМарикировки Цикл
				
                СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("КодМаркировки", ЭлементСтруктуры.Ключ);
				СтрокиТовары = ТаблицаСМаркировками.НайтиСтроки(СтруктураПоиска);
				
				Для Каждого СтрокаТаблицыТовары Из СтрокиТовары Цикл
					
					СтрокаТаблицыТовары.ИННВладельца = ЭлементСтруктуры.Значение.ИННВладельца;
					СтрокаТаблицыТовары.Статус       = ЭлементСтруктуры.Значение.Статус;
					
					ОрганизацияВладельца = Справочники.Организации.НайтиПоРеквизиту("ИНН", ЭлементСтруктуры.Значение.ИННВладельца);
					Если ЗначениеЗаполнено(ОрганизацияВладельца) Тогда
						СтрокаТаблицыТовары.ВладелецМарки = ОрганизацияВладельца;
					Иначе
						ВладелецКонтрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", ЭлементСтруктуры.Значение.ИННВладельца);	
						СтрокаТаблицыТовары.ВладелецМарки = ВладелецКонтрагент;
					КонецЕсли;
                    
				КонецЦикла;

			КонецЦикла;

			Счетчик = Счетчик + 1;
			
		КонецЦикла;

        Если Не ОшибкаРаботыС_ЧЗ Тогда
				
            ОрганизацияГБ = Справочники.Организации.ПолучитьОрганизациюГруппаБринэкс();
		    ПараметрыJSON = Новый ПараметрыЗаписиJSON( , , , ЭкранированиеСимволовJSON.СимволыВнеASCII , , , Истина, Истина, Истина);
		
		    Для Каждого Строка Из ТаблицаСМаркировками Цикл
			
                ПараметрыСообщения = Новый Структура;
			    ПараметрыСообщения.Вставить("Тип", "ПроверкаКМ");
			
                //Запись = Новый ЗаписьJSON;				
			    //Запись.УстановитьСтроку(ПараметрыJSON);	
                СтруктураКМ = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(ШтрихкодыУпаковокКлиентСервер.КодМаркировкиБезСкобок(Строка.КодМаркировки));  
		        СтрокаКодМаркировки = СтруктураКМ.GTIN+СтруктураКМ.СерийныйНомер;                                                                                         							
			    //Запись.ЗаписатьЗначение(СтрокаКодМаркировки);				
			    //СтрокаJSON = Запись.Закрыть();
                //СтрокаJSON = Сред(СтрокаJSON, 2, СтрДлина(СтрокаJSON)-2); //уберем кавычки по краям
			    //ПараметрыСообщения.Вставить("КМ", СтрокаJSON);
                ПараметрыСообщения.Вставить("КМ", СтрокаКодМаркировки);
            
                ПараметрыСообщения.Вставить("Result", Ложь);
                Если Строка.Статус <> "В обороте" Тогда 
                    ПараметрыСообщения.Вставить("Message", СтрШаблон("Недопустимый статус - %1", СокрЛП(Строка.Статус)));
                ИначеЕсли Строка.ВладелецМарки <> ОрганизацияГБ Тогда
                    ПараметрыСообщения.Вставить("Message", СтрШаблон("Неверный владелец - %1", СокрЛП(Строка.ВладелецМарки)));
                ИначеЕсли Не ЗначениеЗаполнено(Справочники.ШтрихкодыУпаковокТоваров.ПолучитьКодМаркировки(Строка.КодМаркировки)) Тогда
                    ПараметрыСообщения.Вставить("Message", "КМ не найден");
                Иначе
                    ПараметрыСообщения.Вставить("Result", Истина);
                    ПараметрыСообщения.Вставить("Message", "");
                КонецЕсли;
			
                сшпПользовательскиеМетоды.ПоместитьВОчередьИсходящих("ОтветПроверкиКМ", ПараметрыСообщения);
            ///////////////////////////////////////////////////////////////////////////////
                ЗаписьJSON = Новый ЗаписьJSON;
                ЗаписьJSON.УстановитьСтроку();
                ЗаписатьJSON(ЗаписьJSON, ПараметрыСообщения);
                СтрокаJSON = ЗаписьJSON.Закрыть();

                //Для проверки КМ
                ПараметрыЗаписи = ЛогированиеРаботыAPI.ПараметрыЗаписи();
                ПараметрыЗаписи.ОбъектДанных = Справочники.Пользователи.НайтиПоКоду("agent_WMS_Axelot");
                ПараметрыЗаписи.ТипСобытия = Перечисления.ТипыСобытийЛогаРаботыAPI.ПолучениеСтатусаКодаМаркировки;
                ПараметрыЗаписи.Длительность = 0;
                ПараметрыЗаписи.Операция = Перечисления.СкладскиеОперации.Перемаркировка;
                ПараметрыЗаписи.Склад = Справочники.Склады.НайтиПоКоду("О0198");
                ПараметрыЗаписи.Запрос = СтрокаJSON;
                ЛогированиеРаботыAPI.Записать(ПараметрыЗаписи);
            ////////////////////////////////////////////////////////////////////////////////////
		    КонецЦикла;

        КонецЕсли;
		