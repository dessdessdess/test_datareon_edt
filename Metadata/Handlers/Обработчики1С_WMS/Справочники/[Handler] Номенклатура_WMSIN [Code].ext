//ИмяТаблицыБазыОбмена=dbo_inItem
     //текСтрока.ХарактеристикаНоменклатуры = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(ХарактеристикаXDTO, "Справочник.ХарактеристикиНоменклатуры", КлассПакета_Характеристика,
		
	//Определение переменных
	Локализация = "ru";
	КлассПакета_ВидНоменклатуры = 7;
	КлассПакета_Номенклатура = 3;
	КлассПакета_ЕдиницыИзмерения = 4;
	КлассПакета_УпаковкаНоменклатуры = 10;
    КлассПакета_Партия = 11;                    //++REQ1C-5628
	КлассПакета_Характеристика = 13;
	КлассПакета_НаборыУпаковок = 18;
	КлассПакета_ТорговыеМарки = 999;

	КоэффициентКонвертацииМассы = 1; // (кг -> кг)
	КоэффициентКонвертацииОбъема = 1000; // (м3 -> л)
	
    сткСообщение = Новый Структура("СостояниеСообщения, ТекстОшибки, КоличествоПопытокОжидания, Задержка, Отказ, Узел, СоответствиеНеНайденныхИдентификаторов",
                                    СостояниеСообщения, ТекстОшибки, КоличествоПопытокОжидания(), Задержка, Ложь, ИсточникСообщения(), Новый Соответствие);

	//Получение тела сообщения
	xdtoОбъект = сшпОбщегоНазначения.ПолучитьОбъектXDTO(Перечисления.сшпФорматыСообщений.JSON, ТелоСообщения());

	//Получение значений полей
	СсылкаXDTO = xdtoОбъект.Получить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация));
	ЭтоГруппаXDTO = xdtoОбъект.Получить(НСтр("ru = 'ЭтоГруппа'; en = 'IsGroup'", Локализация));
	ДатаРегистрацииXDTO = xdtoОбъект.Получить(НСтр("ru = 'ДатаРегистрации'; en = 'RegistrationDate'", Локализация));
	ПометкаУдаленияXDTO = xdtoОбъект.Получить(НСтр("ru = 'ПометкаУдаления'; en = 'DeletionMark'", Локализация));
	РодительXDTO = xdtoОбъект.Получить(НСтр("ru = 'Родитель'; en = 'Parent'", Локализация));
	НаименованиеXDTO = xdtoОбъект.Получить(НСтр("ru = 'Наименование'; en = 'Description'", Локализация));
	КодXDTO = xdtoОбъект.Получить(НСтр("ru = 'Код'; en = 'Code'", Локализация));
	
	//Поиск объекта
	ЛокальныйИдентификатор_Ссылка = ИнтеграцияСервер.ПолучитьЛокальныйИдентификатор(СсылкаXDTO, КлассПакета_Номенклатура, сткСообщение.Узел);
	СсылкаНаЭлемент = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ЛокальныйИдентификатор_Ссылка));

	//ЭтоГруппа
	ЭтоГруппа = ИнтеграцияСервер.ПолучитьБулево(ЭтоГруппаXDTO);

	новыйОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
	Если новыйОбъект = Неопределено Тогда
		Если Не ЭтоГруппа Тогда
			новыйОбъект = Справочники.Номенклатура.СоздатьЭлемент();
		Иначе
			новыйОбъект = Справочники.Номенклатура.СоздатьГруппу();
		КонецЕсли;
		новыйОбъект.УстановитьСсылкуНового(СсылкаНаЭлемент);
		новыйОбъект.ДатаЗагрузки = ИнтеграцияСервер.ПолучитьДату(ДатаРегистрацииXDTO);
	Иначе
		ДатаЗагрузки = ИнтеграцияСервер.ПолучитьДату(ДатаРегистрацииXDTO);
		Если новыйОбъект.ДатаЗагрузки > ДатаЗагрузки Тогда
			СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОбработкаОтменена;
			Перейти ~Выход;
		Иначе
			новыйОбъект.ДатаЗагрузки = ДатаЗагрузки;
		КонецЕсли;	
	КонецЕсли;

	//Реквизиты шапки
	новыйОбъект.ПометкаУдаления = ИнтеграцияСервер.ПолучитьБулево(ПометкаУдаленияXDTO);
	новыйОбъект.Родитель = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(РодительXDTO, "Справочник.Номенклатура", КлассПакета_Номенклатура, сткСообщение);
	новыйОбъект.Наименование = НаименованиеXDTO;
	новыйОбъект.Код = КодXDTO;

	Если Не ЭтоГруппа Тогда
		
		//Получение значений полей
		АртикулXDTO = xdtoОбъект.Получить(НСтр("ru = 'Артикул'; en = 'Article'", Локализация));
		ВидНоменклатурыXDTO = xdtoОбъект.Получить(НСтр("ru = 'НоменклатурнаяГруппа'; en = 'ItemType'", Локализация));
		ЕдиницаИзмеренияXDTO = xdtoОбъект.Получить(НСтр("ru = 'ЕдиницаИзмерения'; en = 'UnitOfMeasure'", Локализация));
		//НаборУпаковокXDTO = xdtoОбъект.Получить(НСтр("ru = 'НаборУпаковок'; en = 'OwnerIsSetOfPackages'", Локализация));
		КомментарийXDTO = xdtoОбъект.Получить(НСтр("ru = 'Комментарий'; en = 'Comment'", Локализация));
		//МассаXDTO = xdtoОбъект.Получить(НСтр("ru = 'Масса'; en = 'Weight'", Локализация));
		НаименованиеПолноеXDTO = xdtoОбъект.Получить(НСтр("ru = 'НаименованиеПолное'; en = 'LongDescription'", Локализация));
		//ОбъемXDTO = xdtoОбъект.Получить(НСтр("ru = 'Объем'; en = 'Volume'", Локализация));
		ЕдиницаИзмеренияСрокаХраненияXDTO = xdtoОбъект.Получить(НСтр("ru = 'ЕдиницаИзмеренияСрокаХранения'; en = 'UnitOfMeasureForShelfLife'", Локализация));
		СрокХраненияXDTO = xdtoОбъект.Получить(НСтр("ru = 'СрокХранения'; en = 'ShelfLife'", Локализация));
		//ЯвляетсяКомплектомXDTO = xdtoОбъект.Получить(НСтр("ru = 'ЯвляетсяКомплектом'; en = 'IsKit'", Локализация));	
		br_ТипоразмерXDTO = xdtoОбъект.Получить(НСтр("ru = 'Типоразмер'; en = 'Типоразмер'", Локализация));
		ТорговаяМаркаXDTO = xdtoОбъект.Получить(НСтр("ru = 'Бренд'; en = 'Бренд'", Локализация));
		GTINXDTO = xdtoОбъект.Получить(НСтр("ru = 'GTIN'; en = 'GTIN'", Локализация));
	
		новыйОбъект.Артикул = АртикулXDTO;

		новыйОбъект.ВидНоменклатуры = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(ВидНоменклатурыXDTO, "Справочник.ВидыОбъектовХранения", КлассПакета_ВидНоменклатуры, сткСообщение);
		новыйОбъект.ЕдиницаИзмерения = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(ЕдиницаИзмеренияXDTO, "Справочник.ЕдиницыИзмерения", КлассПакета_ЕдиницыИзмерения, сткСообщение);
		//новыйОбъект.НаборУпаковок = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(НаборУпаковокXDTO, "Справочник.НаборыУпаковок", КлассПакета_НаборыУпаковок, сткСообщение);
		новыйОбъект.Комментарий = КомментарийXDTO;
		// Если ЗначениеЗаполнено(МассаXDTO) Тогда
		// 	новыйОбъект.Масса = МассаXDTO * КоэффициентКонвертацииМассы;
		// КонецЕсли;
		новыйОбъект.НаименованиеПолное = НаименованиеПолноеXDTO;
		// Если ЗначениеЗаполнено(ОбъемXDTO) Тогда
		// 	новыйОбъект.Объем = ОбъемXDTO * КоэффициентКонвертацииОбъема;
		// КонецЕсли;
		Если ЕдиницаИзмеренияСрокаХраненияXDTO <> Неопределено Тогда
			Попытка
                новыйОбъект.ЕдиницаИзмеренияСрокаХранения = XMLЗначение(Тип("ПеречислениеСсылка.ЕдиницыИзмеренияВремени"), ЕдиницаИзмеренияСрокаХраненияXDTO);
            Исключение
            КонецПопытки;
		КонецЕсли;
		Если ЗначениеЗаполнено(СрокХраненияXDTO) Тогда
			новыйОбъект.СрокХранения = СрокХраненияXDTO;
		КонецЕсли;
		//новыйОбъект.ЯвляетсяКомплектом = ИнтеграцияСервер.ПолучитьБулево(ЯвляетсяКомплектомXDTO);
		новыйОбъект.br_Типоразмер = br_ТипоразмерXDTO;
		новыйОбъект.ТорговаяМарка = ИнтеграцияСервер.ПолучитьСсылку(ТорговаяМаркаXDTO, "Справочник.ТорговыеМарки", КлассПакета_ТорговыеМарки, сткСообщение);
	КонецЕсли;

	//Запись объекта
	Если НЕ ЭтоГруппа Тогда
   	 новыйОбъект.ДополнительныеСвойства.Вставить("ЗначенияЗаполнения", Новый Структура("GTIN", GTINXDTO));
	КонецЕсли;
    ИнтеграцияСервер.ЗаписатьОбъектВБазуДанных(новыйОбъект, сткСообщение); 
     
	//Упаковки ставим на загрузку при удачной загрузке самой номенклатуры
	Если Не сткСообщение.Отказ И Не ЭтоГруппа Тогда
		текТаблица = xdtoОбъект[НСтр("ru = 'Упаковки'; en = 'ItemPackages'", Локализация)].Последовательность();
		Для Инд = 0 По текТаблица.Количество() - 1 Цикл
			//Поиск объекта
			xdtoСтрока = текТаблица.ПолучитьЗначение(Инд);
			УпаковкаXDTO = xdtoСтрока.Получить(НСтр("ru = 'Упаковка'; en = 'ItemPackage'", Локализация));
			ЛокальныйИдентификатор_Ссылка = ИнтеграцияСервер.ПолучитьЛокальныйИдентификатор(УпаковкаXDTO.Ссылка, КлассПакета_УпаковкаНоменклатуры, сткСообщение.Узел);
			СсылкаНаУпаковку = Справочники.УпаковкиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ЛокальныйИдентификатор_Ссылка));

			новыйОбъектУпаковка = СсылкаНаУпаковку.ПолучитьОбъект();
			Если новыйОбъектУпаковка = Неопределено Тогда
				сткСообщение.СоответствиеНеНайденныхИдентификаторов.Вставить(ЛокальныйИдентификатор_Ссылка, КлассПакета_УпаковкаНоменклатуры);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	//Штрихкоды ставим на загрузку, если загружена номенклатура
    РегистрируемШК = Ложь;
	Если Не сткСообщение.Отказ И Не ЭтоГруппа Тогда
    //++REQ1C-5628
    //Было: 
	// 	новыйНабор = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
	// 	новыйНабор.Отбор.Номенклатура.Установить(новыйОбъект.Ссылка);
    //
	// 	текТаблица = xdtoОбъект[НСтр("ru = 'Штрихкоды'; en = 'Barcodes'", Локализация)].Последовательность();
	// 	Для Инд = 0 По текТаблица.Количество() - 1 Цикл
	// 		xdtoСтрока = текТаблица.ПолучитьЗначение(Инд);
    //
	// 		УпаковкаXDTO = xdtoСтрока.Получить(НСтр("ru = 'Упаковка'; en = 'ItemPackage'", Локализация));
	// 		//ХарактеристикаXDTO = xdtoСтрока.Получить(НСтр("ru = 'Характеристика'; en = 'ItemCharacteristic'", Локализация));
	// 		ШтрихкодXDTO = xdtoСтрока.Получить(НСтр("ru = 'Штрихкод'; en = 'Barcode'", Локализация));
    //
	// 		текСтрока = новыйНабор.Добавить();
	// 		текСтрока.Номенклатура = новыйОбъект.Ссылка;
	// 		текСтрока.УпаковкаНоменклатуры = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(УпаковкаXDTO, "Справочник.УпаковкиНоменклатуры", КлассПакета_УпаковкаНоменклатуры, сткСообщение);
	//		
	// 		текСтрока.Штрихкод = ШтрихкодXDTO;
	// 	КонецЦикла;
    //
	// 	Если Не сткСообщение.Отказ Тогда
	// 		Попытка
	// 			новыйНабор.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина);
	// 			новыйНабор.Записать();
	// 		Исключение
	// 			сткСообщение.Отказ = Истина;
	// 			сткСообщение.СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
	// 		КонецПопытки;
	// 	КонецЕсли; 
        //Стало:
         //++REQ1C-5628
        //Штрихкоды ставим на загрузку, если загружена номенклатура
	    Если Не сткСообщение.Отказ И Не ЭтоГруппа Тогда
            текТаблица = xdtoОбъект[НСтр("ru = 'Штрихкоды'; en = 'Barcodes'", Локализация)].Последовательность();
	 	    Для Инд = 0 По текТаблица.Количество() - 1 Цикл	 		            
                xdtoСтрока = текТаблица.ПолучитьЗначение(Инд); 
                ШтрихкодXDTO = xdtoСтрока.Получить(НСтр("ru = 'Штрихкод'; en = 'Barcode'", Локализация));
                ХарактеристикаXDTO = xdtoСтрока.Получить(НСтр("ru = 'Характеристика'; en = 'ItemCharacteristic'", Локализация));                                                                                
                ПартияXDTO = xdtoСтрока.Получить(НСтр("ru = 'Партия'; en = 'Batch'", Локализация));                                                                                                             
                УпаковкаXDTO = xdtoСтрока.Получить(НСтр("ru = 'Упаковка'; en = 'ItemPackage'", Локализация));
    
                текШтрихкод = ШтрихкодXDTO;
                текХарНом = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(ХарактеристикаXDTO, "Справочник.ХарактеристикиНоменклатуры", КлассПакета_Характеристика, сткСообщение);         
                текПартия = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(ПартияXDTO, "Справочник.ПартииНоменклатуры", КлассПакета_Партия, сткСообщение);                                         
                текУпак = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(УпаковкаXDTO, "Справочник.УпаковкиНоменклатуры", КлассПакета_УпаковкаНоменклатуры, сткСообщение);
            
                новыйНабор = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
                новыйНабор.Отбор.Штрихкод.Установить(ШтрихкодXDTO);
                новыйНабор.Прочитать();
                Если новыйНабор.Количество() Тогда
                    //
                Иначе
                    РегистрируемШК = Истина;
                    //новаяЗапись = новыйНабор.Добавить();
				    //новаяЗапись.Номенклатура = новыйОбъект.Ссылка;	
				    //новаяЗапись.ХарактеристикаНоменклатуры = текХарНом;
                    //новаяЗапись.ПартияНоменклатуры = текПартия;	
				    //новаяЗапись.УпаковкаНоменклатуры = текУпак;	
				    //новаяЗапись.Штрихкод = текШтрихкод;	

	 		        //Попытка
	 		        //    новыйНабор.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина);
	 		        //    новыйНабор.Записать();
		            //Исключение
 			        //    сткСообщение.Отказ = Истина;
 			        //    сткСообщение.СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
 		            //КонецПопытки;

                КонецЕсли;  
            КонецЦикла;
        КонецЕсли;  //--REQ1C-5628     
    //--Закомментировал пока что
        //--REQ1C-5628                       
	КонецЕсли;

	//Дозапрос недостающих данных
	Если сткСообщение.СоответствиеНеНайденныхИдентификаторов.Количество() Тогда
		ИнтеграцияСервер.СформироватьЗапросНаПолучениеДанных(сткСообщение.СоответствиеНеНайденныхИдентификаторов, сткСообщение.Узел);
	КонецЕсли;

    //++REQ1C-5628
    Если Не сткСообщение.Отказ И Не ЭтоГруппа И РегистрируемШК Тогда
        КлассСообщения = 444;
        массивДанныеДляОтправки = Новый Массив;
        массивДанныеДляОтправки.Добавить(Новый Структура("Класс,Номенклатура,ХарактеристикаНоменклатуры,Партия",КлассСообщения,новыйОбъект.Ссылка,Неопределено,Неопределено));
        ИнтеграцияСервер.ПоместитьВОчередьИсходящих(Новый Структура("Данные, Узел", массивДанныеДляОтправки, сткСообщение.Узел), "ЗапросДанных");
    КонецЕсли; //--REQ1C-5628

	СостояниеСообщения = сткСообщение.СостояниеСообщения;
	ТекстОшибки = сткСообщение.ТекстОшибки;
	Задержка = сткСообщение.Задержка;

    ~Выход:;
