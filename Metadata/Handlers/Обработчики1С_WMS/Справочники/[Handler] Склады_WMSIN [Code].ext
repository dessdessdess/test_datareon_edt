	//ИмяТаблицыБазыОбмена=dbo_inBusinessPartner
			
	//Определение переменных
	Локализация = "ru";
	КлассПакета_Контрагент = 5;
	КлассПакета_Адрес = 17;
	КлассПакета_Партнер = 22;
	КлассПакета_Склад = 25;
	КлассПакета_Подразделение = 24;
	КлассПакета_Организация = 23;
    КлассПакета_ВидКонтактнойИнформации = 31;

	сткСообщение = Новый Структура("СостояниеСообщения, ТекстОшибки, КоличествоПопытокОжидания, Задержка, Отказ, Узел, СоответствиеНеНайденныхИдентификаторов", 
                                    СостояниеСообщения, ТекстОшибки, КоличествоПопытокОжидания(), Задержка, Ложь, ИсточникСообщения(), Новый Соответствие);
	
	//Получение тела сообщения
	xdtoОбъект = сшпОбщегоНазначения.ПолучитьОбъектXDTO(Перечисления.сшпФорматыСообщений.JSON, ТелоСообщения());

	//Получение полей
	СсылкаXDTO = xdtoОбъект.Получить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация));
	ДатаРегистрацииXDTO = xdtoОбъект.Получить(НСтр("ru = 'ДатаРегистрации'; en = 'RegistrationDate'", Локализация));
	ПометкаУдаленияXDTO = xdtoОбъект.Получить(НСтр("ru = 'ПометкаУдаления'; en = 'DeletionMark'", Локализация));
	//РодительXDTO = xdtoОбъект.Получить(НСтр("ru = 'Родитель'; en = 'Parent'", Локализация));
	НаименованиеXDTO = xdtoОбъект.Получить(НСтр("ru = 'Наименование'; en = 'Description'", Локализация));
	КодXDTO = xdtoОбъект.Получить(НСтр("ru = 'Код'; en = 'Code'", Локализация));
	//ОсновнойАдресДоставкиXDTO = xdtoОбъект.Получить(НСтр("ru = 'ОсновнойАдресДоставки'; en = 'PrimaryDeliveryAddress'", Локализация));
	//БанковскиеРеквизитыXDTO = xdtoОбъект.Получить(НСтр("ru = 'БанковскиеРеквизиты'; en = 'BankAttributes'", Локализация));
	//ВидКонтрагентаXDTO = xdtoОбъект.Получить(НСтр("ru = 'ВидКонтрагента'; en = 'BusinessPartnerType'", Локализация));
	ИННXDTO = xdtoОбъект.Получить(НСтр("ru = 'ИНН'; en = 'TIN'", Локализация));
	КППXDTO = xdtoОбъект.Получить(НСтр("ru = 'КПП'; en = 'TRRC'", Локализация));
	НаименованиеПолноеXDTO = xdtoОбъект.Получить(НСтр("ru = 'НаименованиеПолное'; en = 'LongDescription'", Локализация));
	//КомментарийXDTO = xdtoОбъект.Получить(НСтр("ru = 'Комментарий'; en = 'Comment'", Локализация));
	//НаименованиеEnXDTO = xdtoОбъект.Получить(НСтр("ru = 'НаименованиеEn'; en = 'DescriptionEn'", Локализация));
	//ОКПОXDTO = xdtoОбъект.Получить(НСтр("ru = 'ОКПО'; en = 'NCBO'", Локализация));
	
    ОрганизацияXDTO = xdtoОбъект.Получить(НСтр("ru = 'ЯвляетсяОрганизацией'; en = 'IsOwner'", Локализация));
	ПокупательXDTO = xdtoОбъект.Получить(НСтр("ru = 'ЯвляетсяПокупателем'; en = 'IsCustomer'", Локализация));
	ПоставщикXDTO = xdtoОбъект.Получить(НСтр("ru = 'ЯвляетсяПоставщиком'; en = 'IsSupplier'", Локализация));
	СкладXDTO = xdtoОбъект.Получить(НСтр("ru = 'ЯвляетсяСкладом'; en = 'IsWarehouse'", Локализация));
	//ПодразделениеXDTO = xdtoОбъект.Получить(НСтр("ru = 'ЯвляетсяПодразделением'; en = 'IsDepartment'", Локализация));
    //ПеревозчикXDTO = xdtoОбъект.Получить(НСтр("ru = 'ЯвляетсяПеревозчиком'; en = 'Carrier'", Локализация));
	
	//Поиск объекта
	ЛокальныйИдентификатор_Ссылка = ИнтеграцияСервер.ПолучитьЛокальныйИдентификатор(СсылкаXDTO, КлассПакета_Контрагент, сткСообщение.Узел);
	СсылкаНаЭлемент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ЛокальныйИдентификатор_Ссылка));

	новыйОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
	Если новыйОбъект = Неопределено Тогда
		новыйОбъект = Справочники.Контрагенты.СоздатьЭлемент();
		новыйОбъект.УстановитьСсылкуНового(СсылкаНаЭлемент);
		новыйОбъект.ДатаЗагрузки = ИнтеграцияСервер.ПолучитьДату(ДатаРегистрацииXDTO);
	Иначе
		ДатаЗагрузки = ИнтеграцияСервер.ПолучитьДату(ДатаРегистрацииXDTO);
		Если новыйОбъект.ДатаЗагрузки > ДатаЗагрузки Тогда
			СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОбработкаОтменена;
			Перейти ~Выход;
		Иначе
			новыйОбъект.ДатаЗагрузки = ДатаЗагрузки;
		КонецЕсли;	
	КонецЕсли;
	
	//Реквизиты шапки
	новыйОбъект.ПометкаУдаления = ИнтеграцияСервер.ПолучитьБулево(ПометкаУдаленияXDTO);
	новыйОбъект.Организация = ИнтеграцияСервер.ПолучитьБулево(ОрганизацияXDTO, новыйОбъект.Организация);
	новыйОбъект.Покупатель = ИнтеграцияСервер.ПолучитьБулево(ПокупательXDTO, новыйОбъект.Покупатель);
	новыйОбъект.Поставщик = ИнтеграцияСервер.ПолучитьБулево(ПоставщикXDTO, новыйОбъект.Поставщик);
	новыйОбъект.Склад = ИнтеграцияСервер.ПолучитьБулево(СкладXDTO, новыйОбъект.Склад);
	//новыйОбъект.Подразделение = ИнтеграцияСервер.ПолучитьБулево(ПодразделениеXDTO, новыйОбъект.Подразделение);
	
	Если новыйОбъект.Склад Тогда
		КлассРодителя = КлассПакета_Склад;
	ИначеЕсли новыйОбъект.Организация Тогда
		КлассРодителя = КлассПакета_Организация;
	//ИначеЕсли новыйОбъект.Подразделение Тогда	
	//	КлассРодителя = КлассПакета_Подразделение;
	Иначе
		КлассРодителя = КлассПакета_Партнер;
	КонецЕсли;		
		
	//новыйОбъект.Родитель = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(РодительXDTO, "Справочник.Контрагенты", КлассРодителя, сткСообщение);
	новыйОбъект.Наименование = НаименованиеXDTO;
	новыйОбъект.Код = КодXDTO;
	//новыйОбъект.ОсновнойАдресДоставки = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(ОсновнойАдресДоставкиXDTO, "Справочник.АдресаДоставки", КлассПакета_Адрес, сткСообщение);
	//Если ЗначениеЗаполнено(БанковскиеРеквизитыXDTO) Тогда
	//	новыйОбъект.БанковскиеРеквизиты = БанковскиеРеквизитыXDTO;
	//КонецЕсли;
	
	//ВидКонтрагента
	// Значение = ВидКонтрагентаXDTO.Ссылка;
	// Если Значение = "ЮрЛицо" Или Не ЗначениеЗаполнено(Значение)  Тогда
	// 	новыйОбъект.ВидКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	// ИначеЕсли Значение = "ФизЛицо" Или Значение = "ЧастноеЛицо" Тогда
	// 	новыйОбъект.ВидКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	// ИначеЕсли Значение = "ЮрЛицоНеРезидент" Тогда
	// 	новыйОбъект.ВидКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицоНеРезидент;
	// ИначеЕсли Значение = "ИндивидуальныйПредприниматель" Тогда
	// 	новыйОбъект.ВидКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ИндивидуальныйПредприниматель;
	// Иначе
	// 	Попытка
	// 		новыйОбъект.ВидКонтрагента = XMLЗначение(Тип("ПеречислениеСсылка.ЮридическоеФизическоеЛицо"), Значение);
	// 	Исключение
	// 		новыйОбъект.ВидКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	// 	КонецПопытки;
	// КонецЕсли;

	Если ЗначениеЗаполнено(ИННXDTO) Тогда
		новыйОбъект.ИНН = ИННXDTO;
	КонецЕсли;
	Если ЗначениеЗаполнено(КППXDTO) Тогда
		новыйОбъект.КПП = КППXDTO;
	КонецЕсли;
	новыйОбъект.НаименованиеПолное = НаименованиеПолноеXDTO;
	//новыйОбъект.Комментарий = КомментарийXDTO;
	// Если ЗначениеЗаполнено(НаименованиеEnXDTO) Тогда
	// 	новыйОбъект.НаименованиеEn = НаименованиеEnXDTO;
	// КонецЕсли;
	// Если ЗначениеЗаполнено(ОКПОXDTO) Тогда
	// 	новыйОбъект.ОКПО = ОКПОXDTO;
	// КонецЕсли;

    //текТаблица = xdtoОбъект[НСтр("ru = 'КонтактнаяИнформация'; en = 'ContactInformation'", Локализация)].Последовательность();
	// новыйОбъект.КонтактнаяИнформация.Очистить();
	// Для Инд = 0 По текТаблица.Количество() - 1 Цикл
	// 	//Поиск объекта
	// 	текСтрока = новыйОбъект.КонтактнаяИнформация.Добавить();	
	// 	xdtoСтрока = текТаблица.ПолучитьЗначение(Инд);
	// 	ВидXDTO = xdtoСтрока.Получить(НСтр("ru = 'Вид'; en = 'Kind'", Локализация));
    //     ВидXDTOСсылка = ВидXDTO.Ссылка;
	// 	ПредставлениеXDTO = xdtoСтрока.Получить(НСтр("ru = 'Представление'; en = 'Presentation'", Локализация));
	// 	Попытка
	// 		ВидСсылка = Справочники.ВидыКонтактнойИнформации[ВидXDTOСсылка];
	// 	Исключение	
	// 		ВидСсылка = Неопределено;
	// 	КонецПопытки;
	// 	Если Не ЗначениеЗаполнено(ВидСсылка) Тогда
	// 		Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ВидXDTOСсылка) Тогда
	// 			ВидСсылка = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(ВидXDTO, "Справочник.ВидыКонтактнойИнформации", КлассПакета_ВидКонтактнойИнформации, сткСообщение);
	// 		Иначе	
	// 			ВидСсылка = ИнтеграцияСервер.ПолучитьЛокальныйИдентификатор(ВидXDTOСсылка, КлассПакета_ВидКонтактнойИнформации, сткСообщение.Узел);
	// 		КонецЕсли;	
	// 	КонецЕсли;	
	// 	Если ЗначениеЗаполнено(ВидСсылка) Тогда
	// 		текСтрока.Вид = ВидСсылка;
	// 		текСтрока.Тип = текСтрока.Вид.тип;
	// 	КонецЕсли;
	// 	текСтрока.Представление = ПредставлениеXDTO;	
	// КонецЦикла;

	//Дозапрос недостающих данных
	Если сткСообщение.СоответствиеНеНайденныхИдентификаторов.Количество() Тогда
		ИнтеграцияСервер.СформироватьЗапросНаПолучениеДанных(сткСообщение.СоответствиеНеНайденныхИдентификаторов, сткСообщение.Узел);
	КонецЕсли;

	//Запись объекта
	ИнтеграцияСервер.ЗаписатьОбъектВБазуДанных(новыйОбъект, сткСообщение);

	СостояниеСообщения = сткСообщение.СостояниеСообщения;
	ТекстОшибки = сткСообщение.ТекстОшибки;
	Задержка = сткСообщение.Задержка;

    ~Выход:;