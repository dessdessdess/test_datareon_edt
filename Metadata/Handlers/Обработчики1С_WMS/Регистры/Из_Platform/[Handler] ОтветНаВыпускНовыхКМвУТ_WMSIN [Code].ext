	//ИмяТаблицыБазыОбмена=dbo_inItem
	
	//Определение переменных
	Локализация = "ru";
	КлассПакета_Номенклатура = 3;
	КлассПакета_Характеристика = 13;
	КлассПакета_Организация = 23;
	
	сткСообщение = Новый Структура("СостояниеСообщения, ТекстОшибки, КоличествоПопытокОжидания, Задержка, Отказ, Узел, СоответствиеНеНайденныхИдентификаторов",
	СостояниеСообщения, ТекстОшибки, КоличествоПопытокОжидания(), Задержка, Ложь, ИсточникСообщения(), Новый Соответствие);
	
	//Получение тела сообщения
	xdtoОбъект = сшпОбщегоНазначения.ПолучитьОбъектXDTO(Перечисления.сшпФорматыСообщений.JSON, ТелоСообщения());
	
	//Получение значений полей
	ТипXDTO = xdtoОбъект.Получить(НСтр("ru = 'Тип'; en = 'Тип'", Локализация));  
	НоменклатураXDTO = xdtoОбъект.Получить(НСтр("ru = 'Номенклатура'; en = 'Номенклатура'", Локализация));
	КМXDTO = xdtoОбъект.Получить(НСтр("ru = 'КМ'; en = 'КМ'", Локализация));
	МХXDTO = xdtoОбъект.Получить(НСтр("ru = 'МХ'; en = 'МХ'", Локализация));  
	
	ЛокальныйИдентификатор_Ссылка = ИнтеграцияСервер.ПолучитьЛокальныйИдентификатор(НоменклатураXDTO, КлассПакета_Номенклатура, сткСообщение.Узел);
	СсылкаНаНоменклатуру = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ЛокальныйИдентификатор_Ссылка));
	
	ОрганизацияXDTO = Неопределено;
	ХарактеристикаXDTO = Неопределено;
	
	Свойства = xdtoОбъект.Свойства();
	Если Свойства.Получить(НСтр("ru = 'Характеристика'; en = 'ItemCharacteristic'", Локализация)) <> Неопределено Тогда
		ХарактеристикаXDTO = xdtoОбъект.Получить(НСтр("ru = 'Характеристика'; en = 'ItemCharacteristic'", Локализация));
	КонецЕсли;
	Если Свойства.Получить(НСтр("ru = 'Организация'; en = 'Owner'", Локализация)) <> Неопределено Тогда
		ОрганизацияXDTO = xdtoОбъект.Получить(НСтр("ru = 'Организация'; en = 'Owner'", Локализация));
	КонецЕсли;
	
	ХарактеристикаНоменклатуры = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(ХарактеристикаXDTO, "Справочник.ХарактеристикиНоменклатуры", КлассПакета_Характеристика, сткСообщение);
	Организация = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(ОрганизацияXDTO, "Справочник.Контрагенты", КлассПакета_Организация, сткСообщение);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбъектыХранения.Ссылка КАК ОбъектХранения
	|ИЗ
	|	Справочник.ОбъектыХранения КАК ОбъектыХранения
	|ГДЕ
	|	ОбъектыХранения.Номенклатура = &Номенклатура
	|	И ОбъектыХранения.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|	И ОбъектыХранения.Организация = &Организация";
	Запрос.УстановитьПараметр("Номенклатура", СсылкаНаНоменклатуру);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	МХ = Неопределено;
	Если ЗначениеЗаполнено(МХXDTO) Тогда   
		МХ = Справочники.МестаХранения.НайтиПоКоду(МХXDTO);	
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
		ОбъектХранения = Выборка.ОбъектХранения;
		
		Ошибка = ""; 
		
		Если КМXDTO <> Неопределено И КМXDTO <> "" Тогда     
			
			СерийныеНомера = СерийныеНомераИАгрегации.СформироватьТаблицуСерийныхНомеров();
			текТаблицаСН = КМXDTO.Последовательность();
			Если текТаблицаСН.Количество() Тогда
				Для Инд = 0 По текТаблицаСН.Количество() - 1 Цикл 
					xdtoСтрокаСН = текТаблицаСН.ПолучитьЗначение(Инд);
					НомерСНXDTO_64 = xdtoСтрокаСН.Получить(НСтр("ru = 'Номер';
					|bg = 'СН';
					|en = 'SN'", Локализация));
					НомерСНXDTO = ПолучитьСтрокуИзДвоичныхДанных(Base64Значение(НомерСНXDTO_64));
					НомерСНXDTO  = СтрЗаменить(НомерСНXDTO,"\u001D","[Ф29]");
					ПозицияНачала = 1;
					Позиция = НайтиНедопустимыеСимволыXML(НомерСНXDTO, ПозицияНачала);
					Пока Позиция > 0 Цикл
						НедопустимыйСимвол = Сред(НомерСНXDTO  , Позиция, 1);  
						СимволЗамены = "[Ф"+ КодСимвола(НедопустимыйСимвол) + "]";
						НомерСНXDTO = СтрЗаменить(НомерСНXDTO, НедопустимыйСимвол, СимволЗамены);
						ПозицияНачала = Позиция + СтрДлина(СимволЗамены);
						Если ПозицияНачала > СтрДлина(НомерСНXDTO) Тогда
							Прервать;
						КонецЕсли;
						Позиция = НайтиНедопустимыеСимволыXML(НомерСНXDTO, ПозицияНачала);
					КонецЦикла;
					
					//НомерСНXDTO  = СтрЗаменить(НомерСНXDTO,"\","");
					СтрокаСН = СерийныеНомера.Добавить();
					СтрокаСН.Штрихкод = НомерСНXDTO;
					СтрокаСН.СерийныйНомер = НомерСНXDTO;
					СтрокаСН.ОбъектХранения = ОбъектХранения;  
					СтрокаСН.МестоХранения = МХ; 
					
					ДанныеИзШтрихкода = ТСДРазборСтруктурногоШтрихкода.НайтиИРазобратьСтруктурныйШтрихкод(НомерСНXDTO, Перечисления.ТипыОбъектовДляПечатиЭтикеток.ОбъектыХранения);
					Если ЗначениеЗаполнено(ДанныеИзШтрихкода) Тогда
						ДанныеИзШтрихкода = ТСДРазборСтруктурногоШтрихкода.ПолучитьДанныеИзСтруктурногоШКДляТСД(ДанныеИзШтрихкода)
					КонецЕсли;                                                                                                    
					Если ЗначениеЗаполнено(ДанныеИзШтрихкода) Тогда 
						Если ДанныеИзШтрихкода.ПолученныеДанные.Свойство("Упаковка") Тогда
							СтрокаСН.Упаковка = ДанныеИзШтрихкода.ПолученныеДанные.Упаковка;  
						КонецЕсли;
						Если ДанныеИзШтрихкода.ПолученныеДанные.Свойство("Партия") Тогда
							СтрокаСН.Партия = ДанныеИзШтрихкода.ПолученныеДанные.Партия; 
						КонецЕсли;
						Если ДанныеИзШтрихкода.ПолученныеДанные.Свойство("СерийныйНомер") Тогда
							СтрокаСН.СерийныйНомер = ДанныеИзШтрихкода.ПолученныеДанные.СерийныйНомер;
						КонецЕсли;
						Если ДанныеИзШтрихкода.ПолученныеДанные.Свойство("Количество") Тогда
							СтрокаСН.Количество = ДанныеИзШтрихкода.ПолученныеДанные.Количество;
						КонецЕсли;			  
					КонецЕсли;
					СерийныйНомер = ?(ЗначениеЗаполнено(СтрокаСН.СерийныйНомер),СтрокаСН.СерийныйНомер,НомерСНXDTO);
				КонецЦикла;
				СерийныеНомера =  СерийныеНомераИАгрегации.ДополнитьДанныеСерийногоУчета(СерийныеНомера);
				//удалить строки на остатках с/н
				искСтрокиКУдалению = СерийныеНомера.НайтиСтроки(Новый Структура("СтрокаОстаткаЕстьЗапись",Истина));
				Для Каждого искСтрока Из искСтрокиКУдалению Цикл
					СерийныеНомера.Удалить(искСтрока);
				КонецЦикла;
				Если СерийныеНомера.Количество() Тогда 	
					ДанныеСерийногоУчета = Новый Структура("СерийныеНомера, Агрегации", СерийныеНомера); 
					Уведомление = ЗадачиСерийногоУчета.СоздатьУведомлениеСерийногоУчета(, СерийныйНомер, ОбъектХранения, Истина, Справочники.ТипыОпераций.brnx_РегистрацияСерийногоНомера);  
					ЗадачиСерийногоУчета.СформироватьДвиженияПриемки(Уведомление, ДанныеСерийногоУчета);
				КонецЕсли;
			КонецЕсли;  
		КонецЕсли; 
	КонецЕсли;
