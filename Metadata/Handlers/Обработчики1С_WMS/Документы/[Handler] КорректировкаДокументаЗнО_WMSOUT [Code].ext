	//Определение переменных
	Локализация = "ru";
	КлассПакета_Отгрузка = 51;
	КлассПакета_ТипОтгрузки = 15;
	КлассПакета_Контрагент = 5;
	КлассПакета_ВидДоставки = 6;
	КлассПакета_Договор = 7;
	КлассПакета_Номенклатура = 3;
	КлассПакета_УпаковкаНоменклатуры = 10;
	КлассПакета_Партия = 11;
	КлассПакета_Состояния = 12;
	КлассПакета_Характеристика = 13;
	КлассПакета_Спецификация = 14;
	КлассПакета_ЕдиницыИзмерения = 4;

	Если СкладскиеЗадачиСервер.ЭтоСсылкаСкладскойЗадачи(ОбъектОбработки) Тогда
		ОбъектОбработкиДокумент = ОбъектОбработки.ДокументОснование;
	Иначе
		ОбъектОбработкиДокумент = ОбъектОбработки;	
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ОбъектОбработкиДокумент) ИЛИ ТипЗнч(ОбъектОбработкиДокумент) <> Тип("ДокументСсылка.ЗаказНаОтгрузку") Тогда
		СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОбработкаОтменена;
		ТекстОшибки = НСтр("ru = 'Некорректный объект обработки'", "ru");
		Перейти ~Выход;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", ОбъектОбработкиДокумент);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПланФактОтгрузкиДвижения.ОбъектХранения КАК ОбъектХранения,
	               |	ПланФактОтгрузкиДвижения.Состояние КАК Состояние,
	               |	ПланФактОтгрузкиДвижения.Партия КАК Партия,
	               |	-1*(ПланФактОтгрузкиДвижения.План - ПланФактОтгрузкиДвижения.ПланНачальный) КАК Факт,
	               |	ПланФактОтгрузкиДвижения.ОбъектХранения.УпаковкаБазовая КАК Упаковка,
	               |	ПланФактОтгрузкиДвижения.ПричинаКорректировки КАК ПричинаКорректировки,
	               |	ПланФактОтгрузкиДвижения.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
	               |	ПланФактОтгрузкиДвижения.КонфигурацияУпаковок КАК КонфигурацияУпаковок,
			|	isnull(ПланФактОтгрузкиДвижения.АналитикаПодбораПартии.НомерПартии, ЕСТЬNULL(ПланФактОтгрузкиДвижения.Партия.Код, """")) КАК НомерПартии,
			|	isnull(ПланФактОтгрузкиДвижения.АналитикаПодбораПартии.СрокГодности, ЕСТЬNULL(ПланФактОтгрузкиДвижения.Партия.СрокГодности, ДАТАВРЕМЯ(1,1,1))) КАК СрокГодности
	               |ИЗ
	               |	РегистрСведений.ПланФактОтгрузкиДвижения КАК ПланФактОтгрузкиДвижения
	               |ГДЕ
	               |	ПланФактОтгрузкиДвижения.ЗаказНаОтгрузку = &Документ
	               |	И ПланФактОтгрузкиДвижения.ПричинаКорректировки <> ЗНАЧЕНИЕ(Справочник.ПричиныКорректировок.ПустаяСсылка)
	               |	И (ПланФактОтгрузкиДвижения.План - ПланФактОтгрузкиДвижения.ПланНачальный) < 0
	               |"; 
	ТаблицаФакта = Запрос.Выполнить().Выгрузить();

	ФактОтгрузки = КонвертацияДокументов.РаспределитьФактПоПлану(ТаблицаФакта, "ЗаказНаОтгрузку", Ложь);
	ТЗПланов = ФактОтгрузки.Скопировать(, "План, ЗаказНаОтгрузку");
	ТЗПланов.Свернуть("План, ЗаказНаОтгрузку");
	сткПоиска = Новый Структура("План, ЗаказНаОтгрузку");
    МассивОбъектов = Новый Массив;
	Счетчик = 1;
	Для Каждого СтрокаПлана Из ТЗПланов Цикл
		СостояниеДокумента = СтатусыДокументовСервер.ПолноеСостояниеДокументаПоСсылке(СтрокаПлана.ЗаказНаОтгрузку);
		ДатаДокумента = СостояниеДокумента.ДатаИзменения;
		СтатусДокумента = СостояниеДокумента.Статус;
		ИдентификаторПлана = ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(СтрокаПлана.План, КлассПакета_Отгрузка);
		Данные = Новый Структура;
		мсвТаблица = Новый Массив;
		
    //Основные данные документа
            СтруктураДанные = Новый Структура;
            //СтруктураДанные.Вставить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация), ИнтеграцияСервер.СложитьИдентификаторы(ИдентификаторПлана, СтрокаПлана.ЗаказНаОтгрузку));
            СтруктураДанные.Вставить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация), ИдентификаторПлана);
            СтруктураДанные.Вставить(НСтр("ru = 'Проведен'; en = 'Posted'", Локализация), СтрокаПлана.ЗаказНаОтгрузку.Проведен);
            СтруктураДанные.Вставить(НСтр("ru = 'ПометкаУдаления'; en = 'DeletionMark'", Локализация), СтрокаПлана.ЗаказНаОтгрузку.ПометкаУдаления);
            СтруктураДанные.Вставить(НСтр("ru = 'Номер'; en = 'Number'", Локализация), СтрокаПлана.ЗаказНаОтгрузку.Номер);
            СтруктураДанные.Вставить(НСтр("ru = 'Дата'; en = 'Date'", Локализация), СтрокаПлана.ЗаказНаОтгрузку.Дата);
            СтруктураДанные.Вставить(НСтр("ru = 'ТипДокумента'; en = 'DocumentType'", Локализация), "ЗаказНаОтгрузку");
                СтруктураСтатус = Новый Структура;
                СтруктураСтатус.Вставить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация), СтатусДокумента.ИмяПредопределенныхДанных);
                СтруктураСтатус.Вставить(НСтр("ru = 'Наименование'; en = 'Description'", Локализация), СокрЛП(СтатусДокумента));
                СтруктураСтатус.Вставить(НСтр("ru = 'Код'; en = 'Code'", Локализация), СокрЛП(СтатусДокумента));
                СтруктураСтатус.Вставить(НСтр("ru = 'ЭтоГруппа'; en = 'IsGroup'", Локализация), Ложь);
            СтруктураДанные.Вставить(НСтр("ru = 'Статус'; en = 'Status'", Локализация), СтруктураСтатус);
        Данные.Вставить(НСтр("ru = 'Данные'; en = 'Data'", Локализация), СтруктураДанные);
    //Плановая дата выполнения
        Если ЗначениеЗаполнено(СтрокаПлана.ЗаказНаОтгрузку.ВремяОтгрузки) Тогда
            Данные.Вставить(НСтр("ru = 'ПлановаяДатаВыполнения'; en = 'ScheduledExecutionDate'", Локализация), СтрокаПлана.ЗаказНаОтгрузку.ВремяОтгрузки);
        ИначеЕсли ЗначениеЗаполнено(СтрокаПлана.ЗаказНаОтгрузку.ДатаОтгрузки) Тогда
            Данные.Вставить(НСтр("ru = 'ПлановаяДатаВыполнения'; en = 'ScheduledExecutionDate'", Локализация), СтрокаПлана.ЗаказНаОтгрузку.ДатаОтгрузки);
        Иначе
            Данные.Вставить(НСтр("ru = 'ПлановаяДатаВыполнения'; en = 'ScheduledExecutionDate'", Локализация), ТекущаяДата());
        КонецЕсли;
    //Класс	
        Данные.Вставить(НСтр("ru = 'Класс'; en = 'Class'", Локализация), "ЗаказНаОтгрузку");
    //Тип	
            СтруктураТип = Новый Структура;
            СтруктураТип.Вставить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация), ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(СтрокаПлана.ЗаказНаОтгрузку.ТипОтгрузки, КлассПакета_ТипОтгрузки));
            СтруктураТип.Вставить(НСтр("ru = 'Наименование'; en = 'Description'", Локализация), СокрЛП(СтрокаПлана.ЗаказНаОтгрузку.ТипОтгрузки));
            СтруктураТип.Вставить(НСтр("ru = 'Код'; en = 'Code'", Локализация), СокрЛП(СтрокаПлана.ЗаказНаОтгрузку.ТипОтгрузки));
            СтруктураТип.Вставить(НСтр("ru = 'ЭтоГруппа'; en = 'IsGroup'", Локализация), Ложь); 
        Данные.Вставить(НСтр("ru = 'Тип'; en = 'Type'", Локализация), СтруктураТип);
    //Отправитель
            СтруктураОтправитель = Новый Структура;
                СтруктураКонтрагент = Новый Структура;
                СтруктураКонтрагент.Вставить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация), ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(НСтр("ru = 'Склад'; en = 'Warehouse'; bg = 'Склад'"), 0));
                СтруктураКонтрагент.Вставить(НСтр("ru = 'Наименование'; en = 'Description'", Локализация), "");
                СтруктураКонтрагент.Вставить(НСтр("ru = 'Код'; en = 'Code'", Локализация), "");
                СтруктураКонтрагент.Вставить(НСтр("ru = 'ЭтоГруппа'; en = 'IsGroup'", Локализация), Ложь);
            СтруктураОтправитель.Вставить(НСтр("ru = 'Контрагент'; en = 'BusinessPartner'", Локализация), СтруктураКонтрагент);
            СтруктураОтправитель.Вставить(НСтр("ru = 'Тип'; en = 'Type'", Локализация), "Склад"); 
            СтруктураОтправитель.Вставить(НСтр("ru = 'Договор'; en = 'Type'", Локализация), Неопределено); 
            СтруктураОтправитель.Вставить(НСтр("ru = 'Адрес'; en = 'Address'", Локализация), Неопределено);
        Данные.Вставить(НСтр("ru = 'Отправитель'; en = 'Sender'", Локализация), СтруктураОтправитель);    
    //Получатель    
            СтруктураПолучатель = Новый Структура;
                СтруктураКонтрагент = Новый Структура;
                СтруктураКонтрагент.Вставить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация), ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(СтрокаПлана.ЗаказНаОтгрузку.Контрагент, КлассПакета_Контрагент));
                СтруктураКонтрагент.Вставить(НСтр("ru = 'Наименование'; en = 'Description'", Локализация), СтрокаПлана.ЗаказНаОтгрузку.Контрагент.Наименование);
                СтруктураКонтрагент.Вставить(НСтр("ru = 'Код'; en = 'Code'", Локализация), СтрокаПлана.ЗаказНаОтгрузку.Контрагент.Код);
                СтруктураКонтрагент.Вставить(НСтр("ru = 'ЭтоГруппа'; en = 'IsGroup'", Локализация), СтрокаПлана.ЗаказНаОтгрузку.Контрагент.ЭтоГруппа);
            СтруктураПолучатель.Вставить(НСтр("ru = 'Контрагент'; en = 'BusinessPartner'", Локализация), СтруктураКонтрагент);
                Если СтрокаПлана.ЗаказНаОтгрузку.Контрагент.Склад Тогда
                    ТипПолучателя = "Склад";
                ИначеЕсли СтрокаПлана.ЗаказНаОтгрузку.Контрагент.Подразделение Тогда	
                    ТипПолучателя = "Подразделение";
                Иначе
                    ТипПолучателя = "Контрагент";
                КонецЕсли;
            СтруктураПолучатель.Вставить(НСтр("ru = 'Тип'; en = 'Type'", Локализация), ТипПолучателя); 
                СтруктураДоговор = Новый Структура;
                СтруктураДоговор.Вставить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация), ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(СтрокаПлана.ЗаказНаОтгрузку.Договор, КлассПакета_Договор));
                СтруктураДоговор.Вставить(НСтр("ru = 'Наименование'; en = 'Description'", Локализация), СтрокаПлана.ЗаказНаОтгрузку.Договор.Наименование);
                СтруктураДоговор.Вставить(НСтр("ru = 'Код'; en = 'Code'", Локализация), СтрокаПлана.ЗаказНаОтгрузку.Договор.Код);
                СтруктураДоговор.Вставить(НСтр("ru = 'ЭтоГруппа'; en = 'IsGroup'", Локализация), СтрокаПлана.ЗаказНаОтгрузку.Договор.ЭтоГруппа); 
            СтруктураПолучатель.Вставить(НСтр("ru = 'Договор'; en = 'Type'", Локализация), СтруктураДоговор); 
            СтруктураПолучатель.Вставить(НСтр("ru = 'Адрес'; en = 'Address'", Локализация), "");
        Данные.Вставить(НСтр("ru = 'Получатель'; en = 'Recipient'", Локализация), СтруктураПолучатель);
    //Рейс
        Данные.Вставить(НСтр("ru = 'Рейс'; en = 'Delivery'", Локализация), Неопределено);
    //Комментарий
        Данные.Вставить(НСтр("ru = 'Комментарий'; en = 'Comment'", Локализация), СтрокаПлана.ЗаказНаОтгрузку.Комментарий);
    //Организация
            СтруктураОрганизация = Новый Структура;
            СтруктураОрганизация.Вставить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация), ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(СтрокаПлана.ЗаказНаОтгрузку.Организация, КлассПакета_Контрагент));
            СтруктураОрганизация.Вставить(НСтр("ru = 'Наименование'; en = 'Description'", Локализация), СтрокаПлана.ЗаказНаОтгрузку.Организация.Наименование);
            СтруктураОрганизация.Вставить(НСтр("ru = 'Код'; en = 'Code'", Локализация), СтрокаПлана.ЗаказНаОтгрузку.Организация.Код);
            СтруктураОрганизация.Вставить(НСтр("ru = 'ЭтоГруппа'; en = 'IsGroup'", Локализация), СтрокаПлана.ЗаказНаОтгрузку.Организация.ЭтоГруппа); 
        Данные.Вставить(НСтр("ru = 'Организация'; en = 'Owner'", Локализация), СтруктураОрганизация);
    //Приоритет
            СтруктураПриоритет = Новый Структура;
            СтруктураПриоритет.Вставить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация), ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(XMLСтрока(СтрокаПлана.ЗаказНаОтгрузку.Приоритет), 0));
            СтруктураПриоритет.Вставить(НСтр("ru = 'Наименование'; en = 'Description'", Локализация), Строка(СтрокаПлана.ЗаказНаОтгрузку.Приоритет));
            СтруктураПриоритет.Вставить(НСтр("ru = 'Код'; en = 'Code'", Локализация), Строка(СтрокаПлана.ЗаказНаОтгрузку.Приоритет));
            СтруктураПриоритет.Вставить(НСтр("ru = 'ЭтоГруппа'; en = 'IsGroup'", Локализация), Ложь); 
        Данные.Вставить(НСтр("ru = 'Приоритет'; en = 'Priority'", Локализация), СтруктураПриоритет);
    //Транспортное средство  
        Данные.Вставить(НСтр("ru = 'ТранспортноеСредство'; en = 'Vehicle'", Локализация), Неопределено);
    //Водитель     
        Данные.Вставить(НСтр("ru = 'Водитель'; en = 'Driver'", Локализация), Неопределено);
    //Вид доставки
            СтруктураВидДоставки = Новый Структура;
            СтруктураВидДоставки.Вставить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация), ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(СтрокаПлана.ЗаказНаОтгрузку.ВидДоставки, КлассПакета_ВидДоставки));
            СтруктураВидДоставки.Вставить(НСтр("ru = 'Наименование'; en = 'Description'", Локализация), СокрЛП(СтрокаПлана.ЗаказНаОтгрузку.ВидДоставки));
            СтруктураВидДоставки.Вставить(НСтр("ru = 'Код'; en = 'Code'", Локализация), СокрЛП(СтрокаПлана.ЗаказНаОтгрузку.ВидДоставки));
            СтруктураВидДоставки.Вставить(НСтр("ru = 'ЭтоГруппа'; en = 'IsGroup'", Локализация), Ложь); 
        Данные.Вставить(НСтр("ru = 'ВидДоставки'; en = 'DeliveryType'", Локализация), СтруктураВидДоставки);
    //Дата регистрации
        Данные.Вставить(НСтр("ru = 'ДатаРегистрации'; en = 'RegistrationDate'", Локализация), ДатаРегистрации);
    //Документ основание
            СтруктураДО = Новый Структура;
            СтруктураДО.Вставить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация), ИдентификаторПлана);
            СтруктураДО.Вставить(НСтр("ru = 'Проведен'; en = 'Posted'", Локализация), СтрокаПлана.План.Проведен);
            СтруктураДО.Вставить(НСтр("ru = 'ПометкаУдаления'; en = 'DeletionMark'", Локализация), СтрокаПлана.План.ПометкаУдаления);
            СтруктураДО.Вставить(НСтр("ru = 'Номер'; en = 'Number'", Локализация), СтрокаПлана.План.Номер);
            СтруктураДО.Вставить(НСтр("ru = 'Дата'; en = 'Date'", Локализация), СтрокаПлана.План.Дата);
            СтруктураДО.Вставить(НСтр("ru = 'ТипДокумента'; en = 'DocumentType'", Локализация), "ПланОтгрузки");
            СтруктураДО.Вставить(НСтр("ru = 'Статус'; en = 'Status'", Локализация), Неопределено);
        Данные.Вставить(НСтр("ru = 'ДокументОснование'; en = 'ReferenceDocument'", Локализация), СтруктураДО);
    //ТЧ Контрагенты
        Данные.Вставить(НСтр("ru = 'Контрагенты '; en = 'BusinessPartners'", Локализация), Неопределено);
    //ТЧ Контактные лица
        Данные.Вставить(НСтр("ru = 'КонтактныеЛица'; en = 'ContactPersons'", Локализация), Неопределено);
    //ТЧ Товары	
		ЗаполнитьЗначенияСвойств(сткПоиска, СтрокаПлана);
		мсвСтрок = ФактОтгрузки.НайтиСтроки(сткПоиска);
		Для Каждого СтрокаСостава Из мсвСтрок Цикл
			Если СтрокаСостава.Факт <= 0 Тогда
				Продолжить;
			КонецЕсли;
			ДанныеСтроки = Новый Структура;
			ДанныеСтроки.Вставить(НСтр("ru = 'ТипДвижения'; en = 'MovementType'", Локализация), "Расход");
        //Номенклатура
                СтруктураНоменклатура = Новый Структура;
                СтруктураНоменклатура.Вставить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация), ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(СтрокаСостава.Номенклатура, КлассПакета_Номенклатура));
                СтруктураНоменклатура.Вставить(НСтр("ru = 'Наименование'; en = 'Description'", Локализация), СтрокаСостава.Номенклатура.Наименование);
                СтруктураНоменклатура.Вставить(НСтр("ru = 'Код'; en = 'Code'", Локализация), СтрокаСостава.Номенклатура.Код);
                СтруктураНоменклатура.Вставить(НСтр("ru = 'ЭтоГруппа'; en = 'IsGroup'", Локализация), СтрокаСостава.Номенклатура.ЭтоГруппа); 
            ДанныеСтроки.Вставить(НСтр("ru = 'Номенклатура'; en = 'Item'", Локализация), СтруктураНоменклатура);
        //Упаковка
			Если СтрокаСостава.УпаковкаНоменклатуры.Коэффициент = 1 Тогда
				СтруктураУпаковка = Новый Структура;
                СтруктураУпаковка.Вставить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация), ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(СтрокаСостава.УпаковкаНоменклатуры.ЕдиницаИзмерения, КлассПакета_ЕдиницыИзмерения));
                СтруктураУпаковка.Вставить(НСтр("ru = 'Наименование'; en = 'Description'", Локализация), СтрокаСостава.Упаковка.Наименование);
                СтруктураУпаковка.Вставить(НСтр("ru = 'Код'; en = 'Code'", Локализация), СтрокаСостава.Упаковка.Код);
                СтруктураУпаковка.Вставить(НСтр("ru = 'ЭтоГруппа'; en = 'IsGroup'", Локализация), СтрокаСостава.Упаковка.ЭтоГруппа); 
			Иначе	
				СтруктураУпаковка = Новый Структура;
                СтруктураУпаковка.Вставить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация), ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(СтрокаСостава.УпаковкаНоменклатуры, КлассПакета_УпаковкаНоменклатуры));
                СтруктураУпаковка.Вставить(НСтр("ru = 'Наименование'; en = 'Description'", Локализация), СтрокаСостава.Упаковка.Наименование);
                СтруктураУпаковка.Вставить(НСтр("ru = 'Код'; en = 'Code'", Локализация), СтрокаСостава.Упаковка.Код);
                СтруктураУпаковка.Вставить(НСтр("ru = 'ЭтоГруппа'; en = 'IsGroup'", Локализация), СтрокаСостава.Упаковка.ЭтоГруппа); 
			КонецЕсли;
            ДанныеСтроки.Вставить(НСтр("ru = 'Упаковка'; en = 'ItemPackage'", Локализация), СтруктураУпаковка);
        //Состояние 
                СтруктураСостояние = Новый Структура;
                СтруктураСостояние.Вставить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация), ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(СтрокаСостава.Состояние, КлассПакета_Состояния));
                СтруктураСостояние.Вставить(НСтр("ru = 'Наименование'; en = 'Description'", Локализация), СтрокаСостава.Состояние.Наименование);
                СтруктураСостояние.Вставить(НСтр("ru = 'Код'; en = 'Code'", Локализация), СтрокаСостава.Состояние.Код);
                СтруктураСостояние.Вставить(НСтр("ru = 'ЭтоГруппа'; en = 'IsGroup'", Локализация), СтрокаСостава.Состояние.ЭтоГруппа); 
            ДанныеСтроки.Вставить(НСтр("ru = 'Состояние'; en = 'ItemStatus'", Локализация), СтруктураСостояние);
        //Новое состояние 
            ДанныеСтроки.Вставить(НСтр("ru = 'НовоеСостояние'; en = 'NewItemStatus'", Локализация), Неопределено);
        //Характеристика
                СтруктураХарактеристика = Новый Структура;
                СтруктураХарактеристика.Вставить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация), ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(СтрокаСостава.ХарактеристикаНоменклатуры, КлассПакета_Характеристика));
                СтруктураХарактеристика.Вставить(НСтр("ru = 'Наименование'; en = 'Description'", Локализация), СтрокаСостава.ХарактеристикаНоменклатуры.Наименование);
                СтруктураХарактеристика.Вставить(НСтр("ru = 'Код'; en = 'Code'", Локализация), СтрокаСостава.ХарактеристикаНоменклатуры.Код);
                СтруктураХарактеристика.Вставить(НСтр("ru = 'ЭтоГруппа'; en = 'IsGroup'", Локализация), СтрокаСостава.ХарактеристикаНоменклатуры.ЭтоГруппа); 
            ДанныеСтроки.Вставить(НСтр("ru = 'Характеристика'; en = 'ItemCharacteristic'", Локализация), СтруктураХарактеристика);
        //Спецификация         
                СтруктураСпецификация = Новый Структура;
                СтруктураСпецификация.Вставить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация), ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(СтрокаСостава.СпецификацияНоменклатуры, КлассПакета_Спецификация));
                СтруктураСпецификация.Вставить(НСтр("ru = 'Наименование'; en = 'Description'", Локализация), СтрокаСостава.СпецификацияНоменклатуры.Наименование);
                СтруктураСпецификация.Вставить(НСтр("ru = 'Код'; en = 'Code'", Локализация), СтрокаСостава.СпецификацияНоменклатуры.Код);
                СтруктураСпецификация.Вставить(НСтр("ru = 'ЭтоГруппа'; en = 'IsGroup'", Локализация), СтрокаСостава.СпецификацияНоменклатуры.ЭтоГруппа); 
            ДанныеСтроки.Вставить(НСтр("ru = 'Спецификация'; en = 'ItemSpecification'", Локализация), СтруктураСпецификация);
            ДанныеСтроки.Вставить(НСтр("ru = 'Спецификация'; en = 'ItemSpecification'", Локализация), Неопределено);
        //Партия
                СтруктураДанныеПартии = Новый Структура;
                    СтруктураПартия = Новый Структура;
                    СтруктураПартия.Вставить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация), ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(СтрокаСостава.ПартияНоменклатуры, КлассПакета_Партия));
                    СтруктураПартия.Вставить(НСтр("ru = 'Наименование'; en = 'Description'", Локализация), СтрокаСостава.ПартияНоменклатуры.Наименование);
                    СтруктураПартия.Вставить(НСтр("ru = 'Код'; en = 'Code'", Локализация), СтрокаСостава.ПартияНоменклатуры.Код);
                    СтруктураПартия.Вставить(НСтр("ru = 'ЭтоГруппа'; en = 'IsGroup'", Локализация), СтрокаСостава.ПартияНоменклатуры.ЭтоГруппа); 
                СтруктураДанныеПартии.Вставить(НСтр("ru = 'Партия'; en = 'ItemBatch'", Локализация), СтруктураПартия);
                Если ЗначениеЗаполнено(СтрокаСостава.ПартияНоменклатуры) Тогда
                    СтруктураДанныеПартии.Вставить(НСтр("ru = 'НомерПартии'; en = 'BatchNumber'", Локализация), СтрокаСостава.ПартияНоменклатуры.Код);
                    СтруктураДанныеПартии.Вставить(НСтр("ru = 'СрокГодности'; en = 'BBD'", Локализация), СтрокаСостава.ПартияНоменклатуры.СрокГодности);
                Иначе
                    СтруктураДанныеПартии.Вставить(НСтр("ru = 'НомерПартии'; en = 'BatchNumber'", Локализация), "");
                    СтруктураДанныеПартии.Вставить(НСтр("ru = 'СрокГодности'; en = 'BBD'", Локализация), Дата(1, 1, 1));
                КонецЕсли;
            ДанныеСтроки.Вставить(НСтр("ru = 'Партия'; en = 'ItemBatch'", Локализация), СтруктураДанныеПартии);
        //Количество
            ДанныеСтроки.Вставить(НСтр("ru = 'Количество'; en = 'Quantity'", Локализация), СтрокаСостава.Факт);
            ДанныеСтроки.Вставить(НСтр("ru = 'КоличествоУпаковок'; en = 'PackQty'", Локализация), СтрокаСостава.ФактУпаковок);
            ДанныеСтроки.Вставить(НСтр("ru = 'КоличествоПлан'; en = 'QuantityPlan'", Локализация), 0);
            ДанныеСтроки.Вставить(НСтр("ru = 'КоличествоУпаковокПлан'; en = 'PackQtyPlan'", Локализация), 0);
        //Заказ
            ДанныеСтроки.Вставить(НСтр("ru = 'Заказ'; en = 'Order'", Локализация), Неопределено);
        //Цена
            ДанныеСтроки.Вставить(НСтр("ru = 'Цена'; en = 'Price'", Локализация), 0);
        //Ставка НДС	 
            ДанныеСтроки.Вставить(НСтр("ru = 'СтавкаНДС'; en = 'VATRate'", Локализация), Неопределено);
        //Суммы    
            ДанныеСтроки.Вставить(НСтр("ru = 'СуммаНДС'; en = 'VATAmount'", Локализация), 0);
            ДанныеСтроки.Вставить(НСтр("ru = 'СуммаВсего'; en = 'TotalAmount'", Локализация), 0);
        //Код строки    
            ДанныеСтроки.Вставить(НСтр("ru = 'КодСтроки'; en = 'LineCode'", Локализация), СтрокаСостава.КодКИС);  
        //ПричинаКорректировки    
		мсвПричинКорректировок = ТаблицаФакта.НайтиСтроки(Новый Структура("ОбъектХранения, Партия, Состояние, ЗаказНаОтгрузку",СтрокаСостава.ОбъектХранения, СтрокаСостава.Партия, СтрокаСостава.Состояние, СтрокаСостава.ЗаказНаОтгрузку));
		Если мсвПричинКорректировок.Количество() > 0 Тогда
			ДанныеСтроки.Вставить(НСтр("ru = 'ПричинаКорректировки'; en = 'ПричинаКорректировки'", Локализация), Строка(мсвПричинКорректировок[0].ПричинаКорректировки));  
		Иначе
			ДанныеСтроки.Вставить(НСтр("ru = 'ПричинаКорректировки'; en = 'ПричинаКорректировки'", Локализация), "");  
        КонецЕсли;
        //Грузовое место
            ДанныеСтроки.Вставить(НСтр("ru = 'ГрузовоеМесто'; en = 'CargoNumber'", Локализация), Неопределено);
        //Серийные номера
			мсвТаблицаАгрегаций = Новый Массив;
			ДанныеСтроки.Вставить(НСтр("ru = 'СерийныеНомера'; en = 'SNData'", Локализация), мсвТаблицаАгрегаций);
			мсвТаблица.Добавить(ДанныеСтроки);
		КонецЦикла;

		Если мсвТаблица.Количество() Тогда
			Данные.Вставить(НСтр("ru = 'Товары'; en = 'Lines'", Локализация), мсвТаблица);
		КонецЕсли;

		Свойства = Новый Структура;
        Свойства.Вставить(НСтр("ru = 'СтатусСв'; en = 'StatusPr'", Локализация), XMLСтрока(СтатусДокумента.ИмяПредопределенныхДанных));
        Свойства.Вставить(НСтр("ru = 'КлассСв'; en = 'ClassPr'", Локализация), "ПричинаКорректировки");
        Свойства.Вставить(НСтр("ru = 'ТипСв'; en = 'TypePr'", Локализация), XMLСтрока(ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(СтрокаПлана.ЗаказНаОтгрузку.ТипОтгрузки, КлассПакета_ТипОтгрузки)));
        Свойства.Вставить(НСтр("ru = 'ОтправительСв'; en = 'SenderPr'", Локализация), XMLСтрока(ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(СтрокаПлана.ЗаказНаОтгрузку.Контрагент, КлассПакета_Контрагент)));
        Свойства.Вставить(НСтр("ru = 'ИмяОтправителяСв'; en = 'SenderNamePr'", Локализация), XMLСтрока(СтрокаПлана.ЗаказНаОтгрузку.Контрагент.Наименование));
        Свойства.Вставить(НСтр("ru = 'ПолучательСв'; en = 'RecipientPr'", Локализация), XMLСтрока(ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(НСтр("ru = 'Склад'; en = 'Warehouse'; bg = 'Склад'"), 0)));
        Свойства.Вставить(НСтр("ru = 'ИмяПолучателяСв'; en = 'RecipientNamePr'", Локализация), XMLСтрока(ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(НСтр("ru = 'ИмяСклада'; en = 'WarehouseName'"), 0)));
        Данные.Вставить(НСтр("ru = 'Свойства'; en = 'Propeties'", Локализация), Свойства);
	
		Если мсвТаблица.Количество() Тогда
        	МассивОбъектов.Добавить(Данные);
        КонецЕсли;

		Счетчик = Счетчик + 1;
	КонецЦикла;

    РезультатОбработки.Body = сшпОбщегоНазначения.ПреобразоватьСтруктуруПоФормату(ФорматСообщения, МассивОбъектов);

	~Выход:;