	//Определение переменных
	Локализация = "ru";
	КлассПакета_ТС = 19;
	КлассПакета_ФЛ = 21;
	КлассПакета_ПланОтгрузки = 63;
	КлассПакета_ПланПоступления = 61;
	КлассПакета_Рейс = 35;  
	ТипРейса = 0;
	//Получение тела сообщения
	xdtoДокумент = сшпОбщегоНазначения.ПолучитьОбъектXDTO(Перечисления.сшпФорматыСообщений.JSON, ТелоСообщения());
	//Получение имени системы Источника
	xdtoОбъект = xdtoДокумент[НСтр("ru = 'Данные'; en = 'Data'", Локализация)];
	сткСообщение = Новый Структура("СостояниеСообщения, ТекстОшибки, КоличествоПопытокОжидания, Задержка, Отказ, Узел, СоответствиеНеНайденныхИдентификаторов", СостояниеСообщения, ТекстОшибки, КоличествоПопытокОжидания(), Задержка, Ложь, ИсточникСообщения(), Новый Соответствие);
	//Получение полей
	СсылкаXDTO = xdtoОбъект.Получить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация));    
	ПометкаУдаленияXDTO = xdtoОбъект.Получить(НСтр("ru = 'ПометкаУдаления'; en = 'IsMarked'", Локализация)); 
	НомерXDTO = xdtoОбъект.Получить(НСтр("ru = 'Номер'; en = 'Number'", Локализация)); 
	ДатаXDTO = xdtoОбъект.Получить(НСтр("ru = 'Дата'; en = 'Date'", Локализация));
	ТипРейсаXDTO = xdtoОбъект.Получить(НСтр("ru = 'ТипДокумента'; en = 'Type'", Локализация));  
	ПлановаяДатаВыполненияXDTO = xdtoОбъект.Получить(НСтр("ru = 'ПлановаяДатаВыполнения'; en = 'ПлановаяДатаВыполнения'", Локализация));
	ТранспортноеСредствоXDTO = xdtoОбъект.Получить(НСтр("ru = 'ТранспортноеСредство'; en = 'Vehicle'", Локализация));
	ВодительXDTO = xdtoОбъект.Получить(НСтр("ru = 'Водитель'; en = 'DriverID'", Локализация)); 
	Если  не xdtoОбъект.Свойства().Получить(НСтр("ru = 'ДатаЗагрузки'; en = 'RegistrationDate'", Локализация))=  Неопределено Тогда
		ДатаРегистрацииXDTO = xdtoОбъект.Получить(НСтр("ru = 'ДатаЗагрузки'; en = 'RegistrationDate'", Локализация));
	Иначе
	 ДатаРегистрацииXDTO = "0001-01-01T00:00:00";
	КонецЕсли;
	//Поиск объекта
	ЛокальныйИдентификатор_Ссылка = ИнтеграцияСервер.ПолучитьЛокальныйИдентификатор(СсылкаXDTO, КлассПакета_Рейс, сткСообщение.Узел);
	СсылкаНаЭлемент = Документы.Рейс.ПолучитьСсылку(Новый УникальныйИдентификатор(ЛокальныйИдентификатор_Ссылка));
	новыйОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
	Если новыйОбъект = Неопределено Тогда
		новыйОбъект = Документы.Рейс.СоздатьДокумент();
		новыйОбъект.УстановитьСсылкуНового(СсылкаНаЭлемент);
		новыйОбъект.ДатаЗагрузки = ИнтеграцияСервер.ПолучитьДату(ДатаРегистрацииXDTO);
	Иначе
		ДатаЗагрузки = ИнтеграцияСервер.ПолучитьДату(ДатаРегистрацииXDTO);
		Если новыйОбъект.ДатаЗагрузки > ДатаЗагрузки Тогда
			СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОбработкаОтменена;
			Перейти ~Выход;
		Иначе
			новыйОбъект.ДатаЗагрузки = ДатаЗагрузки;
		КонецЕсли;
	КонецЕсли;
	//Реквизиты шапки
	новыйОбъект.ПометкаУдаления = ИнтеграцияСервер.ПолучитьБулево(ПометкаУдаленияXDTO);
	новыйОбъект.Дата = ИнтеграцияСервер.ПолучитьДату(ДатаXDTO);
	новыйОбъект.ДатаРейса = ИнтеграцияСервер.ПолучитьДату(ПлановаяДатаВыполненияXDTO); 
	Если Нрег(ТипРейсаXDTO) = "погрузка" тогда  
		ТипРейса = 1;
		новыйОбъект.Тип = Перечисления.ТипыРейсов.Погрузка;
	ИначеЕсли Нрег(ТипРейсаXDTO) = "разгрузка" тогда 
		ТипРейса = 2;
		новыйОбъект.Тип = Перечисления.ТипыРейсов.Разгрузка;
	Иначе 
		ТипРейса = 3;
		новыйОбъект.Тип = Перечисления.ТипыРейсов.ПогрузкаРазгрузка;
	КонецЕсли;
	ДатаРейса = ИнтеграцияСервер.ПолучитьДату(ПлановаяДатаВыполненияXDTO, новыйОбъект.ДатаРейса);
	новыйОбъект.ДатаРейса = НачалоДня(ДатаРейса); 
	Если новыйОбъект.ДатаРейса <> ДатаРейса Тогда
		новыйОбъект.ВремяРейса = ДатаРейса;
	Иначе
		новыйОбъект.ВремяРейса = '00010101';
	КонецЕсли;
	новыйОбъект.Номер = НомерXDTO;
	новыйОбъект.Водитель = ИнтеграцияСервер.ПолучитьСсылку(ВодительXDTO, "Справочник.ФизическиеЛица", КлассПакета_ФЛ, сткСообщение, Новый Структура("Тип",Перечисления.ТипыФизическихЛиц.Водитель));
	Если ИнтеграцияСервер.ИдентификаторЗаполнен(ТранспортноеСредствоXDTO.Ссылка) Тогда
		новыйОбъект.ТранспортноеСредство = ИнтеграцияСервер.ПолучитьСсылку(ТранспортноеСредствоXDTO.Ссылка, "Справочник.ТранспортныеСредства", КлассПакета_ТС, сткСообщение);
	Иначе
		новыйОбъект.ТранспортноеСредство = ИнтеграцияСервер.ПолучитьСсылку("ТС", "Справочник.ТранспортныеСредства", КлассПакета_ТС, сткСообщение);
	КонецЕсли;
	//не получаем, запишем значение по умолчанию
	новыйОбъект.Приоритет = Перечисления.Приоритеты.Обычный; 
	
	//Запись объекта
	ИнтеграцияСервер.ЗаписатьОбъектВБазуДанных(новыйОбъект, сткСообщение);
    мсвДокументов = Новый Массив;
	ДокументыХDTO = xdtoДокумент.Получить(НСтр("ru = 'Документы'; en = 'Documents'", Локализация)); 
	
	текТаблица = ДокументыХDTO.Последовательность();  
	ПорядокОтгрузкиПоИнтеграции = Новый Соответствие;
		
	Для Инд = 0 По текТаблица.Количество() - 1 Цикл
		xdtoСтрока = текТаблица.ПолучитьЗначение(Инд);	
		ПланСсылкаXDTO = xdtoСтрока.Получить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация)); 
		ЗаказНомерXDTO = xdtoСтрока.Получить(НСтр("ru = 'Номер'; en = 'Number'", Локализация));
		ТипПогрузкаXDTO = xdtoСтрока.Получить(НСтр("ru = 'ТипПогрузка'; en = 'ТипПогрузка'", Локализация));
		ТипРазгрузкаXDTO = xdtoСтрока.Получить(НСтр("ru = 'ТипРазгрузка'; en = 'ТипРазгрузка'", Локализация));
		ПорядокОтгрузкиXDTO = xdtoСтрока.Получить(НСтр("ru = 'Ordinal'; en = 'Ordinal'", Локализация));
		
		ТипПогрузка = ИнтеграцияСервер.ПолучитьБулево(ТипПогрузкаXDTO);
		ТипРазгрузка = ИнтеграцияСервер.ПолучитьБулево(ТипРазгрузкаXDTO);
		
		ПорядокОтгрузки = ПорядокОтгрузкиXDTO;
		
		Если ТипПогрузка Тогда  
			ПланСсылка = ИнтеграцияСервер.ПолучитьСсылку(ПланСсылкаXDTO, "Документ.ПланОтгрузки", КлассПакета_ПланОтгрузки, сткСообщение, Новый Структура("ДатаОтгрузки", новыйОбъект.ДатаРейса));
			ПорядокОтгрузкиПоИнтеграции.Вставить(ПланСсылка, ПорядокОтгрузки);
		ИначеЕсли ТипРазгрузка Тогда
			ПланСсылка = ИнтеграцияСервер.ПолучитьСсылку(ПланСсылкаXDTO, "Документ.ПланПоступления", КлассПакета_ПланПоступления, сткСообщение, Новый Структура("ДатаПоступления", новыйОбъект.ДатаРейса)); 
		ИначеЕсли ТипРейса = 3 тогда
			///TODO: добавить обработку погрузка/разгрузка
		КонецЕсли; 
		
		мсвДокументов.Добавить(ПланСсылка); 
	КонецЦикла;
	
	Если Не СткСообщение.Отказ Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
					   |	ПланПоступления.Ссылка КАК План,
					   |	ПланПоступления.Рейс КАК Рейс,
					   |	СтрокиПлановПоступления.ОжидаемоеПоступление КАК Заказ,
					   |	ОжидаемыеПоступления.Рейс КАК РейсЗаказа,
					   |	0 КАК ПорядокОтгрузки
					   |ИЗ
					   |	Документ.ПланПоступления КАК ПланПоступления
					   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтрокиПлановПоступления КАК СтрокиПлановПоступления
					   |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОжидаемоеПоступление КАК ОжидаемыеПоступления
					   |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
					   |				ПО ОжидаемыеПоступления.Ссылка = СтатусыДокументов.Документ
					   |				И Не СтатусыДокументов.Принят
					   |				И Не СтатусыДокументов.ПредварительноПринят
					   |				И СтатусыДокументов.Статус <> ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.Отменен)
					   |			ПО СтрокиПлановПоступления.ОжидаемоеПоступление = ОжидаемыеПоступления.Ссылка
					   |		ПО ПланПоступления.Ссылка = СтрокиПлановПоступления.План
					   |ГДЕ
					   |	ПланПоступления.Ссылка В (&Документы)
					   |
					   |ОБЪЕДИНИТЬ ВСЕ
					   |
					   |ВЫБРАТЬ РАЗЛИЧНЫЕ
					   |	ПланОтгрузки.Ссылка,
					   |	ПланОтгрузки.Рейс,
					   |	СтрокиПлановОтгрузки.ЗаказНаОтгрузку,
					   |	ЗаказыНаОтгрузку.Рейс,
					   |	ЗаказыНаОтгрузку.ПорядокОтгрузки
					   |ИЗ
					   |	Документ.ПланОтгрузки КАК ПланОтгрузки
					   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтрокиПлановОтгрузки КАК СтрокиПлановОтгрузки
					   |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаОтгрузку КАК ЗаказыНаОтгрузку
					   |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
					   |				ПО ЗаказыНаОтгрузку.Ссылка = СтатусыДокументов.Документ
					   |				И СтатусыДокументов.Статус <> ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.Отгружен)
					   |				И СтатусыДокументов.Статус <> ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.Отменен)
					   |				И СтатусыДокументов.Статус <> ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.Доставлен)
					   |				И СтатусыДокументов.Статус <> ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ВМашине)
					   |			ПО СтрокиПлановОтгрузки.ЗаказНаОтгрузку = ЗаказыНаОтгрузку.Ссылка
					   |		ПО ПланОтгрузки.Ссылка = СтрокиПлановОтгрузки.План
					   |ГДЕ
					   |	ПланОтгрузки.Ссылка В (&Документы)
					   |ИТОГИ
					   |	МАКСИМУМ(Рейс) КАК Рейс
					   |ПО
					   |	План
					   |;
					   |
					   |////////////////////////////////////////////////////////////////////////////////
					   |ВЫБРАТЬ
					   |	ЗаказНаОтгрузку.Ссылка
					   |ИЗ
					   |	Документ.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку
					   |ГДЕ
					   |	ЗаказНаОтгрузку.Рейс = &Ссылка
					   |
					   |ОБЪЕДИНИТЬ ВСЕ
					   |
					   |ВЫБРАТЬ
					   |	ОжидаемоеПоступление.Ссылка
					   |ИЗ
					   |	Документ.ОжидаемоеПоступление КАК ОжидаемоеПоступление
					   |ГДЕ
					   |	ОжидаемоеПоступление.Рейс = &Ссылка
					   |
					   |ОБЪЕДИНИТЬ ВСЕ
					   |
					   |ВЫБРАТЬ
					   |	ПланПоступления.Ссылка
					   |ИЗ
					   |	Документ.ПланПоступления КАК ПланПоступления
					   |ГДЕ
					   |	ПланПоступления.Рейс = &Ссылка
					   |
					   |ОБЪЕДИНИТЬ ВСЕ
					   |
					   |ВЫБРАТЬ
					   |	ПланОтгрузки.Ссылка
					   |ИЗ
					   |	Документ.ПланОтгрузки КАК ПланОтгрузки
					   |ГДЕ
					   |	ПланОтгрузки.Рейс = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", новыйОбъект.Ссылка);
		Запрос.УстановитьПараметр("Документы", мсвДокументов);

		мсвДокументовОбработанных = Новый Массив;

		Результат = Запрос.ВыполнитьПакет();
		ВыборкаПланы = Результат[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ВыборкаПланы.Количество() = 0 Тогда
			//еще не успели сформироваться документы в WMS
			сткСообщение.СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
			Перейти ~Выход;
		 КонецЕсли;

		Пока ВыборкаПланы.Следующий() Цикл
			Если ВыборкаПланы.Рейс <> новыйОбъект.Ссылка Тогда
				ПланОбъект = ВыборкаПланы.План.ПолучитьОбъект();
				ПланОбъект.Рейс = новыйОбъект.Ссылка;
				ПланОбъект.Записать();
			КонецЕсли;
			мсвДокументовОбработанных.Добавить(ВыборкаПланы.План);

			//ПорядокОтгрузки = мсвДокументов.Количество() - мсвДокументов.Найти(ВыборкаПланы.План);
			ПорядокОтгрузки = ПорядокОтгрузкиПоИнтеграции.Получить(ВыборкаПланы.План);

			ВыборкаЗаказ = ВыборкаПланы.Выбрать();
			Если ВыборкаЗаказ.Количество() = 0 Тогда
				//еще не успели сформироваться документы в WMS
				сткСообщение.СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
				Перейти ~Выход;
			КонецЕсли;

			Пока ВыборкаЗаказ.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаЗаказ.Заказ) Тогда
					Если ВыборкаЗаказ.РейсЗаказа <> новыйОбъект.Ссылка Или (ТипЗнч(ВыборкаЗаказ.Заказ) = Тип("ДокументСсылка.ЗаказНаОтгрузку") И ВыборкаПланы.ПорядокОтгрузки <> ПорядокОтгрузки) Тогда
						ЗаказОбъект = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
						ЗаказОбъект.Рейс = новыйОбъект.Ссылка;
						Если ТипЗнч(ВыборкаЗаказ.Заказ) = Тип("ДокументСсылка.ЗаказНаОтгрузку") Тогда
							ЗаказОбъект.ПорядокОтгрузки = ПорядокОтгрузки;
						КонецЕсли;
						ЗаказОбъект.Записать();
					КонецЕсли;
					мсвДокументовОбработанных.Добавить(ВыборкаЗаказ.Заказ);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		
		Если  мсвДокументовОбработанных.Количество() = 0 Тогда
		//еще не успели сформироваться документы в WMS
				сткСообщение.СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
				Перейти ~Выход;
		КонецЕсли;
		
		Выборка = Результат[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			Если мсвДокументовОбработанных.Найти(Выборка.Ссылка) = Неопределено Тогда
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.Рейс = Неопределено;
				ДокументОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	//Дозапрос недостающих данных
	Если сткСообщение.СоответствиеНеНайденныхИдентификаторов.Количество() Тогда
		ИнтеграцияСервер.СформироватьЗапросНаПолучениеДанных(сткСообщение.СоответствиеНеНайденныхИдентификаторов, сткСообщение.Узел);
	КонецЕсли;

	СостояниеСообщения = сткСообщение.СостояниеСообщения;
	ТекстОшибки = сткСообщение.ТекстОшибки;
	Задержка = сткСообщение.Задержка;

	~Выход:;
