//ИмяТаблицыБазыОбмена=dbo_outActualShippingToCustomer
		
	//Определение переменных
	Локализация = "ru";
	КлассПакета_Отгрузка = 51;
	КлассПакета_ТипОтгрузки = 15;
	КлассПакета_Контрагент = 5;
	КлассПакета_ВидДоставки = 6;
	КлассПакета_Договор = 7;
	КлассПакета_Номенклатура = 3;
	КлассПакета_УпаковкаНоменклатуры = 10;
	КлассПакета_Партия = 11;
	КлассПакета_Состояния = 12;
	КлассПакета_Характеристика = 13;
	КлассПакета_Спецификация = 14;

	Если СкладскиеЗадачиСервер.ЭтоСсылкаСкладскойЗадачи(ОбъектОбработки) Тогда
		ОбъектОбработкиДокумент = ОбъектОбработки.ДокументОснование;
	Иначе
		ОбъектОбработкиДокумент = ОбъектОбработки;	
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ОбъектОбработкиДокумент) ИЛИ (ТипЗнч(ОбъектОбработкиДокумент) <> Тип("ДокументСсылка.ЗаказНаОтгрузку") И ТипЗнч(ОбъектОбработкиДокумент) <> Тип("ДокументСсылка.Рейс")) Тогда
		СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОбработкаОтменена;
		ТекстОшибки = НСтр("ru = 'Некорректный объект обработки'", "ru");
		Перейти ~Выход;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", ОбъектОбработкиДокумент);
		
	Запрос.Текст = "ВЫБРАТЬ
				   |	ПланФактОтгрузки.ОбъектХранения КАК ОбъектХранения,
				   |	ПланФактОтгрузки.Состояние КАК Состояние,
				   |	ПланФактОтгрузки.Партия КАК Партия,
				   |	isnull(ПланФактОтгрузки.АналитикаПодбораПартии.НомерПартии, ЕСТЬNULL(ПланФактОтгрузки.Партия.Код, """")) КАК НомерПартии,
				   |	isnull(ПланФактОтгрузки.АналитикаПодбораПартии.СрокГодности, ЕСТЬNULL(ПланФактОтгрузки.Партия.СрокГодности, ДАТАВРЕМЯ(1,1,1))) КАК СрокГодности,
				   |	ПланФактОтгрузки.КонфигурацияУпаковок КАК КонфигурацияУпаковок,
				   |	ПланФактОтгрузки.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
				   |	ПланФактОтгрузки.Факт КАК Факт,
                   |    Значение(Справочник.Спецификации.ПустаяСсылка) КАК Спецификация,
                   |    Значение(Справочник.СпецификацииНоменклатуры.ПустаяСсылка) КАК СпецификацияНоменклатуры
				   |ИЗ
				   |	РегистрСведений.ПланФактОтгрузки КАК ПланФактОтгрузки
				   |ГДЕ
				   |	ПланФактОтгрузки.ЗаказНаОтгрузку = &Документ
				   |	И ПланФактОтгрузки.Факт <> 0";  
		
	Если ТипЗнч(ОбъектОбработкиДокумент) = Тип("ДокументСсылка.Рейс") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПланФактОтгрузки.ЗаказНаОтгрузку = &Документ", "ПланФактОтгрузки.ЗаказНаОтгрузку.Рейс = &Документ");	
	КонецЕсли;	
		
	ТаблицаФакта = Запрос.Выполнить().Выгрузить();

	ФактОтгрузки = КонвертацияДокументов.РаспределитьФактПоПлану(ТаблицаФакта, "ЗаказНаОтгрузку",);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера") Тогда 		
		СерийныеНомераИАгрегации.РаспределитьСерийныеНомераПоФактуОтгрузки(ФактОтгрузки.ВыгрузитьКолонку("ЗаказНаОтгрузку"), ФактОтгрузки);
	КонецЕсли;
	ТЗПланов = ФактОтгрузки.Скопировать(, "План");
	ТЗПланов.Свернуть("План");
	сткПоиска = Новый Структура("План");
    
    МассивОбъектов = Новый Массив;
	Счетчик = 1;
	Для Каждого СтрокаПлана Из ТЗПланов Цикл
		//СостояниеДокумента = СтатусыДокументовСервер.ПолноеСостояниеДокументаПоСсылке(СтрокаПлана.ЗаказНаОтгрузку);
		//ДатаДокумента = СостояниеДокумента.ДатаИзменения;
		//СтатусДокумента = СостояниеДокумента.Статус;
		ИдентификаторПлана = ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(СтрокаПлана.План, КлассПакета_Отгрузка);
		Данные = Новый Структура;
		мсвТаблица = Новый Массив;
		
    //Основные данные документа
        Данные.Вставить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация), ИдентификаторПлана);
        Данные.Вставить(НСтр("ru = 'Класс'; en = 'Class'", Локализация), "ЗаказНаОтгрузку");


   //ТЧ Товары	
		ЗаполнитьЗначенияСвойств(сткПоиска, СтрокаПлана);
		мсвСтрок = ФактОтгрузки.НайтиСтроки(сткПоиска);
		Для Каждого СтрокаСостава Из мсвСтрок Цикл
			ДанныеСтроки = Новый Структура;

        //Номенклатура
                СтруктураНоменклатура = Новый Структура;
                СтруктураНоменклатура.Вставить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация), ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(СтрокаСостава.Номенклатура, КлассПакета_Номенклатура));
                СтруктураНоменклатура.Вставить(НСтр("ru = 'Наименование'; en = 'Description'", Локализация), СтрокаСостава.Номенклатура.Наименование);
            ДанныеСтроки.Вставить(НСтр("ru = 'Номенклатура'; en = 'Item'", Локализация), СтруктураНоменклатура);
         //Характеристика
                СтруктураХарактеристика = Новый Структура;
                СтруктураХарактеристика.Вставить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация), ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(СтрокаСостава.ХарактеристикаНоменклатуры, КлассПакета_Характеристика));
                СтруктураХарактеристика.Вставить(НСтр("ru = 'Наименование'; en = 'Description'", Локализация), СтрокаСостава.ХарактеристикаНоменклатуры.Наименование);
            ДанныеСтроки.Вставить(НСтр("ru = 'Характеристика'; en = 'ItemCharacteristic'", Локализация), СтруктураХарактеристика);    
        //Упаковка
                СтруктураУпаковка = Новый Структура;
                СтруктураУпаковка.Вставить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация), ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(СтрокаСостава.УпаковкаНоменклатуры, КлассПакета_УпаковкаНоменклатуры));
                СтруктураУпаковка.Вставить(НСтр("ru = 'Наименование'; en = 'Description'", Локализация), СтрокаСостава.Упаковка.Наименование);
            ДанныеСтроки.Вставить(НСтр("ru = 'Упаковка'; en = 'ItemPackage'", Локализация), СтруктураУпаковка);
        //Состояние 
            ДанныеСтроки.Вставить(НСтр("ru = 'Состояние'; en = 'ItemStatus'", Локализация), ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(СтрокаСостава.Состояние, КлассПакета_Состояния));
         //Партия
                СтруктураДанныеПартии = Новый Структура;
                   
                СтруктураДанныеПартии.Вставить(НСтр("ru = 'Ссылка'; en = 'ItemBatchID'", Локализация), ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(СтрокаСостава.ПартияНоменклатуры, КлассПакета_Партия));
                  
                Если ЗначениеЗаполнено(СтрокаСостава.ПартияНоменклатуры) Тогда
                    СтруктураДанныеПартии.Вставить(НСтр("ru = 'Наименование'; en = 'Description'", Локализация), СтрокаСостава.ПартияНоменклатуры.Наименование);
                    СтруктураДанныеПартии.Вставить(НСтр("ru = 'ДатаПроизводства'; en = 'Date'", Локализация), СтрокаСостава.ПартияНоменклатуры.ДатаПроизводства);
                Иначе
                    СтруктураДанныеПартии.Вставить(НСтр("ru = 'Наименование'; en = 'Description'", Локализация), "");
                    СтруктураДанныеПартии.Вставить(НСтр("ru = 'ДатаПроизводства'; en = 'Date'", Локализация), Дата(1, 1, 1));
                КонецЕсли;
            ДанныеСтроки.Вставить(НСтр("ru = 'Партия'; en = 'ItemBatch'", Локализация), СтруктураДанныеПартии);

       
        //Количество
            ДанныеСтроки.Вставить(НСтр("ru = 'Количество'; en = 'Quantity'", Локализация), СтрокаСостава.Факт); 
        //Код строки    
            ДанныеСтроки.Вставить(НСтр("ru = 'КодСтроки'; en = 'LineCode'", Локализация), СтрокаСостава.КодКИС);

        //Серийные номера
            Если ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера") И СтрокаСостава.СерийныеНомера <> Неопределено Тогда										
				мсвТаблицаАгрегаций = СерийныеНомераИАгрегации.ПолучитьДанныеПоАгрегацииДляИнтеграции(СтрокаСостава.СерийныеНомера, Локализация);
			Иначе	
				мсвТаблицаАгрегаций = Новый Массив;
			КонецЕсли;
			ДанныеСтроки.Вставить(НСтр("ru = 'ДанныеСерийногоУчета'; en = 'SNData'", Локализация), мсвТаблицаАгрегаций);
			мсвТаблица.Добавить(ДанныеСтроки);
		КонецЦикла;

		Если мсвТаблица.Количество() Тогда
			Данные.Вставить(НСтр("ru = 'Товары'; en = 'Lines'", Локализация), мсвТаблица);
		КонецЕсли;
		
        ДанныеДляОтправки = Новый Структура;      
        ДанныеДляОтправки.Вставить(НСтр("ru = 'Данные'; en = 'Data'", Локализация),Данные);
     
		Свойства = Новый Структура;
        //Свойства.Вставить(НСтр("ru = 'СтатусСв'; en = 'StatusPr'", Локализация), XMLСтрока(СтатусДокумента.ИмяПредопределенныхДанных));
        Свойства.Вставить(НСтр("ru = 'КлассСв'; en = 'ClassPr'", Локализация), "ФактОтгрузки");
        //Свойства.Вставить(НСтр("ru = 'ТипСв'; en = 'TypePr'", Локализация), XMLСтрока(ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(СтрокаПлана.ЗаказНаОтгрузку.ТипОтгрузки, КлассПакета_ТипОтгрузки)));
        //Свойства.Вставить(НСтр("ru = 'ОтправительСв'; en = 'SenderPr'", Локализация), XMLСтрока(ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(СтрокаПлана.ЗаказНаОтгрузку.Контрагент, КлассПакета_Контрагент)));
        //Свойства.Вставить(НСтр("ru = 'ИмяОтправителяСв'; en = 'SenderNamePr'", Локализация), XMLСтрока(СтрокаПлана.ЗаказНаОтгрузку.Контрагент.Наименование));
        Свойства.Вставить(НСтр("ru = 'ПолучательСв'; en = 'RecipientPr'", Локализация), XMLСтрока(ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(НСтр("ru = 'Склад'; en = 'Warehouse'; bg = 'Склад'"), 0)));
        Свойства.Вставить(НСтр("ru = 'ИмяПолучателяСв'; en = 'RecipientNamePr'", Локализация), XMLСтрока(ИнтеграцияСервер.ПолучитьВнешнийИдентификатор(НСтр("ru = 'ИмяСклада'; en = 'WarehouseName'"), 0)));
        
        ДанныеДляОтправки.Вставить(НСтр("ru = 'Свойства'; en = 'Propeties'", Локализация), Свойства);

       МассивОбъектов.Добавить(ДанныеДляОтправки);

		Счетчик = Счетчик + 1;
	КонецЦикла;
	
   РезультатОбработки.Body = сшпОбщегоНазначения.ПреобразоватьСтруктуруПоФормату(ФорматСообщения, МассивОбъектов);

   ~Выход:;
