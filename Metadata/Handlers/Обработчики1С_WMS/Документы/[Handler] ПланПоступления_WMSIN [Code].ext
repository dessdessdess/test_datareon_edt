              //ИмяТаблицыБазыОбмена=dbo_inReceiptPlan
		
	//Определение переменных
	Локализация = "ru";
	КлассПакета_Номенклатура = 3;
	КлассПакета_Контрагент = 5;
	КлассПакета_ВидДоставки = 6;
	КлассПакета_Договор = 7;
	КлассПакета_УпаковкаНоменклатуры = 10;
	КлассПакета_Партия = 11;
	КлассПакета_Состояния = 12;
	КлассПакета_Характеристика = 13;
	КлассПакета_Спецификация = 14;
	КлассПакета_ТипПоступления = 9;
	КлассПакета_ТС = 19;
	КлассПакета_Физлицо = 21;
	КлассПакета_ПланОтгрузки = 51;
	КлассПакета_ПланПоступления = 61;
	КлассПакета_Рейс = 53;
	КлассПакета_Организация = 23;
	КлассПакета_Склад = 25;
	КлассПакета_Подразделение = 24;
	КлассПакета_Партнер = 22;

	сткСообщение = Новый Структура("СостояниеСообщения, ТекстОшибки, КоличествоПопытокОжидания, Задержка, Отказ, Узел, СоответствиеНеНайденныхИдентификаторов", 
                                    СостояниеСообщения, ТекстОшибки, КоличествоПопытокОжидания(), Задержка, Ложь, ИсточникСообщения(), Новый Соответствие);
						
	// Получение тела сообщения
	xdtoОбъект = сшпОбщегоНазначения.ПолучитьОбъектXDTO(Перечисления.сшпФорматыСообщений.JSON, ТелоСообщения());

	//Получение полей
    СсылкаXDTO = Неопределено;
    ПроведенXDTO = Истина;
    ПометкаУдаленияXDTO = Ложь;
    НомерXDTO = "";
    ДатаXDTO = Дата(1,1,1);
    СтатусXDTO = Неопределено;
    ПлановаяДатаВыполненияXDTO = Дата(1,1,1);
    КлассXDTO = "";
    ТипXDTO = Неопределено;
    ОтправительXDTO = Неопределено;
    ДоговорСОтправителемXDTO = Неопределено;
    ТипОтправителяXDTO = "";
    АдресОтправителяXDTO = Неопределено;
    ПолучательXDTO = Неопределено;
    ДоговорСПолучателемXDTO = Неопределено;
    ТипПолучателяXDTO = "";
    АдресПолучателяXDTO = Неопределено;
    РейсXDTO = Неопределено;
    КомментарийXDTO = "";
    ОрганизацияXDTO = Неопределено;
    ПриоритетXDTO = Неопределено;
    ТранспортноеСредствоXDTO = Неопределено;
    ВодительXDTO = Неопределено;
    ВидДоставкиXDTO = Неопределено;
    ДатаРегистрацииXDTO = Дата(1,1,1);
    ДокументОснованиеXDTO = Неопределено;
    ТаблицаКонтактныхЛицXDTO = Неопределено;
    ТаблицаКонтрагентовXDTO = Неопределено;
    ТаблицаТоваровXDTO = Неопределено;

    Свойства = xdtoОбъект.Свойства();
    Если Свойства.Получить(НСтр("ru = 'Данные'; en = 'Data'", Локализация)) <> Неопределено Тогда
        ДанныеXDTO = xdtoОбъект.Получить(НСтр("ru = 'Данные'; en = 'Data'", Локализация));
        Если ДанныеXDTO <> Неопределено Тогда
            СсылкаXDTO = ДанныеXDTO.Получить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация)); 
            //ПроведенXDTO = ДанныеXDTO.Получить(НСтр("ru = 'Проведен'; en = 'Posted'", Локализация));
            ПометкаУдаленияXDTO = ДанныеXDTO.Получить(НСтр("ru = 'ПометкаУдаления'; en = 'DeletionMark'", Локализация));
            НомерXDTO = ДанныеXDTO.Получить(НСтр("ru = 'Номер'; en = 'Number'", Локализация));
            ДатаXDTO = ДанныеXDTO.Получить(НСтр("ru = 'Дата'; en = 'Date'", Локализация));
            //СтатусXDTO = ДанныеXDTO.Получить(НСтр("ru = 'Статус'; en = 'Status'", Локализация));
        КонецЕсли;
	КонецЕсли;
    Если Свойства.Получить(НСтр("ru = 'Класс'; en = 'Class'", Локализация)) <> Неопределено Тогда
        КлассXDTO = xdtoОбъект.Получить(НСтр("ru = 'Класс'; en = 'Class'", Локализация));
    КонецЕсли;
    Если Свойства.Получить(НСтр("ru = 'Тип'; en = 'Type'", Локализация)) <> Неопределено Тогда
        ТипXDTO = xdtoОбъект.Получить(НСтр("ru = 'Тип'; en = 'Type'", Локализация));
    КонецЕсли;
    Если Свойства.Получить(НСтр("ru = 'Отправитель'; en = 'Sender'", Локализация)) <> Неопределено Тогда
        ОтправительXDTO = xdtoОбъект.Получить(НСтр("ru = 'Отправитель'; en = 'Sender'", Локализация));
        Если ОтправительXDTO <> Неопределено Тогда
            ТипОтправителяXDTO = ОтправительXDTO.Получить(НСтр("ru = 'Тип'; en = 'Type'", Локализация));
        КонецЕсли;
	КонецЕсли;
    Если Свойства.Получить(НСтр("ru = 'Получатель'; en = 'Recipient'", Локализация)) <> Неопределено Тогда
        ДанныеXDTO = xdtoОбъект.Получить(НСтр("ru = 'Получатель'; en = 'Recipient'", Локализация));
        Если ДанныеXDTO <> Неопределено Тогда
            ПолучательXDTO = ДанныеXDTO.Получить(НСтр("ru = 'Контрагент'; en = 'BusinessPartner'", Локализация));
            ТипПолучателяXDTO = ДанныеXDTO.Получить(НСтр("ru = 'Тип'; en = 'Type'", Локализация));
            ДоговорСПолучателемXDTO = ДанныеXDTO.Получить(НСтр("ru = 'Договор'; en = 'Contract'", Локализация));
            АдресПолучателяXDTO = ДанныеXDTO.Получить(НСтр("ru = 'Адрес'; en = 'Address'", Локализация));
        КонецЕсли;
	КонецЕсли;
    Если Свойства.Получить(НСтр("ru = 'ПлановаяДатаВыполнения'; en = 'ScheduledExecutionDate'", Локализация)) <> Неопределено Тогда
        ПлановаяДатаВыполненияXDTO = xdtoОбъект.Получить(НСтр("ru = 'ПлановаяДатаВыполнения'; en = 'ScheduledExecutionDate'", Локализация));
    КонецЕсли;    
    Если Свойства.Получить(НСтр("ru = 'Рейс'; en = 'Delivery'", Локализация)) <> Неопределено Тогда
        РейсXDTO = xdtoОбъект.Получить(НСтр("ru = 'Рейс'; en = 'Delivery'", Локализация));
	КонецЕсли;
    Если Свойства.Получить(НСтр("ru = 'Комментарий'; en = 'Comment'", Локализация)) <> Неопределено Тогда
        КомментарийXDTO = xdtoОбъект.Получить(НСтр("ru = 'Комментарий'; en = 'Comment'", Локализация));
    КонецЕсли;
    Если Свойства.Получить(НСтр("ru = 'Организация'; en = 'Owner'", Локализация)) <> Неопределено Тогда
        ОрганизацияXDTO = xdtoОбъект.Получить(НСтр("ru = 'Организация'; en = 'Owner'", Локализация));
    КонецЕсли;
    Если Свойства.Получить(НСтр("ru = 'Приоритет'; en = 'Priority'", Локализация)) <> Неопределено Тогда
        ПриоритетXDTO = xdtoОбъект.Получить(НСтр("ru = 'Приоритет'; en = 'Priority'", Локализация));
    КонецЕсли;
    Если Свойства.Получить(НСтр("ru = 'ТранспортноеСредство'; en = 'Vehicle'", Локализация)) <> Неопределено Тогда
        ТранспортноеСредствоXDTO = xdtoОбъект.Получить(НСтр("ru = 'ТранспортноеСредство'; en = 'Vehicle'", Локализация));
    КонецЕсли;
    Если Свойства.Получить(НСтр("ru = 'Водитель'; en = 'Driver'", Локализация)) <> Неопределено Тогда
        ВодительXDTO = xdtoОбъект.Получить(НСтр("ru = 'Водитель'; en = 'Driver'", Локализация));
    КонецЕсли;
    Если Свойства.Получить(НСтр("ru = 'ВидДоставки'; en = 'DeliveryType'", Локализация)) <> Неопределено Тогда
        ВидДоставкиXDTO = xdtoОбъект.Получить(НСтр("ru = 'ВидДоставки'; en = 'DeliveryType'", Локализация));
    КонецЕсли;
    Если Свойства.Получить(НСтр("ru = 'ДатаРегистрации'; en = 'RegistrationDate'", Локализация)) <> Неопределено Тогда
        ДатаРегистрацииXDTO = xdtoОбъект.Получить(НСтр("ru = 'ДатаРегистрации'; en = 'RegistrationDate'", Локализация));
    КонецЕсли;
    Если Свойства.Получить(НСтр("ru = 'ДокументОснование'; en = 'ReferenceDocument'", Локализация)) <> Неопределено Тогда
        ДокументОснованиеXDTO = xdtoОбъект.Получить(НСтр("ru = 'ДокументОснование'; en = 'ReferenceDocument'", Локализация));
	КонецЕсли;	
    Если Свойства.Получить(НСтр("ru = 'КонтактныеЛица'; en = 'ContactPersons'", Локализация)) <> Неопределено Тогда
        ТаблицаКонтактныхЛицXDTO = xdtoОбъект.Получить(НСтр("ru = 'КонтактныеЛица'; en = 'ContactPersons'", Локализация));
	КонецЕсли;
    Если Свойства.Получить(НСтр("ru = 'Контрагенты'; en = 'BusinessPartners'", Локализация)) <> Неопределено Тогда
        ТаблицаКонтрагентовXDTO = xdtoОбъект.Получить(НСтр("ru = 'Контрагенты'; en = 'BusinessPartners'", Локализация));
	КонецЕсли;
    Если Свойства.Получить(НСтр("ru = 'Товары'; en = 'Lines'", Локализация)) <> Неопределено Тогда
        ТаблицаТоваровXDTO = xdtoОбъект.Получить(НСтр("ru = 'Товары'; en = 'Lines'", Локализация));
	КонецЕсли;
    
	//Поиск объекта
	ЛокальныйИдентификатор_Ссылка = ИнтеграцияСервер.ПолучитьЛокальныйИдентификатор(СсылкаXDTO, КлассПакета_ПланПоступления, сткСообщение.Узел);
	СсылкаНаЭлемент = Документы.ПланПоступления.ПолучитьСсылку(Новый УникальныйИдентификатор(ЛокальныйИдентификатор_Ссылка));

	ЭтоНовый = Ложь;
	новыйОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
	Если новыйОбъект = Неопределено Тогда
		новыйОбъект = Документы.ПланПоступления.СоздатьДокумент();
		новыйОбъект.УстановитьСсылкуНового(СсылкаНаЭлемент);
		новыйОбъект.Дата = ТекущаяДата();
		ЭтоНовый = Истина;
		ИсходныйСтатус = Справочники.СтатусыДокументов.Новый;
		новыйОбъект.ДатаЗагрузки = ИнтеграцияСервер.ПолучитьДату(ДатаРегистрацииXDTO);
	Иначе
		ИсходныйСтатус = СтатусыДокументовСервер.СтатусДокументаПоСсылке(СсылкаНаЭлемент);
		ДатаЗагрузки = ИнтеграцияСервер.ПолучитьДату(ДатаРегистрацииXDTO);
		Если новыйОбъект.ДатаЗагрузки > ДатаЗагрузки Тогда
			СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОбработкаОтменена;
			Перейти ~Выход;
		Иначе
			новыйОбъект.ДатаЗагрузки = ДатаЗагрузки;
		КонецЕсли;	
	КонецЕсли;

	Если ИсходныйСтатус = Справочники.СтатусыДокументов.Обрабатывается Тогда
		сткСообщение.Отказ = Истина;
		СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
		Перейти ~Выход;
	КонецЕсли;

	//Реквизиты шапки
	ПометкаУдаления = ИнтеграцияСервер.ПолучитьБулево(ПометкаУдаленияXDTO);
	Если ПометкаУдаления Тогда
		Если ЭтоНовый Тогда
			СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОбработкаОтменена;
			Перейти ~Выход;
		КонецЕсли;
	КонецЕсли;
	Проведен = ИнтеграцияСервер.ПолучитьБулево(ПроведенXDTO);

	ТипПоступления = ИнтеграцияСервер.ПолучитьСсылку(ТипXDTO, "Справочник.ТипыПоступления", КлассПакета_ТипПоступления, сткСообщение);
	новыйОбъект.ТранспортноеСредство = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(ТранспортноеСредствоXDTO, "Справочник.ТранспортныеСредства", КлассПакета_ТС, сткСообщение);
	новыйОбъект.Водитель = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(ВодительXDTO, "Справочник.ФизическиеЛица", КлассПакета_Физлицо, сткСообщение);
	//новыйОбъект.ВидДоставки = ИнтеграцияСервер.ПолучитьСсылку(ВидДоставкиXDTO, "Справочник.ВидыДоставки", КлассПакета_ВидДоставки, сткСообщение);
	//новыйОбъект.ТранспортноеСредство = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(xdtoОбъект.Получить("ТранспортноеСредство"), "Справочник.ТранспортныеСредства", КлассПакета_ТС, сткСообщение);
	новыйОбъект.ДатаКИС = ИнтеграцияСервер.ПолучитьДату(ДатаXDTO);
	ДатаПоступления = ИнтеграцияСервер.ПолучитьДату(ПлановаяДатаВыполненияXDTO);
	новыйОбъект.ДатаПоступления = НачалоДня(ДатаПоступления);
	Если новыйОбъект.ДатаПоступления <> ДатаПоступления Тогда
		новыйОбъект.ВремяПоступления = ДатаПоступления;
	Иначе	
		новыйОбъект.ВремяПоступления = '00010101';
	КонецЕсли;
	новыйОбъект.Рейс = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(РейсXDTO, "Документ.Рейс", КлассПакета_Рейс, сткСообщение);
	новыйОбъект.Комментарий = КомментарийXDTO;
	новыйОбъект.НомерКИС = НомерXDTO;
	новыйОбъект.Организация = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(ОрганизацияXDTO, "Справочник.Контрагенты", КлассПакета_Организация, сткСообщение);
	Если ТипОтправителяXDTO = "Организация" Тогда
		КлассОтправителя = КлассПакета_Организация;
	ИначеЕсли ТипОтправителяXDTO = "Склад" Тогда
		КлассОтправителя = КлассПакета_Склад;
	ИначеЕсли ТипОтправителяXDTO = "Подразделение" Тогда
		КлассОтправителя = КлассПакета_Подразделение;
	ИначеЕсли ТипОтправителяXDTO = "Партнер" Тогда
		КлассОтправителя = КлассПакета_Партнер;		
	Иначе
		КлассОтправителя = КлассПакета_Контрагент;
	КонецЕсли;
	новыйОбъект.Контрагент = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(ОтправительXDTO, "Справочник.Контрагенты", КлассОтправителя, сткСообщение);
	Попытка
		Если ПриоритетXDTO <> Неопределено И СлужебныйКлиентСервер.ЭтоУникальныйИдентификатор(ПриоритетXDTO.Ссылка) Тогда
			ЛокальноеИмя = ИнтеграцияСервер.ПолучитьЛокальныйИдентификатор(ПриоритетXDTO.Ссылка, 0);
		Иначе
			ЛокальноеИмя = ПриоритетXDTO.Ссылка;
		КонецЕсли;
		новыйОбъект.Приоритет = XMLЗначение(Тип("ПеречислениеСсылка.Приоритеты"), ЛокальноеИмя);
	Исключение
		новыйОбъект.Приоритет = Перечисления.Приоритеты.Обычный;
	КонецПопытки;
	новыйОбъект.Договор = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(ДоговорСОтправителемXDTO, "Справочник.ДоговорыКонтрагентов", КлассПакета_Договор, сткСообщение);

	новыйОбъект.ТипПоступления = ТипПоступления;
	Если Не ЗначениеЗаполнено(новыйОбъект.Процесс) И ЗначениеЗаполнено(ТипПоступления)  Тогда
		новыйОбъект.Процесс = ТипПоступления.Процесс;
	КонецЕсли;
    Если Не ЗначениеЗаполнено(новыйОбъект.Процесс) Тогда
		новыйОбъект.Процесс = Справочники.ПроцессыПоступления.Основной;
	КонецЕсли;

	//Табличная часть КонтактныеЛица
    Если ТаблицаКонтактныхЛицXDTO <> Неопределено И ТаблицаКонтактныхЛицXDTO <> "" Тогда
        текТаблица = ТаблицаКонтактныхЛицXDTO.Последовательность();
        Для Инд = 0 По текТаблица.Количество() - 1 Цикл
            xdtoСтрока = текТаблица.ПолучитьЗначение(Инд);
            РольXDTO = xdtoСтрока.Получить(НСтр("ru = 'Роль'; en = 'Role'", Локализация));
            КонтактноеЛицоXDTO = xdtoСтрока.Получить(НСтр("ru = 'КонтактноеЛицо'; en = 'ContactPerson'", Локализация));
            Если РольXDTO = "Менеджер" Тогда
                новыйОбъект.Менеджер = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(КонтактноеЛицоXDTO, "Справочник.ФизическиеЛица", КлассПакета_Физлицо, сткСообщение);
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;		

	//Табличная часть Товары
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("УпаковкаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	Таблица.Колонки.Добавить("Состояние", Новый ОписаниеТипов("СправочникСсылка.СостоянияОбъектовХранения"));
	Таблица.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Таблица.Колонки.Добавить("ПартияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры"));
//	Таблица.Колонки.Добавить("СрокГодности", Новый ОписаниеТипов("Дата"));
//	Таблица.Колонки.Добавить("СпецификацияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СпецификацииНоменклатуры"));
	Таблица.Колонки.Добавить("Количество", Метаданные.ОпределяемыеТипы.Количество.Тип);
	Таблица.Колонки.Добавить("КоличествоУпаковок", Метаданные.ОпределяемыеТипы.Количество.Тип);
	Таблица.Колонки.Добавить("КоличествоПлан", Метаданные.ОпределяемыеТипы.Количество.Тип);
	Таблица.Колонки.Добавить("КоличествоУпаковокПлан", Метаданные.ОпределяемыеТипы.Количество.Тип);
	Таблица.Колонки.Добавить("Цена", Метаданные.ОпределяемыеТипы.Сумма.Тип);
	Таблица.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	Таблица.Колонки.Добавить("СуммаНДС", Метаданные.ОпределяемыеТипы.Сумма.Тип);
	Таблица.Колонки.Добавить("СуммаВсего", Метаданные.ОпределяемыеТипы.Сумма.Тип);
	Таблица.Колонки.Добавить("КодКИС", Новый ОписаниеТипов("Строка"));
//	Таблица.Колонки.Добавить("ГрузовоеМесто", Новый ОписаниеТипов("СправочникСсылка.МестаХранения"));	
	Таблица.Колонки.Добавить("ДанныеСерийногоУчета", Новый ОписаниеТипов("Строка"));

	Если ТаблицаТоваровXDTO <> Неопределено И ТаблицаТоваровXDTO <> ""Тогда
        текТаблица = ТаблицаТоваровXDTO.Последовательность();  
        Для Инд = 0 По текТаблица.Количество() - 1 Цикл  
            ТипДвиженияXDTO = "";
            НоменклатураXDTO = Неопределено;
            УпаковкаXDTO = Неопределено;
            СостояниеXDTO = Неопределено;
            ХарактеристикаXDTO = Неопределено;
            ПартияXDTO = Неопределено;
           // НомерПартииXDTO ="";
           // ДатаПроизводстваXDTO = Дата(1,1,1);
           // СпецификацияXDTO = Неопределено;
            КоличествоXDTO = 0;
            КоличествоУпаковокXDTO = 0;
            КоличествоПланXDTO = 0;
            КоличествоУпаковокПланXDTO = 0;
            ЦенаXDTO = 0;
            СтавкаНДСXDTO = Неопределено;
            СуммаНДСXDTO = 0;
            СуммаВсегоXDTO = 0;
            КодСтрокиXDTO = "";
            ЗаказНаОтгрузкуXDTO = Неопределено;
            ГрузовоеМестоXDTO = Неопределено;
            ТаблицаСерийныхНомеровXDTO = Неопределено;
                
            xdtoСтрока = текТаблица.ПолучитьЗначение(Инд); 
            Свойства = xdtoСтрока.Свойства();
            Если Свойства.Получить(НСтр("ru = 'ТипДвижения'; en = 'MovementType'", Локализация)) <> Неопределено Тогда
                ТипДвиженияXDTO = xdtoСтрока.Получить(НСтр("ru = 'ТипДвижения'; en = 'MovementType'", Локализация));
            КонецЕсли;
            Если Свойства.Получить(НСтр("ru = 'Номенклатура'; en = 'Item'", Локализация)) <> Неопределено Тогда
                НоменклатураXDTO = xdtoСтрока.Получить(НСтр("ru = 'Номенклатура'; en = 'Item'", Локализация));
            КонецЕсли;
            Если Свойства.Получить(НСтр("ru = 'Упаковка'; en = 'ItemPackage'", Локализация)) <> Неопределено Тогда
                УпаковкаXDTO = xdtoСтрока.Получить(НСтр("ru = 'Упаковка'; en = 'ItemPackage'", Локализация));
            КонецЕсли;
            Если Свойства.Получить(НСтр("ru = 'Состояние'; en = 'ItemStatus'", Локализация)) <> Неопределено Тогда
                СостояниеXDTO = xdtoСтрока.Получить(НСтр("ru = 'Состояние'; en = 'ItemStatus'", Локализация));
            КонецЕсли;
            Если Свойства.Получить(НСтр("ru = 'Характеристика'; en = 'ItemCharacteristic'", Локализация)) <> Неопределено Тогда
                ХарактеристикаXDTO = xdtoСтрока.Получить(НСтр("ru = 'Характеристика'; en = 'ItemCharacteristic'", Локализация));
            КонецЕсли;
            Если Свойства.Получить(НСтр("ru = 'Партия'; en = 'ItemBatch'", Локализация)) <> Неопределено Тогда
                ДанныеXDTO = xdtoСтрока.Получить(НСтр("ru = 'Партия'; en = 'ItemBatch'", Локализация));
                Если ДанныеXDTO <> Неопределено И ДанныеXDTO <> "" Тогда
                    ПартияXDTO = ДанныеXDTO.Получить(НСтр("ru = 'ПартияСсылка'; en = 'ItemBatchID'", Локализация)); 
                //   НомерПартииXDTO = ДанныеXDTO.Получить(НСтр("ru = 'Наименование'; en = 'BatchNumber'", Локализация));
                //    ДатаПроизводстваXDTO = ДанныеXDTO.Получить(НСтр("ru = 'ДатаПроизводства'; en = 'ДатаПроизводства'", Локализация));
                КонецЕсли;
            КонецЕсли;
            Если Свойства.Получить(НСтр("ru = 'Спецификация'; en = 'ItemSpecification'", Локализация)) <> Неопределено Тогда
                СпецификацияXDTO = xdtoСтрока.Получить(НСтр("ru = 'Спецификация'; en = 'ItemSpecification'", Локализация));
            КонецЕсли;
           Если Свойства.Получить(НСтр("ru = 'Количество'; en = 'Quantity'", Локализация)) <> Неопределено Тогда
                КоличествоXDTO = xdtoСтрока.Получить(НСтр("ru = 'Количество'; en = 'Quantity'", Локализация));
            КонецЕсли;
            Если Свойства.Получить(НСтр("ru = 'КоличествоУпаковок'; en = 'PackQty'", Локализация)) <> Неопределено Тогда
                КоличествоУпаковокXDTO = xdtoСтрока.Получить(НСтр("ru = 'КоличествоУпаковок'; en = 'PackQty'", Локализация));
            КонецЕсли;
            Если Свойства.Получить(НСтр("ru = 'КоличествоПлан'; en = 'QuantityPlan'", Локализация)) <> Неопределено Тогда
                КоличествоПланXDTO = xdtoСтрока.Получить(НСтр("ru = 'КоличествоПлан'; en = 'QuantityPlan'", Локализация));
            КонецЕсли;
           Если Свойства.Получить(НСтр("ru = 'КоличествоУпаковокПлан'; en = 'PackQtyPlan'", Локализация)) <> Неопределено Тогда
               КоличествоУпаковокПланXDTO = xdtoСтрока.Получить(НСтр("ru = 'КоличествоУпаковокПлан'; en = 'PackQtyPlan'", Локализация));
           КонецЕсли;
            Если Свойства.Получить(НСтр("ru = 'Цена'; en = 'Price'", Локализация)) <> Неопределено Тогда
               ЦенаXDTO = xdtoСтрока.Получить(НСтр("ru = 'Цена'; en = 'Price'", Локализация));
            КонецЕсли;
           Если Свойства.Получить(НСтр("ru = 'СтавкаНДС'; en = 'VATRate'", Локализация)) <> Неопределено Тогда
               СтавкаНДСXDTO = xdtoСтрока.Получить(НСтр("ru = 'СтавкаНДС'; en = 'VATRate'", Локализация));
           КонецЕсли;
           Если Свойства.Получить(НСтр("ru = 'СуммаНДС'; en = 'VATAmount'", Локализация)) <> Неопределено Тогда
                СуммаНДСXDTO = xdtoСтрока.Получить(НСтр("ru = 'СуммаНДС'; en = 'VATAmount'", Локализация));
            КонецЕсли;
           Если Свойства.Получить(НСтр("ru = 'СуммаВсего'; en = 'TotalAmount'", Локализация)) <> Неопределено Тогда
               СуммаВсегоXDTO = xdtoСтрока.Получить(НСтр("ru = 'СуммаВсего'; en = 'TotalAmount'", Локализация));
           КонецЕсли;
            Если Свойства.Получить(НСтр("ru = 'КодСтроки'; en = 'LineCode'", Локализация)) <> Неопределено Тогда
                КодСтрокиXDTO = xdtoСтрока.Получить(НСтр("ru = 'КодСтроки'; en = 'LineCode'", Локализация));
            КонецЕсли;
            Если Свойства.Получить(НСтр("ru = 'ГрузовоеМесто'; en = 'CargoNumber'", Локализация)) <> Неопределено Тогда
                ГрузовоеМестоXDTO = xdtoСтрока.Получить(НСтр("ru = 'ГрузовоеМесто'; en = 'CargoNumber'", Локализация));
            КонецЕсли;
            Если Свойства.Получить(НСтр("ru = 'Заказ'; en = 'Order'", Локализация)) <> Неопределено Тогда
                ЗаказНаОтгрузкуXDTO = xdtoСтрока.Получить(НСтр("ru = 'Заказ'; en = 'Order'", Локализация));
            КонецЕсли;
            Если Свойства.Получить(НСтр("ru = 'ДанныеСерийногоУчета'; en = 'SNData'", Локализация)) <> Неопределено Тогда
                ТаблицаСерийныхНомеровXDTO = xdtoСтрока.Получить(НСтр("ru = 'ДанныеСерийногоУчета'; en = 'SNData'", Локализация));
            КонецЕсли;
			
            текСтрока = Таблица.Добавить();
            текСтрока.КодКИС = КодСтрокиXDTO;
            текСтрока.Номенклатура = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(НоменклатураXDTO, "Справочник.Номенклатура", КлассПакета_Номенклатура, сткСообщение);
            текСтрока.УпаковкаНоменклатуры = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(УпаковкаXDTO, "Справочник.УпаковкиНоменклатуры", КлассПакета_УпаковкаНоменклатуры, сткСообщение);
            текСтрока.Состояние = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(СостояниеXDTO, "Справочник.СостоянияОбъектовХранения", КлассПакета_Состояния, сткСообщение);
            текСтрока.ХарактеристикаНоменклатуры = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(ХарактеристикаXDTO, "Справочник.ХарактеристикиНоменклатуры", КлассПакета_Характеристика, сткСообщение);
            //текСтрока.СпецификацияНоменклатуры = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(СпецификацияXDTO, "Справочник.СпецификацииНоменклатуры", КлассПакета_Спецификация, сткСообщение);
            текСтрока.ПартияНоменклатуры = ИнтеграцияСервер.ПолучитьСсылку(ПартияXDTO, "Справочник.ПартииНоменклатуры", КлассПакета_Партия, сткСообщение,,, текСтрока.Номенклатура);
            Если ЗначениеЗаполнено(ЗаказНаОтгрузкуXDTO) Тогда
				ПланОтгрузки = ИнтеграцияСервер.ПолучитьСсылкуПоОбъекту(ЗаказНаОтгрузкуXDTO, "Документ.ПланОтгрузки", КлассПакета_ПланОтгрузки, сткСообщение);
				Если ЗначениеЗаполнено(ПланОтгрузки) Тогда
					текСтрока.ЗаказНаОтгрузку = ПланОтгрузки.ЗаказНаОтгрузку;
				КонецЕсли;
			КонецЕсли;
            текСтрока.Количество = КоличествоПланXDTO; 
            текСтрока.КоличествоУпаковок = КоличествоУпаковокПланXDTO;
            текСтрока.Цена = ЦенаXDTO;
            Если СтавкаНДСXDTO <> Неопределено Тогда
                текСтрока.СтавкаНДС = XMLЗначение(Тип("ПеречислениеСсылка.СтавкиНДС"), СтавкаНДСXDTO.Ссылка);
            КонецЕсли;
            текСтрока.СуммаНДС = СуммаНДСXDTO;
            текСтрока.СуммаВсего = СуммаВсегоXDTO;
            Если Не ЗначениеЗаполнено(текСтрока.Количество) Тогда
                Если ЗначениеЗаполнено(текСтрока.УпаковкаНоменклатуры) Тогда
                    текСтрока.Количество = текСтрока.КоличествоУпаковок * текСтрока.УпаковкаНоменклатуры.Коэффициент;
                Иначе
                    текСтрока.Количество = текСтрока.КоличествоУпаковок;
                КонецЕсли;
            ИначеЕсли Не ЗначениеЗаполнено(текСтрока.КоличествоУпаковок) Тогда
                Если Не ЗначениеЗаполнено(текСтрока.УпаковкаНоменклатуры) Тогда
                    текСтрока.КоличествоУпаковок = текСтрока.Количество;
                ИначеЕсли текСтрока.УпаковкаНоменклатуры.ВидУчета = Перечисления.ВидыУчетаУпаковок.УпаковкаШтучногоТовара Тогда
                    текСтрока.КоличествоУпаковок = Цел(текСтрока.Количество / текСтрока.УпаковкаНоменклатуры.Коэффициент);
                ИначеЕсли текСтрока.УпаковкаНоменклатуры.ВидУчета = Перечисления.ВидыУчетаУпаковок.УпаковкаШтучногоТовара Тогда
                    текСтрока.КоличествоУпаковок = Окр(текСтрока.Количество / текСтрока.УпаковкаНоменклатуры.Коэффициент);
                Иначе
                    текСтрока.КоличествоУпаковок = текСтрока.Количество / текСтрока.УпаковкаНоменклатуры.Коэффициент;
                КонецЕсли;
            КонецЕсли;
                          
            Если Не сткСообщение.Отказ Тогда
                Если ЗначениеЗаполнено(текСтрока.УпаковкаНоменклатуры) Тогда
                    Если текСтрока.УпаковкаНоменклатуры.ВидУчета = Перечисления.ВидыУчетаУпаковок.УпаковкаШтучногоТовара Тогда
                        Если текСтрока.Количество < текСтрока.КоличествоУпаковок
                                                    * (текСтрока.УпаковкаНоменклатуры.Коэффициент - текСтрока.УпаковкаНоменклатуры.ДельтаКоэффициент)
                            Или текСтрока.Количество > текСтрока.КоличествоУпаковок
                                                        * (текСтрока.УпаковкаНоменклатуры.Коэффициент + текСтрока.УпаковкаНоменклатуры.ДельтаКоэффициент) Тогда
                            ВызватьИсключение СтрШаблон(НСтр("ru = 'В строке по номенклатуре %1 неверные данные: Количество не соответствует допустимому отклонению'"), текСтрока.Номенклатура);
                        КонецЕсли;
                    Иначе
                        Если текСтрока.Количество <> текСтрока.КоличествоУпаковок * текСтрока.УпаковкаНоменклатуры.Коэффициент Тогда
                            ВызватьИсключение СтрШаблон(НСтр("ru = 'В строке по номенклатуре %1 неверные данные: Количество и Количество упаковок не соответствуют коэффициенту упаковки'"),
                                текСтрока.Номенклатура);
                        КонецЕсли;
                    КонецЕсли;
                Иначе
                    Если текСтрока.Количество <> текСтрока.КоличествоУпаковок Тогда
                        ВызватьИсключение СтрШаблон(НСтр("ru = 'В строке по номенклатуре %1 неверные данные: Количество и Количество упаковок не равны'"), текСтрока.Номенклатура);
                    КонецЕсли;
                КонецЕсли;
            КонецЕсли;    
            //Серийный учет
            Если ТаблицаСерийныхНомеровXDTO <> Неопределено И ТаблицаСерийныхНомеровXDTO <> "" Тогда
                текТаблицаСН = ТаблицаСерийныхНомеровXDTO.Последовательность();
                Если текТаблицаСН.Количество() Тогда
                    ДеревоСерийныхНомеров = СерийныеНомераИАгрегации.СформироватьДеревоДляСтрокиПоступления(); 
					
                    //СерийныеНомераИАгрегации.ПолучитьДанныеПоАгрегацииИзИнтеграции(ДеревоСерийныхНомеров, текТаблицаСН, Локализация);														
					
					Для Инд1 = 0 По текТаблицаСН.Количество() - 1 Цикл
						xdtoСтрокаСН = текТаблицаСН.ПолучитьЗначение(Инд1);
						НомерСНXDTO = xdtoСтрокаСН.Получить(НСтр("ru = 'СН';
																|bg = 'СН';
																|en = 'SN'", Локализация));
						НовСтрДер = ДеревоСерийныхНомеров.Строки.Добавить();
						НовСтрДер.Номер = НомерСНXDTO;
						НовСтрДер.ЭтоАгрегация = Ложь;
					КонецЦикла;
	
                    текСтрока.ДанныеСерийногоУчета = СерийныеНомераИАгрегации.СформироватьДанныеПоСтрокеПоступления(ДеревоСерийныхНомеров);	
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;    
	Если сткСообщение.СоответствиеНеНайденныхИдентификаторов.Количество() Тогда
		ИнтеграцияСервер.СформироватьЗапросНаПолучениеДанных(сткСообщение.СоответствиеНеНайденныхИдентификаторов, сткСообщение.Узел);
	КонецЕсли;

	Если Не сткСообщение.Отказ Тогда
		новыйОбъект.ДополнительныеСвойства.Вставить("Статус", Справочники.СтатусыДокументов.НеЗагружен);
		новыйОбъект.ДополнительныеСвойства.Вставить("СтатусИзменен");
		Если Не ИнтеграцияСервер.ЗаписатьОбъектВБазуДанных(новыйОбъект, сткСообщение) Тогда
			Перейти ~Выход1;
		КонецЕсли;

		//Строки планов отгрузки
		НаборСтрок = РегистрыСведений.СтрокиПлановПоступления.СоздатьНаборЗаписей();
		НаборСтрок.Отбор.План.Установить(новыйОбъект.Ссылка);

		СтараяТаблица = КонвертацияДокументов.ТекущиеЗаписиСтрокПоступления(НаборСтрок);
		ТаблицаСтрок = СтараяТаблица.Скопировать();
		ТаблицаСтрок.Колонки.Добавить("СтароеКоличество", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(12, 3)));

		Заказ = Неопределено;
		КоличествоЗаказов = 0;
		Для Каждого текСтрока Из ТаблицаСтрок Цикл
			Если текСтрока.ОжидаемоеПоступление <> Заказ Тогда
				КоличествоЗаказов = КоличествоЗаказов + 1;
				Заказ = текСтрока.ОжидаемоеПоступление;
			КонецЕсли;
			текСтрока.СтароеКоличество = текСтрока.Количество;
			текСтрока.Количество = 0;
			текСтрока.КоличествоУпаковок = 0;
		КонецЦикла;

		ТребуетсяКонвертация = Ложь;
		ОчиститьОП = Ложь;

		сткПоискПоКоду = Новый Структура("КодКИС");
		сткПоискПоПараметрам = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Состояние, ПартияНоменклатуры");
		Для Каждого текСтрока Из Таблица Цикл
			Если ЗначениеЗаполнено(текСтрока.КодКИС) Тогда
				сткПоиск = сткПоискПоКоду;
			Иначе
				сткПоиск = сткПоискПоПараметрам;
			КонецЕсли;

			ЗаполнитьЗначенияСвойств(сткПоиск, текСтрока);
			сткПоиск.Вставить("Количество", 0);
			мсвСтрок = ТаблицаСтрок.НайтиСтроки(сткПоиск);

			НераспределенноеКоличество = текСтрока.Количество;
			НераспределенноеКоличествоУпаковок = текСтрока.КоличествоУпаковок;
			Для Каждого текНайденнаяСтрока Из мсвСтрок Цикл
				Если КоличествоЗаказов > 1 Тогда
					КоличествоКРаспределению = Мин(НераспределенноеКоличество, текНайденнаяСтрока.СтароеКоличество);
					Если ЗначениеЗаполнено(текСтрока.УпаковкаНоменклатуры) Тогда
						Если текСтрока.УпаковкаНоменклатуры.ВидУчета = Перечисления.ВидыУчетаУпаковок.УпаковкаШтучногоТовара Тогда
							КоличествоКРаспределениюУпаковок = Цел(КоличествоКРаспределению / текСтрока.УпаковкаНоменклатуры.Коэффициент);
							КоличествоКРаспределению = КоличествоКРаспределениюУпаковок * текСтрока.УпаковкаНоменклатуры.Коэффициент;
						ИначеЕсли текСтрока.УпаковкаНоменклатуры.ВидУчета = Перечисления.ВидыУчетаУпаковок.УпаковкаМерногоТовара Тогда
							КоличествоКРаспределениюУпаковок = Окр(КоличествоКРаспределению / текСтрока.УпаковкаНоменклатуры.Коэффициент);
							Если КоличествоКРаспределению > КоличествоКРаспределениюУпаковок * (текСтрока.УпаковкаНоменклатуры.Коэффициент + текСтрока.УпаковкаНоменклатуры.ДельтаКоэффициент) Тогда
								КоличествоКРаспределению = КоличествоКРаспределениюУпаковок * (текСтрока.УпаковкаНоменклатуры.Коэффициент + текСтрока.УпаковкаНоменклатуры.ДельтаКоэффициент);
							ИначеЕсли КоличествоКРаспределению < КоличествоКРаспределениюУпаковок * (текСтрока.УпаковкаНоменклатуры.Коэффициент - текСтрока.УпаковкаНоменклатуры.ДельтаКоэффициент) Тогда
								КоличествоКРаспределениюУпаковок = КоличествоКРаспределениюУпаковок - 1;
								Если КоличествоКРаспределению > КоличествоКРаспределениюУпаковок * (текСтрока.УпаковкаНоменклатуры.Коэффициент + текСтрока.УпаковкаНоменклатуры.ДельтаКоэффициент) Тогда
									КоличествоКРаспределению = КоличествоКРаспределениюУпаковок * (текСтрока.УпаковкаНоменклатуры.Коэффициент + текСтрока.УпаковкаНоменклатуры.ДельтаКоэффициент);
								КонецЕсли;
							КонецЕсли;
						Иначе
							КоличествоКРаспределениюУпаковок = КоличествоКРаспределению / текСтрока.УпаковкаНоменклатуры.Коэффициент;
						КонецЕсли;
					Иначе
						КоличествоКРаспределениюУпаковок = КоличествоКРаспределению;
					КонецЕсли;
				Иначе
					КоличествоКРаспределению = НераспределенноеКоличество;
					КоличествоКРаспределениюУпаковок = текСтрока.КоличествоУпаковок;
				КонецЕсли;

				Если КоличествоКРаспределению > 0 Тогда
					Если текСтрока.Номенклатура <> текНайденнаяСтрока.Номенклатура
						 Или текСтрока.ПартияНоменклатуры <> текНайденнаяСтрока.ПартияНоменклатуры
						 Или текСтрока.Состояние <> текНайденнаяСтрока.Состояние
						 Или текСтрока.ХарактеристикаНоменклатуры <> текНайденнаяСтрока.ХарактеристикаНоменклатуры Тогда
						текНайденнаяСтрока.ОбъектХранения = Неопределено;
						текНайденнаяСтрока.Партия = Неопределено;
						текНайденнаяСтрока.Упаковка = Неопределено;
						текНайденнаяСтрока.КонфигурацияУпаковок = Неопределено;
						текНайденнаяСтрока.Спецификация = Неопределено;

						ТребуетсяКонвертация = Истина;
					КонецЕсли;
					Если текСтрока.УпаковкаНоменклатуры <> текНайденнаяСтрока.УпаковкаНоменклатуры Тогда
						текНайденнаяСтрока.Упаковка = Неопределено;
						ТребуетсяКонвертация = Истина;
					КонецЕсли;
					//Если текСтрока.СпецификацияНоменклатуры <> текНайденнаяСтрока.СпецификацияНоменклатуры Тогда
					//	текНайденнаяСтрока.Спецификация = Неопределено;
					//	ТребуетсяКонвертация = Истина;
					//КонецЕсли;
					ЗаполнитьЗначенияСвойств(текНайденнаяСтрока, текСтрока,, "Количество, КоличествоУпаковок");

					текНайденнаяСтрока.Количество = КоличествоКРаспределению;
					текНайденнаяСтрока.КоличествоУпаковок = КоличествоКРаспределениюУпаковок;

					НераспределенноеКоличество = НераспределенноеКоличество - КоличествоКРаспределению;
					НераспределенноеКоличествоУпаковок = НераспределенноеКоличествоУпаковок - КоличествоКРаспределениюУпаковок;
					Если НераспределенноеКоличество = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

			Если НераспределенноеКоличество Тогда
				сткПоискПоКодуНК = Новый Структура("КодКИС");
				сткПоискПоПараметрамНК = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Состояние, ПартияНоменклатуры");
				Если ЗначениеЗаполнено(текСтрока.КодКИС) Тогда
					сткПоискНК = сткПоискПоКодуНК;
				Иначе
					сткПоискНК = сткПоискПоПараметрамНК;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(сткПоискНК, текСтрока);
				сткПоискНК.Вставить("ОжидаемоеПоступление", Документы.ОжидаемоеПоступление.ПустаяСсылка());
				НадСтр = ТаблицаСтрок.НайтиСтроки(сткПоискНК);
				Если НадСтр.Количество() Тогда
					НоваяСтрока = НадСтр[0];
					НоваяСтрока.Количество = НоваяСтрока.Количество + НераспределенноеКоличество;
					НоваяСтрока.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковок + НераспределенноеКоличествоУпаковок;
					Если НераспределенноеКоличествоУпаковок = 0 Тогда
						НоваяСтрока.УпаковкаНоменклатуры = Неопределено;
						НоваяСтрока.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковок + НераспределенноеКоличество;
					КонецЕсли;
				Иначе
					НоваяСтрока = ТаблицаСтрок.Добавить();
					НоваяСтрока.План = новыйОбъект.Ссылка;
					ЗаполнитьЗначенияСвойств(НоваяСтрока, текСтрока,, "Количество, КоличествоУпаковок");
	
					НоваяСтрока.Количество = НераспределенноеКоличество;
					НоваяСтрока.КоличествоУпаковок = НераспределенноеКоличествоУпаковок;
					Если НераспределенноеКоличествоУпаковок = 0 Тогда
						НоваяСтрока.УпаковкаНоменклатуры = Неопределено;
						НоваяСтрока.КоличествоУпаковок = НераспределенноеКоличество;
					КонецЕсли;
				КонецЕсли;
				ТребуетсяКонвертация = Истина;
				ОчиститьОП = Истина;
			КонецЕсли;
		КонецЦикла;
		МассивУдаляемыхСтрок = Новый Массив;
		Для Каждого текСтрока Из ТаблицаСтрок Цикл
			Если (ИсходныйСтатус = Справочники.СтатусыДокументов.НеЗагружен 
				Или ИсходныйСтатус = Справочники.СтатусыДокументов.Новый) 
				И текСтрока.Количество = 0 
				Тогда
				МассивУдаляемыхСтрок.Добавить(текСтрока);
			КонецЕсли;
			Если ПометкаУдаления Или Не Проведен Тогда
				текСтрока.Количество = 0;
				текСтрока.КоличествоУпаковок = 0;
			КонецЕсли;
		КонецЦикла;
		Для Каждого Строка Из МассивУдаляемыхСтрок Цикл
			ТаблицаСтрок.Удалить(Строка);
		КонецЦикла;
		Если ОчиститьОП И ЗначениеЗаполнено(новыйОбъект.ОжидаемоеПоступление) Тогда
			новыйОбъект.ОжидаемоеПоступление = Неопределено;
			Если Не ИнтеграцияСервер.ЗаписатьОбъектВБазуДанных(новыйОбъект, сткСообщение) Тогда
				Перейти ~Выход1;
			КонецЕсли;
		КонецЕсли;
		НаборСтрок.Загрузить(ТаблицаСтрок);
		Если ТребуетсяКонвертация Тогда
			НаборСтрок.ДополнительныеСвойства.Вставить("ЗаполнятьОбъектХраненияЕслиНеЗаполнен");
		КонецЕсли;
		Если Не ИнтеграцияСервер.ЗаписатьСтрокиДокументаВБазуДанных(новыйОбъект.Ссылка, НаборСтрок, СтараяТаблица, сткСообщение) Тогда
			Перейти ~Выход1;
		КонецЕсли;

		Загружен = Проведен;
		Для Каждого текСтрока Из НаборСтрок Цикл
			Если Не ЗначениеЗаполнено(текСтрока.ОбъектХранения) Тогда
				Загружен = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если ПометкаУдаления Тогда
			СтатусыДокументовСервер.УстановитьСтатусДокумента(новыйОбъект.Ссылка, Справочники.СтатусыДокументов.Отменен);
		ИначеЕсли ИсходныйСтатус = Справочники.СтатусыДокументов.Отменен Или (ИсходныйСтатус = Справочники.СтатусыДокументов.НеЗагружен И НаборСтрок.Количество()) Тогда
			СтатусыДокументовСервер.УстановитьСтатусДокумента(новыйОбъект.Ссылка, Справочники.СтатусыДокументов.Новый);
		ИначеЕсли Загружен Тогда
			Если ИсходныйСтатус = Справочники.СтатусыДокументов.Обработан Тогда
				СтатусыДокументовСервер.УстановитьСтатусДокумента(новыйОбъект.Ссылка, Справочники.СтатусыДокументов.Скорректирован);
			Иначе
				СтатусыДокументовСервер.УстановитьСтатусДокумента(новыйОбъект.Ссылка, ИсходныйСтатус);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	~Выход1:
	СостояниеСообщения = сткСообщение.СостояниеСообщения;
	ТекстОшибки = сткСообщение.ТекстОшибки;
	Задержка = сткСообщение.Задержка;

    ~Выход:;
